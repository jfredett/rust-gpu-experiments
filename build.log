   Compiling proc-macro2 v1.0.93
   Compiling unicode-ident v1.0.16
   Compiling cfg-if v1.0.0
   Compiling libc v0.2.169
   Compiling once_cell v1.20.3
   Compiling memchr v2.7.4
   Compiling serde v1.0.217
   Compiling bitflags v2.8.0
   Compiling foldhash v0.1.4
   Compiling itoa v1.0.14
   Compiling equivalent v1.0.1
   Compiling serde_json v1.0.138
   Compiling lazy_static v1.5.0
   Compiling ryu v1.0.19
   Compiling regex-syntax v0.8.5
   Compiling version_check v0.9.5
   Compiling shlex v1.3.0
   Compiling wasmparser v0.222.1
   Compiling regex-syntax v0.6.29
   Compiling adler2 v2.0.0
   Compiling static_assertions v1.1.0
   Compiling pin-project-lite v0.2.16
     Running `CARGO=/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/bin/cargo CARGO_CRATE_NAME=build_script_build CARGO_MANIFEST_DIR=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/proc-macro2-1.0.93 CARGO_MANIFEST_PATH=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/proc-macro2-1.0.93/Cargo.toml CARGO_PKG_AUTHORS='David Tolnay <dtolnay@gmail.com>:Alex Crichton <alex@alexcrichton.com>' CARGO_PKG_DESCRIPTION='A substitute implementation of the compiler'\''s `proc_macro` API to decouple token-based libraries from the procedural macro use case.' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=proc-macro2 CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/dtolnay/proc-macro2' CARGO_PKG_RUST_VERSION=1.56 CARGO_PKG_VERSION=1.0.93 CARGO_PKG_VERSION_MAJOR=1 CARGO_PKG_VERSION_MINOR=0 CARGO_PKG_VERSION_PATCH=93 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/jfredett/code/rust-gpu-ex/target/debug/deps:/nix/store/ggqfrwgzpr3v3dkvh4cnmhymnvf6cqja-gcc-14-20241116-lib/lib' rustc --crate-name build_script_build --edition=2021 /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/proc-macro2-1.0.93/build.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type bin --emit=dep-info,link -C opt-level=3 -C embed-bitcode=no -C debug-assertions=on --cfg 'feature="default"' --cfg 'feature="proc-macro"' --check-cfg 'cfg(docsrs)' --check-cfg 'cfg(feature, values("default", "nightly", "proc-macro", "span-locations"))' -C metadata=4677317602a4097b -C extra-filename=-4677317602a4097b --out-dir /home/jfredett/code/rust-gpu-ex/target/debug/build/proc-macro2-4677317602a4097b -L dependency=/home/jfredett/code/rust-gpu-ex/target/debug/deps --cap-lints warn`
     Running `CARGO=/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/bin/cargo CARGO_CRATE_NAME=unicode_ident CARGO_MANIFEST_DIR=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.16 CARGO_MANIFEST_PATH=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.16/Cargo.toml CARGO_PKG_AUTHORS='David Tolnay <dtolnay@gmail.com>' CARGO_PKG_DESCRIPTION='Determine whether characters have the XID_Start or XID_Continue properties according to Unicode Standard Annex #31' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='(MIT OR Apache-2.0) AND Unicode-3.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=unicode-ident CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/dtolnay/unicode-ident' CARGO_PKG_RUST_VERSION=1.31 CARGO_PKG_VERSION=1.0.16 CARGO_PKG_VERSION_MAJOR=1 CARGO_PKG_VERSION_MINOR=0 CARGO_PKG_VERSION_PATCH=16 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/jfredett/code/rust-gpu-ex/target/debug/deps:/nix/store/ggqfrwgzpr3v3dkvh4cnmhymnvf6cqja-gcc-14-20241116-lib/lib' rustc --crate-name unicode_ident --edition=2018 /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.16/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=3 -C embed-bitcode=no -C debug-assertions=on --check-cfg 'cfg(docsrs)' --check-cfg 'cfg(feature, values())' -C metadata=ddd6fc7b9b0cd3b9 -C extra-filename=-ddd6fc7b9b0cd3b9 --out-dir /home/jfredett/code/rust-gpu-ex/target/debug/deps -L dependency=/home/jfredett/code/rust-gpu-ex/target/debug/deps --cap-lints warn`
     Running `CARGO=/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/bin/cargo CARGO_CRATE_NAME=cfg_if CARGO_MANIFEST_DIR=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cfg-if-1.0.0 CARGO_MANIFEST_PATH=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cfg-if-1.0.0/Cargo.toml CARGO_PKG_AUTHORS='Alex Crichton <alex@alexcrichton.com>' CARGO_PKG_DESCRIPTION='A macro to ergonomically define an item depending on a large number of #[cfg]
parameters. Structured like an if-else chain, the first matching branch is the
item that gets emitted.
' CARGO_PKG_HOMEPAGE='https://github.com/alexcrichton/cfg-if' CARGO_PKG_LICENSE=MIT/Apache-2.0 CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=cfg-if CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/alexcrichton/cfg-if' CARGO_PKG_RUST_VERSION='' CARGO_PKG_VERSION=1.0.0 CARGO_PKG_VERSION_MAJOR=1 CARGO_PKG_VERSION_MINOR=0 CARGO_PKG_VERSION_PATCH=0 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/jfredett/code/rust-gpu-ex/target/debug/deps:/nix/store/ggqfrwgzpr3v3dkvh4cnmhymnvf6cqja-gcc-14-20241116-lib/lib' rustc --crate-name cfg_if --edition=2018 /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cfg-if-1.0.0/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=3 -C embed-bitcode=no -C debug-assertions=on --check-cfg 'cfg(docsrs)' --check-cfg 'cfg(feature, values("compiler_builtins", "core", "rustc-dep-of-std"))' -C metadata=a56fbeab59b8aa84 -C extra-filename=-a56fbeab59b8aa84 --out-dir /home/jfredett/code/rust-gpu-ex/target/debug/deps -L dependency=/home/jfredett/code/rust-gpu-ex/target/debug/deps --cap-lints warn`
     Running `CARGO=/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/bin/cargo CARGO_CRATE_NAME=build_script_build CARGO_MANIFEST_DIR=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/libc-0.2.169 CARGO_MANIFEST_PATH=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/libc-0.2.169/Cargo.toml CARGO_PKG_AUTHORS='The Rust Project Developers' CARGO_PKG_DESCRIPTION='Raw FFI bindings to platform libraries like libc.
' CARGO_PKG_HOMEPAGE='https://github.com/rust-lang/libc' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=libc CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/rust-lang/libc' CARGO_PKG_RUST_VERSION=1.63 CARGO_PKG_VERSION=0.2.169 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=2 CARGO_PKG_VERSION_PATCH=169 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/jfredett/code/rust-gpu-ex/target/debug/deps:/nix/store/ggqfrwgzpr3v3dkvh4cnmhymnvf6cqja-gcc-14-20241116-lib/lib' rustc --crate-name build_script_build --edition=2021 /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/libc-0.2.169/build.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type bin --emit=dep-info,link -C opt-level=3 -C embed-bitcode=no -C debug-assertions=on --cfg 'feature="default"' --cfg 'feature="std"' --check-cfg 'cfg(docsrs)' --check-cfg 'cfg(feature, values("align", "const-extern-fn", "default", "extra_traits", "rustc-dep-of-std", "rustc-std-workspace-core", "std", "use_std"))' -C metadata=0b10198da98c5682 -C extra-filename=-0b10198da98c5682 --out-dir /home/jfredett/code/rust-gpu-ex/target/debug/build/libc-0b10198da98c5682 -L dependency=/home/jfredett/code/rust-gpu-ex/target/debug/deps --cap-lints warn`
     Running `CARGO=/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/bin/cargo CARGO_CRATE_NAME=once_cell CARGO_MANIFEST_DIR=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/once_cell-1.20.3 CARGO_MANIFEST_PATH=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/once_cell-1.20.3/Cargo.toml CARGO_PKG_AUTHORS='Aleksey Kladov <aleksey.kladov@gmail.com>' CARGO_PKG_DESCRIPTION='Single assignment cells and lazy values.' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=once_cell CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/matklad/once_cell' CARGO_PKG_RUST_VERSION=1.60 CARGO_PKG_VERSION=1.20.3 CARGO_PKG_VERSION_MAJOR=1 CARGO_PKG_VERSION_MINOR=20 CARGO_PKG_VERSION_PATCH=3 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/jfredett/code/rust-gpu-ex/target/debug/deps:/nix/store/ggqfrwgzpr3v3dkvh4cnmhymnvf6cqja-gcc-14-20241116-lib/lib' rustc --crate-name once_cell --edition=2021 /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/once_cell-1.20.3/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=3 -C embed-bitcode=no -C debug-assertions=on --cfg 'feature="alloc"' --cfg 'feature="default"' --cfg 'feature="race"' --cfg 'feature="std"' --check-cfg 'cfg(docsrs)' --check-cfg 'cfg(feature, values("alloc", "atomic-polyfill", "critical-section", "default", "parking_lot", "portable-atomic", "race", "std", "unstable"))' -C metadata=bd1b1fc72190860c -C extra-filename=-bd1b1fc72190860c --out-dir /home/jfredett/code/rust-gpu-ex/target/debug/deps -L dependency=/home/jfredett/code/rust-gpu-ex/target/debug/deps --cap-lints warn`
     Running `CARGO=/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/bin/cargo CARGO_CRATE_NAME=memchr CARGO_MANIFEST_DIR=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/memchr-2.7.4 CARGO_MANIFEST_PATH=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/memchr-2.7.4/Cargo.toml CARGO_PKG_AUTHORS='Andrew Gallant <jamslam@gmail.com>:bluss' CARGO_PKG_DESCRIPTION='Provides extremely fast (uses SIMD on x86_64, aarch64 and wasm32) routines for
1, 2 or 3 byte search and single substring search.
' CARGO_PKG_HOMEPAGE='https://github.com/BurntSushi/memchr' CARGO_PKG_LICENSE='Unlicense OR MIT' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=memchr CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/BurntSushi/memchr' CARGO_PKG_RUST_VERSION=1.61 CARGO_PKG_VERSION=2.7.4 CARGO_PKG_VERSION_MAJOR=2 CARGO_PKG_VERSION_MINOR=7 CARGO_PKG_VERSION_PATCH=4 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/jfredett/code/rust-gpu-ex/target/debug/deps:/nix/store/ggqfrwgzpr3v3dkvh4cnmhymnvf6cqja-gcc-14-20241116-lib/lib' rustc --crate-name memchr --edition=2021 /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/memchr-2.7.4/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=3 -C embed-bitcode=no -C debug-assertions=on --cfg 'feature="alloc"' --cfg 'feature="default"' --cfg 'feature="std"' --check-cfg 'cfg(docsrs)' --check-cfg 'cfg(feature, values("alloc", "compiler_builtins", "core", "default", "libc", "logging", "rustc-dep-of-std", "std", "use_std"))' -C metadata=f5d0dba28048739b -C extra-filename=-f5d0dba28048739b --out-dir /home/jfredett/code/rust-gpu-ex/target/debug/deps -L dependency=/home/jfredett/code/rust-gpu-ex/target/debug/deps --cap-lints warn`
     Running `CARGO=/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/bin/cargo CARGO_CRATE_NAME=build_script_build CARGO_MANIFEST_DIR=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.217 CARGO_MANIFEST_PATH=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.217/Cargo.toml CARGO_PKG_AUTHORS='Erick Tryzelaar <erick.tryzelaar@gmail.com>:David Tolnay <dtolnay@gmail.com>' CARGO_PKG_DESCRIPTION='A generic serialization/deserialization framework' CARGO_PKG_HOMEPAGE='https://serde.rs' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=serde CARGO_PKG_README=crates-io.md CARGO_PKG_REPOSITORY='https://github.com/serde-rs/serde' CARGO_PKG_RUST_VERSION=1.31 CARGO_PKG_VERSION=1.0.217 CARGO_PKG_VERSION_MAJOR=1 CARGO_PKG_VERSION_MINOR=0 CARGO_PKG_VERSION_PATCH=217 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/jfredett/code/rust-gpu-ex/target/debug/deps:/nix/store/ggqfrwgzpr3v3dkvh4cnmhymnvf6cqja-gcc-14-20241116-lib/lib' rustc --crate-name build_script_build --edition=2018 /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.217/build.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type bin --emit=dep-info,link -C opt-level=3 -C embed-bitcode=no -C debug-assertions=on --cfg 'feature="default"' --cfg 'feature="derive"' --cfg 'feature="serde_derive"' --cfg 'feature="std"' --check-cfg 'cfg(docsrs)' --check-cfg 'cfg(feature, values("alloc", "default", "derive", "rc", "serde_derive", "std", "unstable"))' -C metadata=5c3ebf9913aa6372 -C extra-filename=-5c3ebf9913aa6372 --out-dir /home/jfredett/code/rust-gpu-ex/target/debug/build/serde-5c3ebf9913aa6372 -L dependency=/home/jfredett/code/rust-gpu-ex/target/debug/deps --cap-lints warn`
     Running `CARGO=/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/bin/cargo CARGO_CRATE_NAME=bitflags CARGO_MANIFEST_DIR=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-2.8.0 CARGO_MANIFEST_PATH=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-2.8.0/Cargo.toml CARGO_PKG_AUTHORS='The Rust Project Developers' CARGO_PKG_DESCRIPTION='A macro to generate structures which behave like bitflags.
' CARGO_PKG_HOMEPAGE='https://github.com/bitflags/bitflags' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=bitflags CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/bitflags/bitflags' CARGO_PKG_RUST_VERSION=1.56.0 CARGO_PKG_VERSION=2.8.0 CARGO_PKG_VERSION_MAJOR=2 CARGO_PKG_VERSION_MINOR=8 CARGO_PKG_VERSION_PATCH=0 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/jfredett/code/rust-gpu-ex/target/debug/deps:/nix/store/ggqfrwgzpr3v3dkvh4cnmhymnvf6cqja-gcc-14-20241116-lib/lib' rustc --crate-name bitflags --edition=2021 /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-2.8.0/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=3 -C embed-bitcode=no -C debug-assertions=on --cfg 'feature="std"' --check-cfg 'cfg(docsrs)' --check-cfg 'cfg(feature, values("arbitrary", "bytemuck", "compiler_builtins", "core", "example_generated", "rustc-dep-of-std", "serde", "std"))' -C metadata=65c57d855a941538 -C extra-filename=-65c57d855a941538 --out-dir /home/jfredett/code/rust-gpu-ex/target/debug/deps -L dependency=/home/jfredett/code/rust-gpu-ex/target/debug/deps --cap-lints warn`
     Running `CARGO=/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/bin/cargo CARGO_CRATE_NAME=foldhash CARGO_MANIFEST_DIR=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/foldhash-0.1.4 CARGO_MANIFEST_PATH=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/foldhash-0.1.4/Cargo.toml CARGO_PKG_AUTHORS='Orson Peters <orsonpeters@gmail.com>' CARGO_PKG_DESCRIPTION='A fast, non-cryptographic, minimally DoS-resistant hashing algorithm.' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE=Zlib CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=foldhash CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/orlp/foldhash' CARGO_PKG_RUST_VERSION='' CARGO_PKG_VERSION=0.1.4 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=1 CARGO_PKG_VERSION_PATCH=4 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/jfredett/code/rust-gpu-ex/target/debug/deps:/nix/store/ggqfrwgzpr3v3dkvh4cnmhymnvf6cqja-gcc-14-20241116-lib/lib' rustc --crate-name foldhash --edition=2021 /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/foldhash-0.1.4/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=3 -C embed-bitcode=no -C debug-assertions=on --check-cfg 'cfg(docsrs)' --check-cfg 'cfg(feature, values("default", "std"))' -C metadata=5ef2920864c53069 -C extra-filename=-5ef2920864c53069 --out-dir /home/jfredett/code/rust-gpu-ex/target/debug/deps -L dependency=/home/jfredett/code/rust-gpu-ex/target/debug/deps --cap-lints warn`
     Running `CARGO=/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/bin/cargo CARGO_CRATE_NAME=itoa CARGO_MANIFEST_DIR=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.14 CARGO_MANIFEST_PATH=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.14/Cargo.toml CARGO_PKG_AUTHORS='David Tolnay <dtolnay@gmail.com>' CARGO_PKG_DESCRIPTION='Fast integer primitive to string conversion' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=itoa CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/dtolnay/itoa' CARGO_PKG_RUST_VERSION=1.36 CARGO_PKG_VERSION=1.0.14 CARGO_PKG_VERSION_MAJOR=1 CARGO_PKG_VERSION_MINOR=0 CARGO_PKG_VERSION_PATCH=14 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/jfredett/code/rust-gpu-ex/target/debug/deps:/nix/store/ggqfrwgzpr3v3dkvh4cnmhymnvf6cqja-gcc-14-20241116-lib/lib' rustc --crate-name itoa --edition=2018 /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.14/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=3 -C embed-bitcode=no -C debug-assertions=on --check-cfg 'cfg(docsrs)' --check-cfg 'cfg(feature, values("no-panic"))' -C metadata=520a3cdd65cc5743 -C extra-filename=-520a3cdd65cc5743 --out-dir /home/jfredett/code/rust-gpu-ex/target/debug/deps -L dependency=/home/jfredett/code/rust-gpu-ex/target/debug/deps --cap-lints warn`
     Running `CARGO=/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/bin/cargo CARGO_CRATE_NAME=equivalent CARGO_MANIFEST_DIR=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/equivalent-1.0.1 CARGO_MANIFEST_PATH=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/equivalent-1.0.1/Cargo.toml CARGO_PKG_AUTHORS='' CARGO_PKG_DESCRIPTION='Traits for key comparison in maps.' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='Apache-2.0 OR MIT' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=equivalent CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/cuviper/equivalent' CARGO_PKG_RUST_VERSION=1.6 CARGO_PKG_VERSION=1.0.1 CARGO_PKG_VERSION_MAJOR=1 CARGO_PKG_VERSION_MINOR=0 CARGO_PKG_VERSION_PATCH=1 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/jfredett/code/rust-gpu-ex/target/debug/deps:/nix/store/ggqfrwgzpr3v3dkvh4cnmhymnvf6cqja-gcc-14-20241116-lib/lib' rustc --crate-name equivalent --edition=2015 /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/equivalent-1.0.1/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=3 -C embed-bitcode=no -C debug-assertions=on --check-cfg 'cfg(docsrs)' --check-cfg 'cfg(feature, values())' -C metadata=44dbb2ac1a7b78c6 -C extra-filename=-44dbb2ac1a7b78c6 --out-dir /home/jfredett/code/rust-gpu-ex/target/debug/deps -L dependency=/home/jfredett/code/rust-gpu-ex/target/debug/deps --cap-lints warn`
     Running `CARGO=/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/bin/cargo CARGO_CRATE_NAME=build_script_build CARGO_MANIFEST_DIR=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde_json-1.0.138 CARGO_MANIFEST_PATH=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde_json-1.0.138/Cargo.toml CARGO_PKG_AUTHORS='Erick Tryzelaar <erick.tryzelaar@gmail.com>:David Tolnay <dtolnay@gmail.com>' CARGO_PKG_DESCRIPTION='A JSON serialization file format' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=serde_json CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/serde-rs/json' CARGO_PKG_RUST_VERSION=1.56 CARGO_PKG_VERSION=1.0.138 CARGO_PKG_VERSION_MAJOR=1 CARGO_PKG_VERSION_MINOR=0 CARGO_PKG_VERSION_PATCH=138 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/jfredett/code/rust-gpu-ex/target/debug/deps:/nix/store/ggqfrwgzpr3v3dkvh4cnmhymnvf6cqja-gcc-14-20241116-lib/lib' rustc --crate-name build_script_build --edition=2021 /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde_json-1.0.138/build.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type bin --emit=dep-info,link -C opt-level=3 -C embed-bitcode=no -C debug-assertions=on --cfg 'feature="default"' --cfg 'feature="std"' --check-cfg 'cfg(docsrs)' --check-cfg 'cfg(feature, values("alloc", "arbitrary_precision", "default", "float_roundtrip", "indexmap", "preserve_order", "raw_value", "std", "unbounded_depth"))' -C metadata=54983b4a18fa8eb4 -C extra-filename=-54983b4a18fa8eb4 --out-dir /home/jfredett/code/rust-gpu-ex/target/debug/build/serde_json-54983b4a18fa8eb4 -L dependency=/home/jfredett/code/rust-gpu-ex/target/debug/deps --cap-lints warn`
     Running `CARGO=/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/bin/cargo CARGO_CRATE_NAME=lazy_static CARGO_MANIFEST_DIR=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lazy_static-1.5.0 CARGO_MANIFEST_PATH=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lazy_static-1.5.0/Cargo.toml CARGO_PKG_AUTHORS='Marvin Löbel <loebel.marvin@gmail.com>' CARGO_PKG_DESCRIPTION='A macro for declaring lazily evaluated statics in Rust.' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=lazy_static CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/rust-lang-nursery/lazy-static.rs' CARGO_PKG_RUST_VERSION='' CARGO_PKG_VERSION=1.5.0 CARGO_PKG_VERSION_MAJOR=1 CARGO_PKG_VERSION_MINOR=5 CARGO_PKG_VERSION_PATCH=0 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/jfredett/code/rust-gpu-ex/target/debug/deps:/nix/store/ggqfrwgzpr3v3dkvh4cnmhymnvf6cqja-gcc-14-20241116-lib/lib' rustc --crate-name lazy_static --edition=2015 /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lazy_static-1.5.0/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=3 -C embed-bitcode=no -C debug-assertions=on --check-cfg 'cfg(docsrs)' --check-cfg 'cfg(feature, values("spin", "spin_no_std"))' -C metadata=958d282f6ccb92d3 -C extra-filename=-958d282f6ccb92d3 --out-dir /home/jfredett/code/rust-gpu-ex/target/debug/deps -L dependency=/home/jfredett/code/rust-gpu-ex/target/debug/deps --cap-lints warn`
     Running `CARGO=/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/bin/cargo CARGO_CRATE_NAME=ryu CARGO_MANIFEST_DIR=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.19 CARGO_MANIFEST_PATH=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.19/Cargo.toml CARGO_PKG_AUTHORS='David Tolnay <dtolnay@gmail.com>' CARGO_PKG_DESCRIPTION='Fast floating point to string conversion' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='Apache-2.0 OR BSL-1.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=ryu CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/dtolnay/ryu' CARGO_PKG_RUST_VERSION=1.36 CARGO_PKG_VERSION=1.0.19 CARGO_PKG_VERSION_MAJOR=1 CARGO_PKG_VERSION_MINOR=0 CARGO_PKG_VERSION_PATCH=19 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/jfredett/code/rust-gpu-ex/target/debug/deps:/nix/store/ggqfrwgzpr3v3dkvh4cnmhymnvf6cqja-gcc-14-20241116-lib/lib' rustc --crate-name ryu --edition=2018 /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.19/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=3 -C embed-bitcode=no -C debug-assertions=on --check-cfg 'cfg(docsrs)' --check-cfg 'cfg(feature, values("no-panic", "small"))' -C metadata=7609d70cb185a142 -C extra-filename=-7609d70cb185a142 --out-dir /home/jfredett/code/rust-gpu-ex/target/debug/deps -L dependency=/home/jfredett/code/rust-gpu-ex/target/debug/deps --cap-lints warn`
     Running `CARGO=/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/bin/cargo CARGO_CRATE_NAME=regex_syntax CARGO_MANIFEST_DIR=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/regex-syntax-0.8.5 CARGO_MANIFEST_PATH=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/regex-syntax-0.8.5/Cargo.toml CARGO_PKG_AUTHORS='The Rust Project Developers:Andrew Gallant <jamslam@gmail.com>' CARGO_PKG_DESCRIPTION='A regular expression parser.' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=regex-syntax CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/rust-lang/regex/tree/master/regex-syntax' CARGO_PKG_RUST_VERSION=1.65 CARGO_PKG_VERSION=0.8.5 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=8 CARGO_PKG_VERSION_PATCH=5 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/jfredett/code/rust-gpu-ex/target/debug/deps:/nix/store/ggqfrwgzpr3v3dkvh4cnmhymnvf6cqja-gcc-14-20241116-lib/lib' rustc --crate-name regex_syntax --edition=2021 /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/regex-syntax-0.8.5/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=3 -C embed-bitcode=no -C debug-assertions=on --cfg 'feature="default"' --cfg 'feature="std"' --cfg 'feature="unicode"' --cfg 'feature="unicode-age"' --cfg 'feature="unicode-bool"' --cfg 'feature="unicode-case"' --cfg 'feature="unicode-gencat"' --cfg 'feature="unicode-perl"' --cfg 'feature="unicode-script"' --cfg 'feature="unicode-segment"' --check-cfg 'cfg(docsrs)' --check-cfg 'cfg(feature, values("arbitrary", "default", "std", "unicode", "unicode-age", "unicode-bool", "unicode-case", "unicode-gencat", "unicode-perl", "unicode-script", "unicode-segment"))' -C metadata=9a505ebdc0aa5b9e -C extra-filename=-9a505ebdc0aa5b9e --out-dir /home/jfredett/code/rust-gpu-ex/target/debug/deps -L dependency=/home/jfredett/code/rust-gpu-ex/target/debug/deps --cap-lints warn`
     Running `CARGO=/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/bin/cargo CARGO_CRATE_NAME=shlex CARGO_MANIFEST_DIR=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/shlex-1.3.0 CARGO_MANIFEST_PATH=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/shlex-1.3.0/Cargo.toml CARGO_PKG_AUTHORS='comex <comexk@gmail.com>:Fenhl <fenhl@fenhl.net>:Adrian Taylor <adetaylor@chromium.org>:Alex Touchet <alextouchet@outlook.com>:Daniel Parks <dp+git@oxidized.org>:Garrett Berg <googberg@gmail.com>' CARGO_PKG_DESCRIPTION='Split a string into shell words, like Python'\''s shlex.' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=shlex CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/comex/rust-shlex' CARGO_PKG_RUST_VERSION=1.46.0 CARGO_PKG_VERSION=1.3.0 CARGO_PKG_VERSION_MAJOR=1 CARGO_PKG_VERSION_MINOR=3 CARGO_PKG_VERSION_PATCH=0 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/jfredett/code/rust-gpu-ex/target/debug/deps:/nix/store/ggqfrwgzpr3v3dkvh4cnmhymnvf6cqja-gcc-14-20241116-lib/lib' rustc --crate-name shlex --edition=2015 /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/shlex-1.3.0/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=3 -C embed-bitcode=no -C debug-assertions=on --cfg 'feature="default"' --cfg 'feature="std"' --check-cfg 'cfg(docsrs)' --check-cfg 'cfg(feature, values("default", "std"))' -C metadata=43fa7c4abdebf70b -C extra-filename=-43fa7c4abdebf70b --out-dir /home/jfredett/code/rust-gpu-ex/target/debug/deps -L dependency=/home/jfredett/code/rust-gpu-ex/target/debug/deps --cap-lints warn`
     Running `CARGO=/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/bin/cargo CARGO_CRATE_NAME=version_check CARGO_MANIFEST_DIR=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5 CARGO_MANIFEST_PATH=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/Cargo.toml CARGO_PKG_AUTHORS='Sergio Benitez <sb@sergio.bz>' CARGO_PKG_DESCRIPTION='Tiny crate to check the version of the installed/running rustc.' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE=MIT/Apache-2.0 CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=version_check CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/SergioBenitez/version_check' CARGO_PKG_RUST_VERSION='' CARGO_PKG_VERSION=0.9.5 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=9 CARGO_PKG_VERSION_PATCH=5 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/jfredett/code/rust-gpu-ex/target/debug/deps:/nix/store/ggqfrwgzpr3v3dkvh4cnmhymnvf6cqja-gcc-14-20241116-lib/lib' rustc --crate-name version_check --edition=2015 /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=3 -C embed-bitcode=no -C debug-assertions=on --check-cfg 'cfg(docsrs)' --check-cfg 'cfg(feature, values())' -C metadata=b5b2fb4bb4bf2bf5 -C extra-filename=-b5b2fb4bb4bf2bf5 --out-dir /home/jfredett/code/rust-gpu-ex/target/debug/deps -L dependency=/home/jfredett/code/rust-gpu-ex/target/debug/deps --cap-lints warn`
     Running `CARGO=/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/bin/cargo CARGO_CRATE_NAME=build_script_build CARGO_MANIFEST_DIR=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/wasmparser-0.222.1 CARGO_MANIFEST_PATH=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/wasmparser-0.222.1/Cargo.toml CARGO_PKG_AUTHORS='Yury Delendik <ydelendik@mozilla.com>' CARGO_PKG_DESCRIPTION='A simple event-driven library for parsing WebAssembly binary files.
' CARGO_PKG_HOMEPAGE='https://github.com/bytecodealliance/wasm-tools/tree/main/crates/wasmparser' CARGO_PKG_LICENSE='Apache-2.0 WITH LLVM-exception OR Apache-2.0 OR MIT' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=wasmparser CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/bytecodealliance/wasm-tools/tree/main/crates/wasmparser' CARGO_PKG_RUST_VERSION=1.76.0 CARGO_PKG_VERSION=0.222.1 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=222 CARGO_PKG_VERSION_PATCH=1 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/jfredett/code/rust-gpu-ex/target/debug/deps:/nix/store/ggqfrwgzpr3v3dkvh4cnmhymnvf6cqja-gcc-14-20241116-lib/lib' rustc --crate-name build_script_build --edition=2021 /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/wasmparser-0.222.1/build.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type bin --emit=dep-info,link -C opt-level=3 -C embed-bitcode=no '--allow=clippy::all' --deny=unsafe_code '--warn=clippy::unnecessary_to_owned' '--warn=clippy::map_clone' '--warn=clippy::manual_strip' '--warn=clippy::clone_on_copy' -C debug-assertions=on --check-cfg 'cfg(docsrs)' --check-cfg 'cfg(feature, values("component-model", "default", "features", "hash-collections", "prefer-btree-collections", "serde", "simd", "std", "validate"))' -C metadata=a7fc5df8e6abc2de -C extra-filename=-a7fc5df8e6abc2de --out-dir /home/jfredett/code/rust-gpu-ex/target/debug/build/wasmparser-a7fc5df8e6abc2de -L dependency=/home/jfredett/code/rust-gpu-ex/target/debug/deps --cap-lints warn`
     Running `CARGO=/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/bin/cargo CARGO_CRATE_NAME=regex_syntax CARGO_MANIFEST_DIR=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/regex-syntax-0.6.29 CARGO_MANIFEST_PATH=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/regex-syntax-0.6.29/Cargo.toml CARGO_PKG_AUTHORS='The Rust Project Developers' CARGO_PKG_DESCRIPTION='A regular expression parser.' CARGO_PKG_HOMEPAGE='https://github.com/rust-lang/regex' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=regex-syntax CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/rust-lang/regex' CARGO_PKG_RUST_VERSION='' CARGO_PKG_VERSION=0.6.29 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=6 CARGO_PKG_VERSION_PATCH=29 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/jfredett/code/rust-gpu-ex/target/debug/deps:/nix/store/ggqfrwgzpr3v3dkvh4cnmhymnvf6cqja-gcc-14-20241116-lib/lib' rustc --crate-name regex_syntax --edition=2018 /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/regex-syntax-0.6.29/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=3 -C embed-bitcode=no -C debug-assertions=on --cfg 'feature="default"' --cfg 'feature="unicode"' --cfg 'feature="unicode-age"' --cfg 'feature="unicode-bool"' --cfg 'feature="unicode-case"' --cfg 'feature="unicode-gencat"' --cfg 'feature="unicode-perl"' --cfg 'feature="unicode-script"' --cfg 'feature="unicode-segment"' --check-cfg 'cfg(docsrs)' --check-cfg 'cfg(feature, values("default", "unicode", "unicode-age", "unicode-bool", "unicode-case", "unicode-gencat", "unicode-perl", "unicode-script", "unicode-segment"))' -C metadata=260bc7e701b2ef60 -C extra-filename=-260bc7e701b2ef60 --out-dir /home/jfredett/code/rust-gpu-ex/target/debug/deps -L dependency=/home/jfredett/code/rust-gpu-ex/target/debug/deps --cap-lints warn`
     Running `CARGO=/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/bin/cargo CARGO_CRATE_NAME=adler2 CARGO_MANIFEST_DIR=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/adler2-2.0.0 CARGO_MANIFEST_PATH=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/adler2-2.0.0/Cargo.toml CARGO_PKG_AUTHORS='Jonas Schievink <jonasschievink@gmail.com>:oyvindln <oyvindln@users.noreply.github.com>' CARGO_PKG_DESCRIPTION='A simple clean-room implementation of the Adler-32 checksum' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='0BSD OR MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=adler2 CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/oyvindln/adler2' CARGO_PKG_RUST_VERSION='' CARGO_PKG_VERSION=2.0.0 CARGO_PKG_VERSION_MAJOR=2 CARGO_PKG_VERSION_MINOR=0 CARGO_PKG_VERSION_PATCH=0 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/jfredett/code/rust-gpu-ex/target/debug/deps:/nix/store/ggqfrwgzpr3v3dkvh4cnmhymnvf6cqja-gcc-14-20241116-lib/lib' rustc --crate-name adler2 --edition=2021 /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/adler2-2.0.0/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=3 -C embed-bitcode=no -C debug-assertions=on --check-cfg 'cfg(docsrs)' --check-cfg 'cfg(feature, values("compiler_builtins", "core", "default", "rustc-dep-of-std", "std"))' -C metadata=ea03a0674b222bda -C extra-filename=-ea03a0674b222bda --out-dir /home/jfredett/code/rust-gpu-ex/target/debug/deps -L dependency=/home/jfredett/code/rust-gpu-ex/target/debug/deps --cap-lints warn`
   Compiling zerocopy v0.7.35
   Compiling crossbeam-utils v0.8.21
     Running `CARGO=/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/bin/cargo CARGO_CRATE_NAME=static_assertions CARGO_MANIFEST_DIR=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/static_assertions-1.1.0 CARGO_MANIFEST_PATH=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/static_assertions-1.1.0/Cargo.toml CARGO_PKG_AUTHORS='Nikolai Vazquez' CARGO_PKG_DESCRIPTION='Compile-time assertions to ensure that invariants are met.' CARGO_PKG_HOMEPAGE='https://github.com/nvzqz/static-assertions-rs' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=static_assertions CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/nvzqz/static-assertions-rs' CARGO_PKG_RUST_VERSION='' CARGO_PKG_VERSION=1.1.0 CARGO_PKG_VERSION_MAJOR=1 CARGO_PKG_VERSION_MINOR=1 CARGO_PKG_VERSION_PATCH=0 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/jfredett/code/rust-gpu-ex/target/debug/deps:/nix/store/ggqfrwgzpr3v3dkvh4cnmhymnvf6cqja-gcc-14-20241116-lib/lib' rustc --crate-name static_assertions --edition=2015 /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/static_assertions-1.1.0/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=3 -C embed-bitcode=no -C debug-assertions=on --check-cfg 'cfg(docsrs)' --check-cfg 'cfg(feature, values("nightly"))' -C metadata=5b11c4b3937809e3 -C extra-filename=-5b11c4b3937809e3 --out-dir /home/jfredett/code/rust-gpu-ex/target/debug/deps -L dependency=/home/jfredett/code/rust-gpu-ex/target/debug/deps --cap-lints warn`
     Running `CARGO=/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/bin/cargo CARGO_CRATE_NAME=pin_project_lite CARGO_MANIFEST_DIR=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pin-project-lite-0.2.16 CARGO_MANIFEST_PATH=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pin-project-lite-0.2.16/Cargo.toml CARGO_PKG_AUTHORS='' CARGO_PKG_DESCRIPTION='A lightweight version of pin-project written with declarative macros.
' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='Apache-2.0 OR MIT' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=pin-project-lite CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/taiki-e/pin-project-lite' CARGO_PKG_RUST_VERSION=1.37 CARGO_PKG_VERSION=0.2.16 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=2 CARGO_PKG_VERSION_PATCH=16 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/jfredett/code/rust-gpu-ex/target/debug/deps:/nix/store/ggqfrwgzpr3v3dkvh4cnmhymnvf6cqja-gcc-14-20241116-lib/lib' rustc --crate-name pin_project_lite --edition=2018 /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/pin-project-lite-0.2.16/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=3 -C embed-bitcode=no --warn=unreachable_pub --warn=unexpected_cfgs '--warn=clippy::undocumented_unsafe_blocks' '--warn=clippy::transmute_undefined_repr' '--warn=clippy::trailing_empty_array' --warn=single_use_lifetimes --warn=rust_2018_idioms '--warn=clippy::pedantic' --warn=non_ascii_idents '--warn=clippy::inline_asm_x86_att_syntax' --warn=improper_ctypes_definitions --warn=improper_ctypes --warn=deprecated_safe '--warn=clippy::default_union_representation' '--warn=clippy::as_underscore' '--warn=clippy::as_ptr_cast_mut' '--warn=clippy::all' '--allow=clippy::unreadable_literal' '--allow=clippy::type_complexity' '--allow=clippy::too_many_lines' '--allow=clippy::too_many_arguments' '--allow=clippy::struct_field_names' '--allow=clippy::struct_excessive_bools' '--allow=clippy::single_match_else' '--allow=clippy::single_match' '--allow=clippy::similar_names' '--allow=clippy::range_plus_one' '--allow=clippy::nonminimal_bool' '--allow=clippy::naive_bytecount' '--allow=clippy::module_name_repetitions' '--allow=clippy::missing_errors_doc' '--allow=clippy::manual_range_contains' '--allow=clippy::manual_assert' '--allow=clippy::lint_groups_priority' '--allow=clippy::incompatible_msrv' '--allow=clippy::float_cmp' '--allow=clippy::doc_markdown' '--allow=clippy::declare_interior_mutable_const' '--allow=clippy::cast_lossless' '--allow=clippy::borrow_as_ptr' '--allow=clippy::bool_assert_comparison' -C debug-assertions=on --check-cfg 'cfg(docsrs)' --check-cfg 'cfg(feature, values())' -C metadata=c31477cdb39d829a -C extra-filename=-c31477cdb39d829a --out-dir /home/jfredett/code/rust-gpu-ex/target/debug/deps -L dependency=/home/jfredett/code/rust-gpu-ex/target/debug/deps --cap-lints warn`
     Running `CARGO=/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/bin/cargo CARGO_CRATE_NAME=zerocopy CARGO_MANIFEST_DIR=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/zerocopy-0.7.35 CARGO_MANIFEST_PATH=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/zerocopy-0.7.35/Cargo.toml CARGO_PKG_AUTHORS='Joshua Liebow-Feeser <joshlf@google.com>' CARGO_PKG_DESCRIPTION='Utilities for zero-copy parsing and serialization' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='BSD-2-Clause OR Apache-2.0 OR MIT' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=zerocopy CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/google/zerocopy' CARGO_PKG_RUST_VERSION=1.60.0 CARGO_PKG_VERSION=0.7.35 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=7 CARGO_PKG_VERSION_PATCH=35 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/jfredett/code/rust-gpu-ex/target/debug/deps:/nix/store/ggqfrwgzpr3v3dkvh4cnmhymnvf6cqja-gcc-14-20241116-lib/lib' rustc --crate-name zerocopy --edition=2018 /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/zerocopy-0.7.35/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=3 -C embed-bitcode=no -C debug-assertions=on --cfg 'feature="simd"' --check-cfg 'cfg(docsrs)' --check-cfg 'cfg(feature, values("__internal_use_only_features_that_work_on_stable", "alloc", "byteorder", "default", "derive", "simd", "simd-nightly", "zerocopy-derive"))' -C metadata=cc4eccbba3e66362 -C extra-filename=-cc4eccbba3e66362 --out-dir /home/jfredett/code/rust-gpu-ex/target/debug/deps -L dependency=/home/jfredett/code/rust-gpu-ex/target/debug/deps --cap-lints warn`
     Running `CARGO=/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/bin/cargo CARGO_CRATE_NAME=build_script_build CARGO_MANIFEST_DIR=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/crossbeam-utils-0.8.21 CARGO_MANIFEST_PATH=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/crossbeam-utils-0.8.21/Cargo.toml CARGO_PKG_AUTHORS='' CARGO_PKG_DESCRIPTION='Utilities for concurrent programming' CARGO_PKG_HOMEPAGE='https://github.com/crossbeam-rs/crossbeam/tree/master/crossbeam-utils' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=crossbeam-utils CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/crossbeam-rs/crossbeam' CARGO_PKG_RUST_VERSION=1.60 CARGO_PKG_VERSION=0.8.21 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=8 CARGO_PKG_VERSION_PATCH=21 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/jfredett/code/rust-gpu-ex/target/debug/deps:/nix/store/ggqfrwgzpr3v3dkvh4cnmhymnvf6cqja-gcc-14-20241116-lib/lib' rustc --crate-name build_script_build --edition=2021 /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/crossbeam-utils-0.8.21/build.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type bin --emit=dep-info,link -C opt-level=3 -C embed-bitcode=no --warn=unexpected_cfgs '--allow=clippy::lint_groups_priority' '--allow=clippy::declare_interior_mutable_const' --check-cfg 'cfg(crossbeam_loom)' --check-cfg 'cfg(crossbeam_sanitize)' -C debug-assertions=on --cfg 'feature="default"' --cfg 'feature="std"' --check-cfg 'cfg(docsrs)' --check-cfg 'cfg(feature, values("default", "loom", "nightly", "std"))' -C metadata=9bc66616b262d4c7 -C extra-filename=-9bc66616b262d4c7 --out-dir /home/jfredett/code/rust-gpu-ex/target/debug/build/crossbeam-utils-9bc66616b262d4c7 -L dependency=/home/jfredett/code/rust-gpu-ex/target/debug/deps --cap-lints warn`
   Compiling crc32fast v1.4.2
     Running `CARGO=/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/bin/cargo CARGO_CRATE_NAME=crc32fast CARGO_MANIFEST_DIR=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/crc32fast-1.4.2 CARGO_MANIFEST_PATH=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/crc32fast-1.4.2/Cargo.toml CARGO_PKG_AUTHORS='Sam Rijs <srijs@airpost.net>:Alex Crichton <alex@alexcrichton.com>' CARGO_PKG_DESCRIPTION='Fast, SIMD-accelerated CRC32 (IEEE) checksum computation' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=crc32fast CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/srijs/rust-crc32fast' CARGO_PKG_RUST_VERSION='' CARGO_PKG_VERSION=1.4.2 CARGO_PKG_VERSION_MAJOR=1 CARGO_PKG_VERSION_MINOR=4 CARGO_PKG_VERSION_PATCH=2 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/jfredett/code/rust-gpu-ex/target/debug/deps:/nix/store/ggqfrwgzpr3v3dkvh4cnmhymnvf6cqja-gcc-14-20241116-lib/lib' rustc --crate-name crc32fast --edition=2015 /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/crc32fast-1.4.2/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=3 -C embed-bitcode=no -C debug-assertions=on --cfg 'feature="default"' --cfg 'feature="std"' --check-cfg 'cfg(docsrs)' --check-cfg 'cfg(feature, values("default", "nightly", "std"))' -C metadata=268ab493df00bf36 -C extra-filename=-268ab493df00bf36 --out-dir /home/jfredett/code/rust-gpu-ex/target/debug/deps -L dependency=/home/jfredett/code/rust-gpu-ex/target/debug/deps --extern cfg_if=/home/jfredett/code/rust-gpu-ex/target/debug/deps/libcfg_if-a56fbeab59b8aa84.rmeta --cap-lints warn`
warning: elided lifetime has a name
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lazy_static-1.5.0/src/inline_lazy.rs:26:43
   |
26 |     pub fn get<F>(&'static self, f: F) -> &T
   |                                           ^ this elided lifetime gets resolved as `'static`
   |
   = note: `#[warn(elided_named_lifetimes)]` on by default
help: consider specifying it explicitly
   |
26 |     pub fn get<F>(&'static self, f: F) -> &'static T
   |                                            +++++++

   Compiling twox-hash v1.6.3
     Running `CARGO=/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/bin/cargo CARGO_CRATE_NAME=twox_hash CARGO_MANIFEST_DIR=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/twox-hash-1.6.3 CARGO_MANIFEST_PATH=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/twox-hash-1.6.3/Cargo.toml CARGO_PKG_AUTHORS='Jake Goulding <jake.goulding@gmail.com>' CARGO_PKG_DESCRIPTION='A Rust implementation of the XXHash and XXH3 algorithms' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE=MIT CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=twox-hash CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/shepmaster/twox-hash' CARGO_PKG_RUST_VERSION='' CARGO_PKG_VERSION=1.6.3 CARGO_PKG_VERSION_MAJOR=1 CARGO_PKG_VERSION_MINOR=6 CARGO_PKG_VERSION_PATCH=3 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/jfredett/code/rust-gpu-ex/target/debug/deps:/nix/store/ggqfrwgzpr3v3dkvh4cnmhymnvf6cqja-gcc-14-20241116-lib/lib' rustc --crate-name twox_hash --edition=2018 /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/twox-hash-1.6.3/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=3 -C embed-bitcode=no -C debug-assertions=on --check-cfg 'cfg(docsrs)' --check-cfg 'cfg(feature, values("default", "digest", "digest_0_10", "digest_0_9", "rand", "serde", "serialize", "std"))' -C metadata=c5f4526405e8be57 -C extra-filename=-c5f4526405e8be57 --out-dir /home/jfredett/code/rust-gpu-ex/target/debug/deps -L dependency=/home/jfredett/code/rust-gpu-ex/target/debug/deps --extern cfg_if=/home/jfredett/code/rust-gpu-ex/target/debug/deps/libcfg_if-a56fbeab59b8aa84.rmeta --extern static_assertions=/home/jfredett/code/rust-gpu-ex/target/debug/deps/libstatic_assertions-5b11c4b3937809e3.rmeta --cap-lints warn`
warning: unexpected `cfg` condition name: `manual_codegen_check`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/shlex-1.3.0/src/bytes.rs:353:12
    |
353 | #[cfg_attr(manual_codegen_check, inline(never))]
    |            ^^^^^^^^^^^^^^^^^^^^
    |
    = help: expected names are: `clippy`, `debug_assertions`, `doc`, `docsrs`, `doctest`, `feature`, `fmt_debug`, `miri`, `overflow_checks`, `panic`, `proc_macro`, `relocation_model`, `rustfmt`, `sanitize`, `sanitizer_cfi_generalize_pointers`, `sanitizer_cfi_normalize_integers`, `target_abi`, `target_arch`, `target_endian`, `target_env`, `target_family`, `target_feature`, `target_has_atomic`, `target_has_atomic_equal_alignment`, `target_has_atomic_load_store`, `target_os`, `target_pointer_width`, `target_thread_local`, `target_vendor`, `test`, `ub_checks`, `unix`, and `windows`
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(manual_codegen_check)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(manual_codegen_check)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: `#[warn(unexpected_cfgs)]` on by default

   Compiling object v0.36.7
     Running `CARGO=/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/bin/cargo CARGO_CRATE_NAME=build_script_build CARGO_MANIFEST_DIR=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/object-0.36.7 CARGO_MANIFEST_PATH=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/object-0.36.7/Cargo.toml CARGO_PKG_AUTHORS='' CARGO_PKG_DESCRIPTION='A unified interface for reading and writing object file formats.' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='Apache-2.0 OR MIT' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=object CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/gimli-rs/object' CARGO_PKG_RUST_VERSION=1.65 CARGO_PKG_VERSION=0.36.7 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=36 CARGO_PKG_VERSION_PATCH=7 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/jfredett/code/rust-gpu-ex/target/debug/deps:/nix/store/ggqfrwgzpr3v3dkvh4cnmhymnvf6cqja-gcc-14-20241116-lib/lib' rustc --crate-name build_script_build --edition=2018 /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/object-0.36.7/build.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type bin --emit=dep-info,link -C opt-level=3 -C embed-bitcode=no -C debug-assertions=on --cfg 'feature="archive"' --cfg 'feature="coff"' --cfg 'feature="compression"' --cfg 'feature="elf"' --cfg 'feature="macho"' --cfg 'feature="pe"' --cfg 'feature="read"' --cfg 'feature="read_core"' --cfg 'feature="std"' --cfg 'feature="unaligned"' --cfg 'feature="wasm"' --cfg 'feature="write"' --cfg 'feature="write_core"' --cfg 'feature="write_std"' --cfg 'feature="xcoff"' --check-cfg 'cfg(docsrs)' --check-cfg 'cfg(feature, values("all", "alloc", "archive", "build", "build_core", "cargo-all", "coff", "compiler_builtins", "compression", "core", "default", "doc", "elf", "macho", "pe", "read", "read_core", "rustc-dep-of-std", "std", "unaligned", "unstable", "unstable-all", "wasm", "write", "write_core", "write_std", "xcoff"))' -C metadata=da86c2d0e64317f7 -C extra-filename=-da86c2d0e64317f7 --out-dir /home/jfredett/code/rust-gpu-ex/target/debug/build/object-da86c2d0e64317f7 -L dependency=/home/jfredett/code/rust-gpu-ex/target/debug/deps --cap-lints warn`
warning: `lazy_static` (lib) generated 1 warning
   Compiling miniz_oxide v0.8.4
     Running `CARGO=/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/bin/cargo CARGO_CRATE_NAME=miniz_oxide CARGO_MANIFEST_DIR=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/miniz_oxide-0.8.4 CARGO_MANIFEST_PATH=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/miniz_oxide-0.8.4/Cargo.toml CARGO_PKG_AUTHORS='Frommi <daniil.liferenko@gmail.com>:oyvindln <oyvindln@users.noreply.github.com>:Rich Geldreich richgel99@gmail.com' CARGO_PKG_DESCRIPTION='DEFLATE compression and decompression library rewritten in Rust based on miniz' CARGO_PKG_HOMEPAGE='https://github.com/Frommi/miniz_oxide/tree/master/miniz_oxide' CARGO_PKG_LICENSE='MIT OR Zlib OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=miniz_oxide CARGO_PKG_README=Readme.md CARGO_PKG_REPOSITORY='https://github.com/Frommi/miniz_oxide/tree/master/miniz_oxide' CARGO_PKG_RUST_VERSION='' CARGO_PKG_VERSION=0.8.4 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=8 CARGO_PKG_VERSION_PATCH=4 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/jfredett/code/rust-gpu-ex/target/debug/deps:/nix/store/ggqfrwgzpr3v3dkvh4cnmhymnvf6cqja-gcc-14-20241116-lib/lib' rustc --crate-name miniz_oxide --edition=2021 /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/miniz_oxide-0.8.4/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=3 -C embed-bitcode=no --warn=unexpected_cfgs --check-cfg 'cfg(fuzzing)' -C debug-assertions=on --cfg 'feature="with-alloc"' --check-cfg 'cfg(docsrs)' --check-cfg 'cfg(feature, values("alloc", "compiler_builtins", "core", "default", "rustc-dep-of-std", "simd", "simd-adler32", "std", "with-alloc"))' -C metadata=ba9a75ca4182d7ef -C extra-filename=-ba9a75ca4182d7ef --out-dir /home/jfredett/code/rust-gpu-ex/target/debug/deps -L dependency=/home/jfredett/code/rust-gpu-ex/target/debug/deps --extern adler2=/home/jfredett/code/rust-gpu-ex/target/debug/deps/libadler2-ea03a0674b222bda.rmeta --cap-lints warn`
   Compiling overload v0.1.1
     Running `CARGO=/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/bin/cargo CARGO_CRATE_NAME=overload CARGO_MANIFEST_DIR=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/overload-0.1.1 CARGO_MANIFEST_PATH=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/overload-0.1.1/Cargo.toml CARGO_PKG_AUTHORS='Daniel Salvadori <danaugrs@gmail.com>' CARGO_PKG_DESCRIPTION='Provides a macro to simplify operator overloading.' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE=MIT CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=overload CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/danaugrs/overload' CARGO_PKG_RUST_VERSION='' CARGO_PKG_VERSION=0.1.1 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=1 CARGO_PKG_VERSION_PATCH=1 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/jfredett/code/rust-gpu-ex/target/debug/deps:/nix/store/ggqfrwgzpr3v3dkvh4cnmhymnvf6cqja-gcc-14-20241116-lib/lib' rustc --crate-name overload --edition=2018 /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/overload-0.1.1/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=3 -C embed-bitcode=no -C debug-assertions=on --check-cfg 'cfg(docsrs)' --check-cfg 'cfg(feature, values())' -C metadata=edbb7f09dcf73e9b -C extra-filename=-edbb7f09dcf73e9b --out-dir /home/jfredett/code/rust-gpu-ex/target/debug/deps -L dependency=/home/jfredett/code/rust-gpu-ex/target/debug/deps --cap-lints warn`
   Compiling rustc-hash v1.1.0
     Running `CARGO=/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/bin/cargo CARGO_CRATE_NAME=rustc_hash CARGO_MANIFEST_DIR=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rustc-hash-1.1.0 CARGO_MANIFEST_PATH=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rustc-hash-1.1.0/Cargo.toml CARGO_PKG_AUTHORS='The Rust Project Developers' CARGO_PKG_DESCRIPTION='speed, non-cryptographic hash used in rustc' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE=Apache-2.0/MIT CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=rustc-hash CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/rust-lang-nursery/rustc-hash' CARGO_PKG_RUST_VERSION='' CARGO_PKG_VERSION=1.1.0 CARGO_PKG_VERSION_MAJOR=1 CARGO_PKG_VERSION_MINOR=1 CARGO_PKG_VERSION_PATCH=0 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/jfredett/code/rust-gpu-ex/target/debug/deps:/nix/store/ggqfrwgzpr3v3dkvh4cnmhymnvf6cqja-gcc-14-20241116-lib/lib' rustc --crate-name rustc_hash --edition=2015 /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rustc-hash-1.1.0/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=3 -C embed-bitcode=no -C debug-assertions=on --cfg 'feature="default"' --cfg 'feature="std"' --check-cfg 'cfg(docsrs)' --check-cfg 'cfg(feature, values("default", "std"))' -C metadata=a39a34f805bd6bd5 -C extra-filename=-a39a34f805bd6bd5 --out-dir /home/jfredett/code/rust-gpu-ex/target/debug/deps -L dependency=/home/jfredett/code/rust-gpu-ex/target/debug/deps --cap-lints warn`
   Compiling hashbrown v0.15.2
     Running `CARGO=/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/bin/cargo CARGO_CRATE_NAME=hashbrown CARGO_MANIFEST_DIR=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.2 CARGO_MANIFEST_PATH=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.2/Cargo.toml CARGO_PKG_AUTHORS='Amanieu d'\''Antras <amanieu@gmail.com>' CARGO_PKG_DESCRIPTION='A Rust port of Google'\''s SwissTable hash map' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=hashbrown CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/rust-lang/hashbrown' CARGO_PKG_RUST_VERSION=1.65.0 CARGO_PKG_VERSION=0.15.2 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=15 CARGO_PKG_VERSION_PATCH=2 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/jfredett/code/rust-gpu-ex/target/debug/deps:/nix/store/ggqfrwgzpr3v3dkvh4cnmhymnvf6cqja-gcc-14-20241116-lib/lib' rustc --crate-name hashbrown --edition=2021 /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.15.2/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=3 -C embed-bitcode=no -C debug-assertions=on --cfg 'feature="default-hasher"' --check-cfg 'cfg(docsrs)' --check-cfg 'cfg(feature, values("alloc", "allocator-api2", "compiler_builtins", "core", "default", "default-hasher", "equivalent", "inline-more", "nightly", "raw-entry", "rayon", "rustc-dep-of-std", "rustc-internal-api", "serde"))' -C metadata=ee9301b93923918e -C extra-filename=-ee9301b93923918e --out-dir /home/jfredett/code/rust-gpu-ex/target/debug/deps -L dependency=/home/jfredett/code/rust-gpu-ex/target/debug/deps --extern foldhash=/home/jfredett/code/rust-gpu-ex/target/debug/deps/libfoldhash-5ef2920864c53069.rmeta --cap-lints warn`
   Compiling log v0.4.25
     Running `CARGO=/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/bin/cargo CARGO_CRATE_NAME=log CARGO_MANIFEST_DIR=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.25 CARGO_MANIFEST_PATH=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.25/Cargo.toml CARGO_PKG_AUTHORS='The Rust Project Developers' CARGO_PKG_DESCRIPTION='A lightweight logging facade for Rust
' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=log CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/rust-lang/log' CARGO_PKG_RUST_VERSION=1.60.0 CARGO_PKG_VERSION=0.4.25 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=4 CARGO_PKG_VERSION_PATCH=25 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/jfredett/code/rust-gpu-ex/target/debug/deps:/nix/store/ggqfrwgzpr3v3dkvh4cnmhymnvf6cqja-gcc-14-20241116-lib/lib' rustc --crate-name log --edition=2021 /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/log-0.4.25/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=3 -C embed-bitcode=no -C debug-assertions=on --cfg 'feature="std"' --check-cfg 'cfg(docsrs)' --check-cfg 'cfg(feature, values("kv", "kv_serde", "kv_std", "kv_sval", "kv_unstable", "kv_unstable_serde", "kv_unstable_std", "kv_unstable_sval", "max_level_debug", "max_level_error", "max_level_info", "max_level_off", "max_level_trace", "max_level_warn", "release_max_level_debug", "release_max_level_error", "release_max_level_info", "release_max_level_off", "release_max_level_trace", "release_max_level_warn", "serde", "std", "sval", "sval_ref", "value-bag"))' -C metadata=31208c80599e6ff7 -C extra-filename=-31208c80599e6ff7 --out-dir /home/jfredett/code/rust-gpu-ex/target/debug/deps -L dependency=/home/jfredett/code/rust-gpu-ex/target/debug/deps --cap-lints warn`
   Compiling nu-ansi-term v0.46.0
     Running `CARGO=/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/bin/cargo CARGO_CRATE_NAME=nu_ansi_term CARGO_MANIFEST_DIR=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nu-ansi-term-0.46.0 CARGO_MANIFEST_PATH=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nu-ansi-term-0.46.0/Cargo.toml CARGO_PKG_AUTHORS='ogham@bsago.me:Ryan Scheel (Havvy) <ryan.havvy@gmail.com>:Josh Triplett <josh@joshtriplett.org>:The Nushell Project Developers' CARGO_PKG_DESCRIPTION='Library for ANSI terminal colors and styles (bold, underline)' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE=MIT CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=nu-ansi-term CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/nushell/nu-ansi-term' CARGO_PKG_RUST_VERSION='' CARGO_PKG_VERSION=0.46.0 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=46 CARGO_PKG_VERSION_PATCH=0 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/jfredett/code/rust-gpu-ex/target/debug/deps:/nix/store/ggqfrwgzpr3v3dkvh4cnmhymnvf6cqja-gcc-14-20241116-lib/lib' rustc --crate-name nu_ansi_term --edition=2018 /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nu-ansi-term-0.46.0/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=3 -C embed-bitcode=no -C debug-assertions=on --check-cfg 'cfg(docsrs)' --check-cfg 'cfg(feature, values("derive_serde_style", "serde"))' -C metadata=bf2abdc8d3cd1abf -C extra-filename=-bf2abdc8d3cd1abf --out-dir /home/jfredett/code/rust-gpu-ex/target/debug/deps -L dependency=/home/jfredett/code/rust-gpu-ex/target/debug/deps --extern overload=/home/jfredett/code/rust-gpu-ex/target/debug/deps/liboverload-edbb7f09dcf73e9b.rmeta --cap-lints warn`
   Compiling sharded-slab v0.1.7
     Running `CARGO=/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/bin/cargo CARGO_CRATE_NAME=sharded_slab CARGO_MANIFEST_DIR=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7 CARGO_MANIFEST_PATH=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/Cargo.toml CARGO_PKG_AUTHORS='Eliza Weisman <eliza@buoyant.io>' CARGO_PKG_DESCRIPTION='A lock-free concurrent slab.
' CARGO_PKG_HOMEPAGE='https://github.com/hawkw/sharded-slab' CARGO_PKG_LICENSE=MIT CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=sharded-slab CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/hawkw/sharded-slab' CARGO_PKG_RUST_VERSION=1.42.0 CARGO_PKG_VERSION=0.1.7 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=1 CARGO_PKG_VERSION_PATCH=7 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/jfredett/code/rust-gpu-ex/target/debug/deps:/nix/store/ggqfrwgzpr3v3dkvh4cnmhymnvf6cqja-gcc-14-20241116-lib/lib' rustc --crate-name sharded_slab --edition=2018 /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=3 -C embed-bitcode=no -C debug-assertions=on --check-cfg 'cfg(docsrs)' --check-cfg 'cfg(feature, values("loom"))' -C metadata=e452d7a4f7a26d6f -C extra-filename=-e452d7a4f7a26d6f --out-dir /home/jfredett/code/rust-gpu-ex/target/debug/deps -L dependency=/home/jfredett/code/rust-gpu-ex/target/debug/deps --extern lazy_static=/home/jfredett/code/rust-gpu-ex/target/debug/deps/liblazy_static-958d282f6ccb92d3.rmeta --cap-lints warn`
warning: unused import: `windows::*`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nu-ansi-term-0.46.0/src/lib.rs:261:9
    |
261 | pub use windows::*;
    |         ^^^^^^^^^^
    |
    = note: `#[warn(unused_imports)]` on by default

   Compiling tracing-core v0.1.33
     Running `CARGO=/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/bin/cargo CARGO_CRATE_NAME=tracing_core CARGO_MANIFEST_DIR=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tracing-core-0.1.33 CARGO_MANIFEST_PATH=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tracing-core-0.1.33/Cargo.toml CARGO_PKG_AUTHORS='Tokio Contributors <team@tokio.rs>' CARGO_PKG_DESCRIPTION='Core primitives for application-level tracing.
' CARGO_PKG_HOMEPAGE='https://tokio.rs' CARGO_PKG_LICENSE=MIT CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=tracing-core CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/tokio-rs/tracing' CARGO_PKG_RUST_VERSION=1.63.0 CARGO_PKG_VERSION=0.1.33 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=1 CARGO_PKG_VERSION_PATCH=33 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/jfredett/code/rust-gpu-ex/target/debug/deps:/nix/store/ggqfrwgzpr3v3dkvh4cnmhymnvf6cqja-gcc-14-20241116-lib/lib' rustc --crate-name tracing_core --edition=2018 /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tracing-core-0.1.33/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=3 -C embed-bitcode=no --warn=unexpected_cfgs --check-cfg 'cfg(flaky_tests)' --check-cfg 'cfg(tracing_unstable)' -C debug-assertions=on --cfg 'feature="default"' --cfg 'feature="once_cell"' --cfg 'feature="std"' --check-cfg 'cfg(docsrs)' --check-cfg 'cfg(feature, values("default", "once_cell", "std", "valuable"))' -C metadata=d150f2d26d60a8b5 -C extra-filename=-d150f2d26d60a8b5 --out-dir /home/jfredett/code/rust-gpu-ex/target/debug/deps -L dependency=/home/jfredett/code/rust-gpu-ex/target/debug/deps --extern once_cell=/home/jfredett/code/rust-gpu-ex/target/debug/deps/libonce_cell-bd1b1fc72190860c.rmeta --cap-lints warn`
     Running `CARGO=/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/bin/cargo CARGO_CFG_FMT_DEBUG=full CARGO_CFG_OVERFLOW_CHECKS='' CARGO_CFG_PANIC=unwind CARGO_CFG_RELOCATION_MODEL=pic CARGO_CFG_TARGET_ABI='' CARGO_CFG_TARGET_ARCH=x86_64 CARGO_CFG_TARGET_ENDIAN=little CARGO_CFG_TARGET_ENV=gnu CARGO_CFG_TARGET_FAMILY=unix CARGO_CFG_TARGET_FEATURE=fxsr,sse,sse2 CARGO_CFG_TARGET_HAS_ATOMIC=16,32,64,8,ptr CARGO_CFG_TARGET_HAS_ATOMIC_EQUAL_ALIGNMENT=16,32,64,8,ptr CARGO_CFG_TARGET_HAS_ATOMIC_LOAD_STORE=16,32,64,8,ptr CARGO_CFG_TARGET_OS=linux CARGO_CFG_TARGET_POINTER_WIDTH=64 CARGO_CFG_TARGET_THREAD_LOCAL='' CARGO_CFG_TARGET_VENDOR=unknown CARGO_CFG_UB_CHECKS='' CARGO_CFG_UNIX='' CARGO_ENCODED_RUSTFLAGS='' CARGO_FEATURE_DEFAULT=1 CARGO_FEATURE_STD=1 CARGO_MANIFEST_DIR=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde_json-1.0.138 CARGO_MANIFEST_PATH=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde_json-1.0.138/Cargo.toml CARGO_PKG_AUTHORS='Erick Tryzelaar <erick.tryzelaar@gmail.com>:David Tolnay <dtolnay@gmail.com>' CARGO_PKG_DESCRIPTION='A JSON serialization file format' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=serde_json CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/serde-rs/json' CARGO_PKG_RUST_VERSION=1.56 CARGO_PKG_VERSION=1.0.138 CARGO_PKG_VERSION_MAJOR=1 CARGO_PKG_VERSION_MINOR=0 CARGO_PKG_VERSION_PATCH=138 CARGO_PKG_VERSION_PRE='' DEBUG=false HOST=x86_64-unknown-linux-gnu LD_LIBRARY_PATH='/home/jfredett/code/rust-gpu-ex/target/debug/deps:/home/jfredett/code/rust-gpu-ex/target/debug:/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/lib/rustlib/x86_64-unknown-linux-gnu/lib:/nix/store/ggqfrwgzpr3v3dkvh4cnmhymnvf6cqja-gcc-14-20241116-lib/lib' NUM_JOBS=24 OPT_LEVEL=3 OUT_DIR=/home/jfredett/code/rust-gpu-ex/target/debug/build/serde_json-dbbef9810b8c596d/out PROFILE=debug RUSTC=rustc RUSTDOC=rustdoc TARGET=x86_64-unknown-linux-gnu /home/jfredett/code/rust-gpu-ex/target/debug/build/serde_json-54983b4a18fa8eb4/build-script-build`
[serde_json 1.0.138] cargo:rerun-if-changed=build.rs
[serde_json 1.0.138] cargo:rustc-check-cfg=cfg(fast_arithmetic, values("32", "64"))
[serde_json 1.0.138] cargo:rustc-cfg=fast_arithmetic="64"
   Compiling thread_local v1.1.8
     Running `CARGO=/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/bin/cargo CARGO_CRATE_NAME=thread_local CARGO_MANIFEST_DIR=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/thread_local-1.1.8 CARGO_MANIFEST_PATH=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/thread_local-1.1.8/Cargo.toml CARGO_PKG_AUTHORS='Amanieu d'\''Antras <amanieu@gmail.com>' CARGO_PKG_DESCRIPTION='Per-object thread-local storage' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=thread_local CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/Amanieu/thread_local-rs' CARGO_PKG_RUST_VERSION=1.59 CARGO_PKG_VERSION=1.1.8 CARGO_PKG_VERSION_MAJOR=1 CARGO_PKG_VERSION_MINOR=1 CARGO_PKG_VERSION_PATCH=8 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/jfredett/code/rust-gpu-ex/target/debug/deps:/nix/store/ggqfrwgzpr3v3dkvh4cnmhymnvf6cqja-gcc-14-20241116-lib/lib' rustc --crate-name thread_local --edition=2021 /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/thread_local-1.1.8/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=3 -C embed-bitcode=no -C debug-assertions=on --check-cfg 'cfg(docsrs)' --check-cfg 'cfg(feature, values("nightly"))' -C metadata=5467fcd03fc763ae -C extra-filename=-5467fcd03fc763ae --out-dir /home/jfredett/code/rust-gpu-ex/target/debug/deps -L dependency=/home/jfredett/code/rust-gpu-ex/target/debug/deps --extern cfg_if=/home/jfredett/code/rust-gpu-ex/target/debug/deps/libcfg_if-a56fbeab59b8aa84.rmeta --extern once_cell=/home/jfredett/code/rust-gpu-ex/target/debug/deps/libonce_cell-bd1b1fc72190860c.rmeta --cap-lints warn`
   Compiling spirv v0.3.0+sdk-1.3.268.0
warning: unexpected `cfg` condition name: `loom`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/macros.rs:15:17
   |
15 | #[cfg(all(test, loom))]
   |                 ^^^^ help: found config with similar value: `feature = "loom"`
   |
   = help: expected names are: `clippy`, `debug_assertions`, `doc`, `docsrs`, `doctest`, `feature`, `fmt_debug`, `miri`, `overflow_checks`, `panic`, `proc_macro`, `relocation_model`, `rustfmt`, `sanitize`, `sanitizer_cfi_generalize_pointers`, `sanitizer_cfi_normalize_integers`, `target_abi`, `target_arch`, `target_endian`, `target_env`, `target_family`, `target_feature`, `target_has_atomic`, `target_has_atomic_equal_alignment`, `target_has_atomic_load_store`, `target_os`, `target_pointer_width`, `target_thread_local`, `target_vendor`, `test`, `ub_checks`, `unix`, and `windows`
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(loom)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(loom)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: `#[warn(unexpected_cfgs)]` on by default

     Running `CARGO=/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/bin/cargo CARGO_CRATE_NAME=spirv CARGO_MANIFEST_DIR=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-0.3.0+sdk-1.3.268.0 CARGO_MANIFEST_PATH=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-0.3.0+sdk-1.3.268.0/Cargo.toml CARGO_PKG_AUTHORS='Lei Zhang <antiagainst@gmail.com>' CARGO_PKG_DESCRIPTION='Rust definition of SPIR-V structs and enums' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE=Apache-2.0 CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=spirv CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/gfx-rs/rspirv' CARGO_PKG_RUST_VERSION='' CARGO_PKG_VERSION=0.3.0+sdk-1.3.268.0 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=3 CARGO_PKG_VERSION_PATCH=0 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/jfredett/code/rust-gpu-ex/target/debug/deps:/nix/store/ggqfrwgzpr3v3dkvh4cnmhymnvf6cqja-gcc-14-20241116-lib/lib' rustc --crate-name spirv --edition=2018 /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-0.3.0+sdk-1.3.268.0/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=3 -C embed-bitcode=no -C debug-assertions=on --check-cfg 'cfg(docsrs)' --check-cfg 'cfg(feature, values("deserialize", "serde", "serialize"))' -C metadata=3a869eb6f631c6fe -C extra-filename=-3a869eb6f631c6fe --out-dir /home/jfredett/code/rust-gpu-ex/target/debug/deps -L dependency=/home/jfredett/code/rust-gpu-ex/target/debug/deps --extern bitflags=/home/jfredett/code/rust-gpu-ex/target/debug/deps/libbitflags-65c57d855a941538.rmeta --cap-lints warn`
warning: unexpected `cfg` condition name: `slab_print`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |         if cfg!(test) && cfg!(slab_print) {
    |                               ^^^^^^^^^^
    |
   ::: /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/pool.rs:453:9
    |
453 |         test_println!("pool: create {:?}", tid);
    |         --------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |         if cfg!(test) && cfg!(slab_print) {
    |                               ^^^^^^^^^^
    |
   ::: /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/pool.rs:621:9
    |
621 |         test_println!("pool: create_owned {:?}", tid);
    |         --------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |         if cfg!(test) && cfg!(slab_print) {
    |                               ^^^^^^^^^^
    |
   ::: /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/pool.rs:655:9
    |
655 |         test_println!("pool: create_with");
    |         ---------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |         if cfg!(test) && cfg!(slab_print) {
    |                               ^^^^^^^^^^
    |
   ::: /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/pool.rs:678:9
    |
678 |         test_println!("pool: get{:?}; current={:?}", tid, Tid::<C>::current());
    |         ---------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |         if cfg!(test) && cfg!(slab_print) {
    |                               ^^^^^^^^^^
    |
   ::: /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/pool.rs:769:9
    |
769 |         test_println!("pool: get{:?}; current={:?}", tid, Tid::<C>::current());
    |         ---------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |         if cfg!(test) && cfg!(slab_print) {
    |                               ^^^^^^^^^^
    |
   ::: /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/pool.rs:914:9
    |
914 |         test_println!("drop Ref: try clearing data");
    |         -------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/macros.rs:3:31
     |
3    |         if cfg!(test) && cfg!(slab_print) {
     |                               ^^^^^^^^^^
     |
    ::: /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/pool.rs:1049:9
     |
1049 |         test_println!(" -> drop RefMut: try clearing data");
     |         --------------------------------------------------- in this macro invocation
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
     = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/macros.rs:3:31
     |
3    |         if cfg!(test) && cfg!(slab_print) {
     |                               ^^^^^^^^^^
     |
    ::: /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/pool.rs:1124:9
     |
1124 |         test_println!("drop OwnedRef: try clearing data");
     |         ------------------------------------------------- in this macro invocation
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
     = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/macros.rs:3:31
     |
3    |         if cfg!(test) && cfg!(slab_print) {
     |                               ^^^^^^^^^^
     |
    ::: /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/pool.rs:1135:13
     |
1135 |             test_println!("-> shard={:?}", shard_idx);
     |             ----------------------------------------- in this macro invocation
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
     = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/macros.rs:3:31
     |
3    |         if cfg!(test) && cfg!(slab_print) {
     |                               ^^^^^^^^^^
     |
    ::: /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/pool.rs:1139:17
     |
1139 |                 test_println!("-> shard={:?} does not exist! THIS IS A BUG", shard_idx);
     |                 ----------------------------------------------------------------------- in this macro invocation
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
     = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/macros.rs:3:31
     |
3    |         if cfg!(test) && cfg!(slab_print) {
     |                               ^^^^^^^^^^
     |
    ::: /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/pool.rs:1238:9
     |
1238 |         test_println!("-> shard={:?}", shard_idx);
     |         ----------------------------------------- in this macro invocation
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
     = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/macros.rs:3:31
     |
3    |         if cfg!(test) && cfg!(slab_print) {
     |                               ^^^^^^^^^^
     |
    ::: /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/pool.rs:1290:9
     |
1290 |         test_println!("drop OwnedRefMut: try clearing data");
     |         ---------------------------------------------------- in this macro invocation
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
     = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/macros.rs:3:31
     |
3    |         if cfg!(test) && cfg!(slab_print) {
     |                               ^^^^^^^^^^
     |
    ::: /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/pool.rs:1303:17
     |
1303 |                 test_println!("-> shard does not exist! THIS IS A BUG");
     |                 ------------------------------------------------------- in this macro invocation
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
     = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `loom`
 --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/sync.rs:3:11
  |
3 | #[cfg(all(loom, any(test, feature = "loom")))]
  |           ^^^^ help: found config with similar value: `feature = "loom"`
  |
  = help: consider using a Cargo feature instead
  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
           [lints.rust]
           unexpected_cfgs = { level = "warn", check-cfg = ['cfg(loom)'] }
  = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(loom)");` to the top of the `build.rs`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `loom`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/sync.rs:63:15
   |
63 | #[cfg(not(all(loom, any(feature = "loom", test))))]
   |               ^^^^ help: found config with similar value: `feature = "loom"`
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(loom)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(loom)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `loom`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/clear.rs:95:11
   |
95 | #[cfg(all(loom, test))]
   |           ^^^^ help: found config with similar value: `feature = "loom"`
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(loom)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(loom)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `slab_print`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/macros.rs:3:31
   |
3  |         if cfg!(test) && cfg!(slab_print) {
   |                               ^^^^^^^^^^
   |
  ::: /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/iter.rs:18:9
   |
18 |         test_println!("UniqueIter::next");
   |         --------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/macros.rs:3:31
   |
3  |         if cfg!(test) && cfg!(slab_print) {
   |                               ^^^^^^^^^^
   |
  ::: /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/iter.rs:20:13
   |
20 |             test_println!("-> try next slot");
   |             --------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/macros.rs:3:31
   |
3  |         if cfg!(test) && cfg!(slab_print) {
   |                               ^^^^^^^^^^
   |
  ::: /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/iter.rs:22:17
   |
22 |                 test_println!("-> found an item!");
   |                 ---------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/macros.rs:3:31
   |
3  |         if cfg!(test) && cfg!(slab_print) {
   |                               ^^^^^^^^^^
   |
  ::: /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/iter.rs:26:13
   |
26 |             test_println!("-> try next page");
   |             --------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/macros.rs:3:31
   |
3  |         if cfg!(test) && cfg!(slab_print) {
   |                               ^^^^^^^^^^
   |
  ::: /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/iter.rs:28:17
   |
28 |                 test_println!("-> found another page");
   |                 -------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/macros.rs:3:31
   |
3  |         if cfg!(test) && cfg!(slab_print) {
   |                               ^^^^^^^^^^
   |
  ::: /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/iter.rs:33:13
   |
33 |             test_println!("-> try next shard");
   |             ---------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/macros.rs:3:31
   |
3  |         if cfg!(test) && cfg!(slab_print) {
   |                               ^^^^^^^^^^
   |
  ::: /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/iter.rs:35:17
   |
35 |                 test_println!("-> found another shard");
   |                 --------------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/macros.rs:3:31
   |
3  |         if cfg!(test) && cfg!(slab_print) {
   |                               ^^^^^^^^^^
   |
  ::: /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/iter.rs:38:17
   |
38 |                 test_println!("-> all done!");
   |                 ----------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |           if cfg!(test) && cfg!(slab_print) {
    |                                 ^^^^^^^^^^
    |
   ::: /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/page/slot.rs:115:13
    |
115 | /             test_println!(
116 | |                 "-> get {:?}; current_gen={:?}; lifecycle={:#x}; state={:?}; refs={:?};",
117 | |                 gen,
118 | |                 current_gen,
...   |
121 | |                 refs,
122 | |             );
    | |_____________- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |         if cfg!(test) && cfg!(slab_print) {
    |                               ^^^^^^^^^^
    |
   ::: /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/page/slot.rs:129:17
    |
129 |                 test_println!("-> get: no longer exists!");
    |                 ------------------------------------------ in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |         if cfg!(test) && cfg!(slab_print) {
    |                               ^^^^^^^^^^
    |
   ::: /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/page/slot.rs:142:21
    |
142 |                     test_println!("-> {:?}", new_refs);
    |                     ---------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |         if cfg!(test) && cfg!(slab_print) {
    |                               ^^^^^^^^^^
    |
   ::: /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/page/slot.rs:154:21
    |
154 |                     test_println!("-> get: retrying; lifecycle={:#x};", actual);
    |                     ----------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |           if cfg!(test) && cfg!(slab_print) {
    |                                 ^^^^^^^^^^
    |
   ::: /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/page/slot.rs:175:13
    |
175 | /             test_println!(
176 | |                 "-> mark_release; gen={:?}; current_gen={:?};",
177 | |                 gen,
178 | |                 curr_gen
179 | |             );
    | |_____________- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |         if cfg!(test) && cfg!(slab_print) {
    |                               ^^^^^^^^^^
    |
   ::: /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/page/slot.rs:187:13
    |
187 |             test_println!("-> mark_release; state={:?};", state);
    |             ---------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |         if cfg!(test) && cfg!(slab_print) {
    |                               ^^^^^^^^^^
    |
   ::: /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/page/slot.rs:190:21
    |
190 |                     test_println!("--> mark_release; cannot release (already removed!)");
    |                     -------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |         if cfg!(test) && cfg!(slab_print) {
    |                               ^^^^^^^^^^
    |
   ::: /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/page/slot.rs:194:21
    |
194 |                     test_println!("--> mark_release; already marked;");
    |                     -------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |           if cfg!(test) && cfg!(slab_print) {
    |                                 ^^^^^^^^^^
    |
   ::: /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/page/slot.rs:202:13
    |
202 | /             test_println!(
203 | |                 "-> mark_release; old_lifecycle={:#x}; new_lifecycle={:#x};",
204 | |                 lifecycle,
205 | |                 new_lifecycle
206 | |             );
    | |_____________- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |         if cfg!(test) && cfg!(slab_print) {
    |                               ^^^^^^^^^^
    |
   ::: /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/page/slot.rs:216:21
    |
216 |                     test_println!("-> mark_release; retrying");
    |                     ------------------------------------------ in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |         if cfg!(test) && cfg!(slab_print) {
    |                               ^^^^^^^^^^
    |
   ::: /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/page/slot.rs:224:9
    |
224 |         test_println!("-> mark_release: marked; refs={:?};", refs);
    |         ---------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |           if cfg!(test) && cfg!(slab_print) {
    |                                 ^^^^^^^^^^
    |
   ::: /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/page/slot.rs:246:13
    |
246 | /             test_println!("-> release_with; lifecycle={:#x}; expected_gen={:?}; current_gen={:?}; next_gen={:?};",
247 | |                 lifecycle,
248 | |                 gen,
249 | |                 current_gen,
250 | |                 next_gen
251 | |             );
    | |_____________- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |         if cfg!(test) && cfg!(slab_print) {
    |                               ^^^^^^^^^^
    |
   ::: /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/page/slot.rs:258:17
    |
258 |                 test_println!("-> already removed!");
    |                 ------------------------------------ in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |         if cfg!(test) && cfg!(slab_print) {
    |                               ^^^^^^^^^^
    |
   ::: /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/page/slot.rs:275:21
    |
275 |                     test_println!("-> advanced gen; lifecycle={:#x}; refs={:?};", actual, refs);
    |                     --------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |         if cfg!(test) && cfg!(slab_print) {
    |                               ^^^^^^^^^^
    |
   ::: /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/page/slot.rs:277:25
    |
277 |                         test_println!("-> ok to remove!");
    |                         --------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |         if cfg!(test) && cfg!(slab_print) {
    |                               ^^^^^^^^^^
    |
   ::: /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/page/slot.rs:290:21
    |
290 |                     test_println!("-> refs={:?}; spin...", refs);
    |                     -------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |         if cfg!(test) && cfg!(slab_print) {
    |                               ^^^^^^^^^^
    |
   ::: /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/page/slot.rs:296:21
    |
296 |                     test_println!("-> retrying; lifecycle={:#x};", actual);
    |                     ------------------------------------------------------ in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |           if cfg!(test) && cfg!(slab_print) {
    |                                 ^^^^^^^^^^
    |
   ::: /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/page/slot.rs:316:9
    |
316 | /         test_println!(
317 | |             "-> initialize_state; state={:?}; gen={:?}; refs={:?};",
318 | |             Lifecycle::<C>::from_packed(lifecycle),
319 | |             gen,
320 | |             refs,
321 | |         );
    | |_________- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |         if cfg!(test) && cfg!(slab_print) {
    |                               ^^^^^^^^^^
    |
   ::: /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/page/slot.rs:324:13
    |
324 |             test_println!("-> initialize while referenced! cancelling");
    |             ----------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |         if cfg!(test) && cfg!(slab_print) {
    |                               ^^^^^^^^^^
    |
   ::: /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/page/slot.rs:363:9
    |
363 |         test_println!("-> inserted at {:?}", gen);
    |         ----------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |           if cfg!(test) && cfg!(slab_print) {
    |                                 ^^^^^^^^^^
    |
   ::: /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/page/slot.rs:389:17
    |
389 | /                 test_println!(
390 | |                     "-> try_remove_value; nothing exists at generation={:?}",
391 | |                     gen
392 | |                 );
    | |_________________- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |         if cfg!(test) && cfg!(slab_print) {
    |                               ^^^^^^^^^^
    |
   ::: /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/page/slot.rs:397:9
    |
397 |         test_println!("-> try_remove_value; marked!");
    |         --------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |         if cfg!(test) && cfg!(slab_print) {
    |                               ^^^^^^^^^^
    |
   ::: /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/page/slot.rs:401:13
    |
401 |             test_println!("-> try_remove_value; can remove now");
    |             ---------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |           if cfg!(test) && cfg!(slab_print) {
    |                                 ^^^^^^^^^^
    |
   ::: /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/page/slot.rs:453:17
    |
453 | /                 test_println!(
454 | |                     "-> try_clear_storage; nothing exists at generation={:?}",
455 | |                     gen
456 | |                 );
    | |_________________- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |         if cfg!(test) && cfg!(slab_print) {
    |                               ^^^^^^^^^^
    |
   ::: /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/page/slot.rs:461:9
    |
461 |         test_println!("-> try_clear_storage; marked!");
    |         ---------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |         if cfg!(test) && cfg!(slab_print) {
    |                               ^^^^^^^^^^
    |
   ::: /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/page/slot.rs:465:13
    |
465 |             test_println!("-> try_remove_value; can clear now");
    |             --------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |         if cfg!(test) && cfg!(slab_print) {
    |                               ^^^^^^^^^^
    |
   ::: /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/page/slot.rs:485:13
    |
485 |             test_println!("-> cleared: {}", cleared);
    |             ---------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |           if cfg!(test) && cfg!(slab_print) {
    |                                 ^^^^^^^^^^
    |
   ::: /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/page/slot.rs:510:13
    |
510 | /             test_println!(
511 | |                 "-> drop guard: state={:?}; gen={:?}; refs={:?}; lifecycle={:#x}; new_lifecycle={:#x}; dropping={:?}",
512 | |                 state,
513 | |                 gen,
...   |
517 | |                 dropping
518 | |             );
    | |_____________- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |         if cfg!(test) && cfg!(slab_print) {
    |                               ^^^^^^^^^^
    |
   ::: /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/page/slot.rs:526:21
    |
526 |                     test_println!("-> drop guard: done;  dropping={:?}", dropping);
    |                     -------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |         if cfg!(test) && cfg!(slab_print) {
    |                               ^^^^^^^^^^
    |
   ::: /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/page/slot.rs:530:21
    |
530 |                     test_println!("-> drop guard; retry, actual={:#x}", actual);
    |                     ----------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |         if cfg!(test) && cfg!(slab_print) {
    |                               ^^^^^^^^^^
    |
   ::: /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/page/slot.rs:710:13
    |
710 |             test_println!("-> get: {}; MAX={}", self.value, RefCount::<C>::MAX);
    |             ------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |           if cfg!(test) && cfg!(slab_print) {
    |                                 ^^^^^^^^^^
    |
   ::: /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/page/slot.rs:830:9
    |
830 | /         test_println!(
831 | |             "InitGuard::release; curr_lifecycle={:?}; downgrading={}",
832 | |             Lifecycle::<C>::from_packed(self.curr_lifecycle),
833 | |             new_refs != 0,
834 | |         );
    | |_________- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |         if cfg!(test) && cfg!(slab_print) {
    |                               ^^^^^^^^^^
    |
   ::: /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/page/slot.rs:836:13
    |
836 |             test_println!("-> already released!");
    |             ------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |         if cfg!(test) && cfg!(slab_print) {
    |                               ^^^^^^^^^^
    |
   ::: /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/page/slot.rs:852:17
    |
852 |                 test_println!("--> advanced to PRESENT; done");
    |                 ---------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |           if cfg!(test) && cfg!(slab_print) {
    |                                 ^^^^^^^^^^
    |
   ::: /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/page/slot.rs:856:17
    |
856 | /                 test_println!(
857 | |                     "--> lifecycle changed; actual={:?}",
858 | |                     Lifecycle::<C>::from_packed(actual)
859 | |                 );
    | |_________________- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |           if cfg!(test) && cfg!(slab_print) {
    |                                 ^^^^^^^^^^
    |
   ::: /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/page/slot.rs:870:13
    |
870 | /             test_println!(
871 | |                 "-> InitGuard::release; lifecycle={:#x}; state={:?}; refs={:?};",
872 | |                 curr_lifecycle,
873 | |                 state,
874 | |                 refs,
875 | |             );
    | |_____________- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |         if cfg!(test) && cfg!(slab_print) {
    |                               ^^^^^^^^^^
    |
   ::: /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/page/slot.rs:889:21
    |
889 |                     test_println!("-> InitGuard::RELEASE: done!");
    |                     --------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |         if cfg!(test) && cfg!(slab_print) {
    |                               ^^^^^^^^^^
    |
   ::: /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/page/slot.rs:894:21
    |
894 |                     test_println!("-> InitGuard::release; retry, actual={:#x}", actual);
    |                     ------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `loom`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/page/stack.rs:72:11
   |
72 | #[cfg(all(loom, test))]
   |           ^^^^ help: found config with similar value: `feature = "loom"`
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(loom)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(loom)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `slab_print`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/macros.rs:3:31
   |
3  |         if cfg!(test) && cfg!(slab_print) {
   |                               ^^^^^^^^^^
   |
  ::: /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/page/stack.rs:20:9
   |
20 |         test_println!("-> pop {:#x}", val);
   |         ---------------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/macros.rs:3:31
   |
3  |         if cfg!(test) && cfg!(slab_print) {
   |                               ^^^^^^^^^^
   |
  ::: /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/page/stack.rs:34:13
   |
34 |             test_println!("-> next {:#x}", next);
   |             ------------------------------------ in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/macros.rs:3:31
   |
3  |         if cfg!(test) && cfg!(slab_print) {
   |                               ^^^^^^^^^^
   |
  ::: /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/page/stack.rs:43:21
   |
43 |                     test_println!("-> retry!");
   |                     -------------------------- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/macros.rs:3:31
   |
3  |         if cfg!(test) && cfg!(slab_print) {
   |                               ^^^^^^^^^^
   |
  ::: /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/page/stack.rs:47:21
   |
47 |                     test_println!("-> successful; next={:#x}", next);
   |                     ------------------------------------------------ in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |         if cfg!(test) && cfg!(slab_print) {
    |                               ^^^^^^^^^^
    |
   ::: /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/page/mod.rs:146:9
    |
146 |         test_println!("-> local head {:?}", head);
    |         ----------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |         if cfg!(test) && cfg!(slab_print) {
    |                               ^^^^^^^^^^
    |
   ::: /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/page/mod.rs:156:13
    |
156 |             test_println!("-> remote head {:?}", head);
    |             ------------------------------------------ in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |         if cfg!(test) && cfg!(slab_print) {
    |                               ^^^^^^^^^^
    |
   ::: /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/page/mod.rs:163:13
    |
163 |             test_println!("-> NULL! {:?}", head);
    |             ------------------------------------ in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |         if cfg!(test) && cfg!(slab_print) {
    |                               ^^^^^^^^^^
    |
   ::: /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/page/mod.rs:185:9
    |
185 |         test_println!("-> offset {:?}", poff);
    |         ------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |         if cfg!(test) && cfg!(slab_print) {
    |                               ^^^^^^^^^^
    |
   ::: /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/page/mod.rs:214:9
    |
214 |         test_println!("-> take: offset {:?}", offset);
    |         --------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |         if cfg!(test) && cfg!(slab_print) {
    |                               ^^^^^^^^^^
    |
   ::: /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/page/mod.rs:231:9
    |
231 |         test_println!("-> offset {:?}", offset);
    |         --------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |         if cfg!(test) && cfg!(slab_print) {
    |                               ^^^^^^^^^^
    |
   ::: /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/page/mod.rs:287:9
    |
287 |         test_println!("-> init_with: insert at offset: {}", index);
    |         ---------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |         if cfg!(test) && cfg!(slab_print) {
    |                               ^^^^^^^^^^
    |
   ::: /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/page/mod.rs:294:9
    |
294 |         test_println!("-> alloc new page ({})", self.size);
    |         -------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |         if cfg!(test) && cfg!(slab_print) {
    |                               ^^^^^^^^^^
    |
   ::: /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/page/mod.rs:318:9
    |
318 |         test_println!("-> offset {:?}", offset);
    |         --------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |         if cfg!(test) && cfg!(slab_print) {
    |                               ^^^^^^^^^^
    |
   ::: /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/page/mod.rs:338:9
    |
338 |         test_println!("-> offset {:?}", offset);
    |         --------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/macros.rs:3:31
   |
3  |         if cfg!(test) && cfg!(slab_print) {
   |                               ^^^^^^^^^^
   |
  ::: /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/shard.rs:79:9
   |
79 |         test_println!("-> {:?}", addr);
   |         ------------------------------ in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |         if cfg!(test) && cfg!(slab_print) {
    |                               ^^^^^^^^^^
    |
   ::: /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/shard.rs:111:9
    |
111 |         test_println!("-> remove_local {:?}", addr);
    |         ------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |         if cfg!(test) && cfg!(slab_print) {
    |                               ^^^^^^^^^^
    |
   ::: /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/shard.rs:125:9
    |
125 |         test_println!("-> take_remote {:?}; page {:?}", addr, page_index);
    |         ----------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |         if cfg!(test) && cfg!(slab_print) {
    |                               ^^^^^^^^^^
    |
   ::: /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/shard.rs:172:13
    |
172 |             test_println!("-> page {}; {:?}; {:?}", page_idx, local, page);
    |             -------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |           if cfg!(test) && cfg!(slab_print) {
    |                                 ^^^^^^^^^^
    |
   ::: /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/shard.rs:208:9
    |
208 | /         test_println!(
209 | |             "-> clear_after_release; self.tid={:?}; current.tid={:?};",
210 | |             tid,
211 | |             self.tid
212 | |         );
    | |_________- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |         if cfg!(test) && cfg!(slab_print) {
    |                               ^^^^^^^^^^
    |
   ::: /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/shard.rs:286:9
    |
286 |         test_println!("-> get shard={}", idx);
    |         ------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |         if cfg!(test) && cfg!(slab_print) {
    |                               ^^^^^^^^^^
    |
   ::: /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/shard.rs:293:9
    |
293 |         test_println!("current: {:?}", tid);
    |         ----------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |         if cfg!(test) && cfg!(slab_print) {
    |                               ^^^^^^^^^^
    |
   ::: /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/shard.rs:306:13
    |
306 |             test_println!("-> allocated new shard for index {} at {:p}", idx, ptr);
    |             ---------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |         if cfg!(test) && cfg!(slab_print) {
    |                               ^^^^^^^^^^
    |
   ::: /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/shard.rs:315:13
    |
315 |             test_println!("-> highest index={}, prev={}", std::cmp::max(max, idx), max);
    |             --------------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |         if cfg!(test) && cfg!(slab_print) {
    |                               ^^^^^^^^^^
    |
   ::: /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/shard.rs:326:9
    |
326 |         test_println!("Array::iter_mut");
    |         -------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |         if cfg!(test) && cfg!(slab_print) {
    |                               ^^^^^^^^^^
    |
   ::: /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/shard.rs:328:9
    |
328 |         test_println!("-> highest index={}", max);
    |         ----------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |         if cfg!(test) && cfg!(slab_print) {
    |                               ^^^^^^^^^^
    |
   ::: /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/shard.rs:381:9
    |
381 |         test_println!("---> loaded={:p} (order={:?})", ptr, order);
    |         ---------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |         if cfg!(test) && cfg!(slab_print) {
    |                               ^^^^^^^^^^
    |
   ::: /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/shard.rs:383:13
    |
383 |             test_println!("---> null");
    |             -------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |         if cfg!(test) && cfg!(slab_print) {
    |                               ^^^^^^^^^^
    |
   ::: /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/shard.rs:418:9
    |
418 |         test_println!("IterMut::next");
    |         ------------------------------ in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |         if cfg!(test) && cfg!(slab_print) {
    |                               ^^^^^^^^^^
    |
   ::: /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/shard.rs:425:13
    |
425 |             test_println!("-> next.is_some={}", next.is_some());
    |             --------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |         if cfg!(test) && cfg!(slab_print) {
    |                               ^^^^^^^^^^
    |
   ::: /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/shard.rs:427:17
    |
427 |                 test_println!("-> done");
    |                 ------------------------ in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `loom`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/tid.rs:185:15
    |
185 | #[cfg(not(all(loom, any(feature = "loom", test))))]
    |               ^^^^ help: found config with similar value: `feature = "loom"`
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(loom)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(loom)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `loom`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/tid.rs:197:21
    |
197 | #[cfg(all(test, not(loom)))]
    |                     ^^^^ help: found config with similar value: `feature = "loom"`
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(loom)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(loom)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |         if cfg!(test) && cfg!(slab_print) {
    |                               ^^^^^^^^^^
    |
   ::: /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/lib.rs:422:9
    |
422 |         test_println!("insert {:?}", tid);
    |         --------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |         if cfg!(test) && cfg!(slab_print) {
    |                               ^^^^^^^^^^
    |
   ::: /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/lib.rs:457:9
    |
457 |         test_println!("vacant_entry {:?}", tid);
    |         --------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |         if cfg!(test) && cfg!(slab_print) {
    |                               ^^^^^^^^^^
    |
   ::: /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/lib.rs:518:9
    |
518 |         test_println!("rm_deferred {:?}", tid);
    |         -------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |         if cfg!(test) && cfg!(slab_print) {
    |                               ^^^^^^^^^^
    |
   ::: /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/lib.rs:584:9
    |
584 |         test_println!("rm {:?}", tid);
    |         ----------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |         if cfg!(test) && cfg!(slab_print) {
    |                               ^^^^^^^^^^
    |
   ::: /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/lib.rs:611:9
    |
611 |         test_println!("get {:?}; current={:?}", tid, Tid::<C>::current());
    |         ----------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |         if cfg!(test) && cfg!(slab_print) {
    |                               ^^^^^^^^^^
    |
   ::: /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/lib.rs:709:9
    |
709 |         test_println!("get_owned {:?}; current={:?}", tid, Tid::<C>::current());
    |         ----------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |         if cfg!(test) && cfg!(slab_print) {
    |                               ^^^^^^^^^^
    |
   ::: /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/lib.rs:960:9
    |
960 |         test_println!("drop OwnedEntry: try clearing data");
    |         --------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |         if cfg!(test) && cfg!(slab_print) {
    |                               ^^^^^^^^^^
    |
   ::: /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/lib.rs:971:13
    |
971 |             test_println!("-> shard={:?}", shard_idx);
    |             ----------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `slab_print`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/macros.rs:3:31
    |
3   |         if cfg!(test) && cfg!(slab_print) {
    |                               ^^^^^^^^^^
    |
   ::: /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sharded-slab-0.1.7/src/lib.rs:975:17
    |
975 |                 test_println!("-> shard={:?} does not exist! THIS IS A BUG", shard_idx);
    |                 ----------------------------------------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(slab_print)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(slab_print)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `test_println` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: method `write_u32_le` is never used
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/twox-hash-1.6.3/src/xxh3.rs:349:8
    |
348 | trait BufMut {
    |       ------ method in this trait
349 |     fn write_u32_le(&mut self, n: u32);
    |        ^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

   Compiling rustix v0.38.44
     Running `CARGO=/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/bin/cargo CARGO_CRATE_NAME=build_script_build CARGO_MANIFEST_DIR=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rustix-0.38.44 CARGO_MANIFEST_PATH=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rustix-0.38.44/Cargo.toml CARGO_PKG_AUTHORS='Dan Gohman <dev@sunfishcode.online>:Jakub Konka <kubkon@jakubkonka.com>' CARGO_PKG_DESCRIPTION='Safe Rust bindings to POSIX/Unix/Linux/Winsock-like syscalls' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='Apache-2.0 WITH LLVM-exception OR Apache-2.0 OR MIT' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=rustix CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/bytecodealliance/rustix' CARGO_PKG_RUST_VERSION=1.63 CARGO_PKG_VERSION=0.38.44 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=38 CARGO_PKG_VERSION_PATCH=44 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/jfredett/code/rust-gpu-ex/target/debug/deps:/nix/store/ggqfrwgzpr3v3dkvh4cnmhymnvf6cqja-gcc-14-20241116-lib/lib' rustc --crate-name build_script_build --edition=2021 /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rustix-0.38.44/build.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type bin --emit=dep-info,link -C opt-level=3 -C embed-bitcode=no --warn=unexpected_cfgs --check-cfg 'cfg(alloc_c_string)' --check-cfg 'cfg(alloc_ffi)' --check-cfg 'cfg(apple)' --check-cfg 'cfg(asm_experimental_arch)' --check-cfg 'cfg(bsd)' --check-cfg 'cfg(core_c_str)' --check-cfg 'cfg(core_ffi_c)' --check-cfg 'cfg(core_intrinsics)' --check-cfg 'cfg(criterion)' --check-cfg 'cfg(document_experimental_runtime_api)' --check-cfg 'cfg(fix_y2038)' --check-cfg 'cfg(freebsdlike)' --check-cfg 'cfg(libc)' --check-cfg 'cfg(linux_kernel)' --check-cfg 'cfg(linux_like)' --check-cfg 'cfg(linux_raw)' --check-cfg 'cfg(netbsdlike)' --check-cfg 'cfg(rustc_attrs)' --check-cfg 'cfg(solarish)' --check-cfg 'cfg(staged_api)' --check-cfg 'cfg(static_assertions)' --check-cfg 'cfg(thumb_mode)' --check-cfg 'cfg(wasi)' --check-cfg 'cfg(wasi_ext)' --check-cfg 'cfg(target_arch, values("xtensa"))' -C debug-assertions=on --cfg 'feature="all-apis"' --cfg 'feature="alloc"' --cfg 'feature="default"' --cfg 'feature="event"' --cfg 'feature="fs"' --cfg 'feature="io_uring"' --cfg 'feature="itoa"' --cfg 'feature="libc-extra-traits"' --cfg 'feature="mm"' --cfg 'feature="mount"' --cfg 'feature="net"' --cfg 'feature="once_cell"' --cfg 'feature="param"' --cfg 'feature="pipe"' --cfg 'feature="process"' --cfg 'feature="procfs"' --cfg 'feature="pty"' --cfg 'feature="rand"' --cfg 'feature="runtime"' --cfg 'feature="shm"' --cfg 'feature="std"' --cfg 'feature="stdio"' --cfg 'feature="system"' --cfg 'feature="termios"' --cfg 'feature="thread"' --cfg 'feature="time"' --cfg 'feature="use-libc-auxv"' --check-cfg 'cfg(docsrs)' --check-cfg 'cfg(feature, values("all-apis", "alloc", "cc", "compiler_builtins", "core", "default", "event", "fs", "io_uring", "itoa", "libc", "libc-extra-traits", "libc_errno", "linux_4_11", "linux_latest", "mm", "mount", "net", "once_cell", "param", "pipe", "process", "procfs", "pty", "rand", "runtime", "rustc-dep-of-std", "rustc-std-workspace-alloc", "shm", "std", "stdio", "system", "termios", "thread", "time", "try_close", "use-explicitly-provided-auxv", "use-libc", "use-libc-auxv"))' -C metadata=0a131afb7c3e5ec9 -C extra-filename=-0a131afb7c3e5ec9 --out-dir /home/jfredett/code/rust-gpu-ex/target/debug/build/rustix-0a131afb7c3e5ec9 -L dependency=/home/jfredett/code/rust-gpu-ex/target/debug/deps --cap-lints warn`
warning: methods `unchecked_unwrap` and `unchecked_unwrap_none` are never used
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/thread_local-1.1.8/src/unreachable.rs:13:15
   |
11 | pub trait UncheckedOptionExt<T> {
   |           ------------------ methods in this trait
12 |     /// Get the value out of this Option without checking for None.
13 |     unsafe fn unchecked_unwrap(self) -> T;
   |               ^^^^^^^^^^^^^^^^
...
16 |     unsafe fn unchecked_unwrap_none(self);
   |               ^^^^^^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(dead_code)]` on by default

warning: method `unchecked_unwrap_err` is never used
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/thread_local-1.1.8/src/unreachable.rs:25:15
   |
20 | pub trait UncheckedResultExt<T, E> {
   |           ------------------ method in this trait
...
25 |     unsafe fn unchecked_unwrap_err(self) -> E;
   |               ^^^^^^^^^^^^^^^^^^^^

   Compiling spirt v0.4.0
     Running `CARGO=/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/bin/cargo CARGO_CRATE_NAME=build_script_build CARGO_MANIFEST_DIR=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirt-0.4.0 CARGO_MANIFEST_PATH=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirt-0.4.0/Cargo.toml CARGO_PKG_AUTHORS='SPIR-T developers:Embark <opensource@embark-studios.com>' CARGO_PKG_DESCRIPTION='Shader-focused IR to target, transform and translate from.' CARGO_PKG_HOMEPAGE='https://github.com/rust-gpu/spirt' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=spirt CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/rust-gpu/spirt/tree/0.4.0' CARGO_PKG_RUST_VERSION='' CARGO_PKG_VERSION=0.4.0 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=4 CARGO_PKG_VERSION_PATCH=0 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/jfredett/code/rust-gpu-ex/target/debug/deps:/nix/store/ggqfrwgzpr3v3dkvh4cnmhymnvf6cqja-gcc-14-20241116-lib/lib' rustc --crate-name build_script_build --edition=2021 /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirt-0.4.0/build.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type bin --emit=dep-info,link -C opt-level=3 -C embed-bitcode=no --warn=unexpected_cfgs --check-cfg 'cfg(git_main_docs)' -C debug-assertions=on --check-cfg 'cfg(docsrs)' --check-cfg 'cfg(feature, values())' -C metadata=60ed7361ec24a1c6 -C extra-filename=-60ed7361ec24a1c6 --out-dir /home/jfredett/code/rust-gpu-ex/target/debug/build/spirt-60ed7361ec24a1c6 -L dependency=/home/jfredett/code/rust-gpu-ex/target/debug/deps --cap-lints warn`
   Compiling ruzstd v0.7.3
     Running `CARGO=/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/bin/cargo CARGO_CRATE_NAME=ruzstd CARGO_MANIFEST_DIR=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ruzstd-0.7.3 CARGO_MANIFEST_PATH=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ruzstd-0.7.3/Cargo.toml CARGO_PKG_AUTHORS='Moritz Borcherding <moritz.borcherding@web.de>' CARGO_PKG_DESCRIPTION='A decoder for the zstd compression format' CARGO_PKG_HOMEPAGE='https://github.com/KillingSpark/zstd-rs' CARGO_PKG_LICENSE=MIT CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=ruzstd CARGO_PKG_README=Readme.md CARGO_PKG_REPOSITORY='https://github.com/KillingSpark/zstd-rs' CARGO_PKG_RUST_VERSION='' CARGO_PKG_VERSION=0.7.3 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=7 CARGO_PKG_VERSION_PATCH=3 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/jfredett/code/rust-gpu-ex/target/debug/deps:/nix/store/ggqfrwgzpr3v3dkvh4cnmhymnvf6cqja-gcc-14-20241116-lib/lib' rustc --crate-name ruzstd --edition=2018 /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ruzstd-0.7.3/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=3 -C embed-bitcode=no -C debug-assertions=on --cfg 'feature="default"' --cfg 'feature="hash"' --cfg 'feature="std"' --check-cfg 'cfg(docsrs)' --check-cfg 'cfg(feature, values("default", "hash", "rustc-dep-of-std", "std"))' -C metadata=d22b2d3260fd2d81 -C extra-filename=-d22b2d3260fd2d81 --out-dir /home/jfredett/code/rust-gpu-ex/target/debug/deps -L dependency=/home/jfredett/code/rust-gpu-ex/target/debug/deps --extern twox_hash=/home/jfredett/code/rust-gpu-ex/target/debug/deps/libtwox_hash-c5f4526405e8be57.rmeta --cap-lints warn`
   Compiling allocator-api2 v0.2.21
     Running `CARGO=/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/bin/cargo CARGO_CRATE_NAME=allocator_api2 CARGO_MANIFEST_DIR=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/allocator-api2-0.2.21 CARGO_MANIFEST_PATH=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/allocator-api2-0.2.21/Cargo.toml CARGO_PKG_AUTHORS='Zakarum <zaq.dev@icloud.com>' CARGO_PKG_DESCRIPTION='Mirror of Rust'\''s allocator API' CARGO_PKG_HOMEPAGE='https://github.com/zakarumych/allocator-api2' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=allocator-api2 CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/zakarumych/allocator-api2' CARGO_PKG_RUST_VERSION=1.63 CARGO_PKG_VERSION=0.2.21 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=2 CARGO_PKG_VERSION_PATCH=21 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/jfredett/code/rust-gpu-ex/target/debug/deps:/nix/store/ggqfrwgzpr3v3dkvh4cnmhymnvf6cqja-gcc-14-20241116-lib/lib' rustc --crate-name allocator_api2 --edition=2018 /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/allocator-api2-0.2.21/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=3 -C embed-bitcode=no --warn=unexpected_cfgs --check-cfg 'cfg(no_global_oom_handling)' -C debug-assertions=on --cfg 'feature="alloc"' --check-cfg 'cfg(docsrs)' --check-cfg 'cfg(feature, values("alloc", "default", "fresh-rust", "nightly", "serde", "std"))' -C metadata=361b78b353901c6d -C extra-filename=-361b78b353901c6d --out-dir /home/jfredett/code/rust-gpu-ex/target/debug/deps -L dependency=/home/jfredett/code/rust-gpu-ex/target/debug/deps --cap-lints warn`
warning: `shlex` (lib) generated 1 warning
   Compiling libm v0.2.11
     Running `CARGO=/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/bin/cargo CARGO_CRATE_NAME=build_script_build CARGO_MANIFEST_DIR=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/libm-0.2.11 CARGO_MANIFEST_PATH=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/libm-0.2.11/Cargo.toml CARGO_PKG_AUTHORS='Jorge Aparicio <jorge@japaric.io>' CARGO_PKG_DESCRIPTION='libm in pure Rust' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='MIT AND (MIT OR Apache-2.0)' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=libm CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/rust-lang/libm' CARGO_PKG_RUST_VERSION=1.63 CARGO_PKG_VERSION=0.2.11 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=2 CARGO_PKG_VERSION_PATCH=11 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/jfredett/code/rust-gpu-ex/target/debug/deps:/nix/store/ggqfrwgzpr3v3dkvh4cnmhymnvf6cqja-gcc-14-20241116-lib/lib' rustc --crate-name build_script_build --edition=2021 /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/libm-0.2.11/build.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type bin --emit=dep-info,link -C opt-level=3 -C embed-bitcode=no -C debug-assertions=on --cfg 'feature="default"' --check-cfg 'cfg(docsrs)' --check-cfg 'cfg(feature, values("default", "force-soft-floats", "unstable"))' -C metadata=53648c7b2758247a -C extra-filename=-53648c7b2758247a --out-dir /home/jfredett/code/rust-gpu-ex/target/debug/build/libm-53648c7b2758247a -L dependency=/home/jfredett/code/rust-gpu-ex/target/debug/deps --cap-lints warn`
   Compiling either v1.13.0
     Running `CARGO=/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/bin/cargo CARGO_CRATE_NAME=either CARGO_MANIFEST_DIR=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/either-1.13.0 CARGO_MANIFEST_PATH=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/either-1.13.0/Cargo.toml CARGO_PKG_AUTHORS=bluss CARGO_PKG_DESCRIPTION='The enum `Either` with variants `Left` and `Right` is a general purpose sum type with two cases.
' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=either CARGO_PKG_README=README-crates.io.md CARGO_PKG_REPOSITORY='https://github.com/rayon-rs/either' CARGO_PKG_RUST_VERSION=1.37 CARGO_PKG_VERSION=1.13.0 CARGO_PKG_VERSION_MAJOR=1 CARGO_PKG_VERSION_MINOR=13 CARGO_PKG_VERSION_PATCH=0 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/jfredett/code/rust-gpu-ex/target/debug/deps:/nix/store/ggqfrwgzpr3v3dkvh4cnmhymnvf6cqja-gcc-14-20241116-lib/lib' rustc --crate-name either --edition=2018 /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/either-1.13.0/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=3 -C embed-bitcode=no -C debug-assertions=on --cfg 'feature="default"' --cfg 'feature="use_std"' --check-cfg 'cfg(docsrs)' --check-cfg 'cfg(feature, values("default", "serde", "use_std"))' -C metadata=bede50f8b691fcc1 -C extra-filename=-bede50f8b691fcc1 --out-dir /home/jfredett/code/rust-gpu-ex/target/debug/deps -L dependency=/home/jfredett/code/rust-gpu-ex/target/debug/deps --cap-lints warn`
     Running `CARGO=/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/bin/cargo CARGO_CFG_FMT_DEBUG=full CARGO_CFG_OVERFLOW_CHECKS='' CARGO_CFG_PANIC=unwind CARGO_CFG_RELOCATION_MODEL=pic CARGO_CFG_TARGET_ABI='' CARGO_CFG_TARGET_ARCH=x86_64 CARGO_CFG_TARGET_ENDIAN=little CARGO_CFG_TARGET_ENV=gnu CARGO_CFG_TARGET_FAMILY=unix CARGO_CFG_TARGET_FEATURE=fxsr,sse,sse2 CARGO_CFG_TARGET_HAS_ATOMIC=16,32,64,8,ptr CARGO_CFG_TARGET_HAS_ATOMIC_EQUAL_ALIGNMENT=16,32,64,8,ptr CARGO_CFG_TARGET_HAS_ATOMIC_LOAD_STORE=16,32,64,8,ptr CARGO_CFG_TARGET_OS=linux CARGO_CFG_TARGET_POINTER_WIDTH=64 CARGO_CFG_TARGET_THREAD_LOCAL='' CARGO_CFG_TARGET_VENDOR=unknown CARGO_CFG_UB_CHECKS='' CARGO_CFG_UNIX='' CARGO_ENCODED_RUSTFLAGS='' CARGO_MANIFEST_DIR=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/wasmparser-0.222.1 CARGO_MANIFEST_PATH=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/wasmparser-0.222.1/Cargo.toml CARGO_PKG_AUTHORS='Yury Delendik <ydelendik@mozilla.com>' CARGO_PKG_DESCRIPTION='A simple event-driven library for parsing WebAssembly binary files.
' CARGO_PKG_HOMEPAGE='https://github.com/bytecodealliance/wasm-tools/tree/main/crates/wasmparser' CARGO_PKG_LICENSE='Apache-2.0 WITH LLVM-exception OR Apache-2.0 OR MIT' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=wasmparser CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/bytecodealliance/wasm-tools/tree/main/crates/wasmparser' CARGO_PKG_RUST_VERSION=1.76.0 CARGO_PKG_VERSION=0.222.1 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=222 CARGO_PKG_VERSION_PATCH=1 CARGO_PKG_VERSION_PRE='' DEBUG=false HOST=x86_64-unknown-linux-gnu LD_LIBRARY_PATH='/home/jfredett/code/rust-gpu-ex/target/debug/deps:/home/jfredett/code/rust-gpu-ex/target/debug:/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/lib/rustlib/x86_64-unknown-linux-gnu/lib:/nix/store/ggqfrwgzpr3v3dkvh4cnmhymnvf6cqja-gcc-14-20241116-lib/lib' NUM_JOBS=24 OPT_LEVEL=3 OUT_DIR=/home/jfredett/code/rust-gpu-ex/target/debug/build/wasmparser-4f55d41f983319e0/out PROFILE=debug RUSTC=rustc RUSTDOC=rustdoc TARGET=x86_64-unknown-linux-gnu /home/jfredett/code/rust-gpu-ex/target/debug/build/wasmparser-a7fc5df8e6abc2de/build-script-build`
[wasmparser 0.222.1] cargo:rustc-cfg=core_error
[wasmparser 0.222.1] cargo:rustc-check-cfg=cfg(core_error)
     Running `CARGO=/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/bin/cargo CARGO_CRATE_NAME=wasmparser CARGO_MANIFEST_DIR=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/wasmparser-0.222.1 CARGO_MANIFEST_PATH=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/wasmparser-0.222.1/Cargo.toml CARGO_PKG_AUTHORS='Yury Delendik <ydelendik@mozilla.com>' CARGO_PKG_DESCRIPTION='A simple event-driven library for parsing WebAssembly binary files.
' CARGO_PKG_HOMEPAGE='https://github.com/bytecodealliance/wasm-tools/tree/main/crates/wasmparser' CARGO_PKG_LICENSE='Apache-2.0 WITH LLVM-exception OR Apache-2.0 OR MIT' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=wasmparser CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/bytecodealliance/wasm-tools/tree/main/crates/wasmparser' CARGO_PKG_RUST_VERSION=1.76.0 CARGO_PKG_VERSION=0.222.1 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=222 CARGO_PKG_VERSION_PATCH=1 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/jfredett/code/rust-gpu-ex/target/debug/deps:/nix/store/ggqfrwgzpr3v3dkvh4cnmhymnvf6cqja-gcc-14-20241116-lib/lib' OUT_DIR=/home/jfredett/code/rust-gpu-ex/target/debug/build/wasmparser-4f55d41f983319e0/out rustc --crate-name wasmparser --edition=2021 /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/wasmparser-0.222.1/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=3 -C embed-bitcode=no '--allow=clippy::all' --deny=unsafe_code '--warn=clippy::unnecessary_to_owned' '--warn=clippy::map_clone' '--warn=clippy::manual_strip' '--warn=clippy::clone_on_copy' -C debug-assertions=on --check-cfg 'cfg(docsrs)' --check-cfg 'cfg(feature, values("component-model", "default", "features", "hash-collections", "prefer-btree-collections", "serde", "simd", "std", "validate"))' -C metadata=55b6640fbc75c2ae -C extra-filename=-55b6640fbc75c2ae --out-dir /home/jfredett/code/rust-gpu-ex/target/debug/deps -L dependency=/home/jfredett/code/rust-gpu-ex/target/debug/deps --extern bitflags=/home/jfredett/code/rust-gpu-ex/target/debug/deps/libbitflags-65c57d855a941538.rmeta --cap-lints warn --cfg core_error --check-cfg 'cfg(core_error)'`
     Running `CARGO=/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/bin/cargo CARGO_CFG_FMT_DEBUG=full CARGO_CFG_OVERFLOW_CHECKS='' CARGO_CFG_PANIC=unwind CARGO_CFG_RELOCATION_MODEL=pic CARGO_CFG_TARGET_ABI='' CARGO_CFG_TARGET_ARCH=x86_64 CARGO_CFG_TARGET_ENDIAN=little CARGO_CFG_TARGET_ENV=gnu CARGO_CFG_TARGET_FAMILY=unix CARGO_CFG_TARGET_FEATURE=fxsr,sse,sse2 CARGO_CFG_TARGET_HAS_ATOMIC=16,32,64,8,ptr CARGO_CFG_TARGET_HAS_ATOMIC_EQUAL_ALIGNMENT=16,32,64,8,ptr CARGO_CFG_TARGET_HAS_ATOMIC_LOAD_STORE=16,32,64,8,ptr CARGO_CFG_TARGET_OS=linux CARGO_CFG_TARGET_POINTER_WIDTH=64 CARGO_CFG_TARGET_THREAD_LOCAL='' CARGO_CFG_TARGET_VENDOR=unknown CARGO_CFG_UB_CHECKS='' CARGO_CFG_UNIX='' CARGO_ENCODED_RUSTFLAGS='' CARGO_FEATURE_DEFAULT=1 CARGO_FEATURE_STD=1 CARGO_MANIFEST_DIR=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/crossbeam-utils-0.8.21 CARGO_MANIFEST_PATH=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/crossbeam-utils-0.8.21/Cargo.toml CARGO_PKG_AUTHORS='' CARGO_PKG_DESCRIPTION='Utilities for concurrent programming' CARGO_PKG_HOMEPAGE='https://github.com/crossbeam-rs/crossbeam/tree/master/crossbeam-utils' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=crossbeam-utils CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/crossbeam-rs/crossbeam' CARGO_PKG_RUST_VERSION=1.60 CARGO_PKG_VERSION=0.8.21 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=8 CARGO_PKG_VERSION_PATCH=21 CARGO_PKG_VERSION_PRE='' DEBUG=true HOST=x86_64-unknown-linux-gnu LD_LIBRARY_PATH='/home/jfredett/code/rust-gpu-ex/target/debug/deps:/home/jfredett/code/rust-gpu-ex/target/debug:/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/lib/rustlib/x86_64-unknown-linux-gnu/lib:/nix/store/ggqfrwgzpr3v3dkvh4cnmhymnvf6cqja-gcc-14-20241116-lib/lib' NUM_JOBS=24 OPT_LEVEL=0 OUT_DIR=/home/jfredett/code/rust-gpu-ex/target/debug/build/crossbeam-utils-ba7c9cda4c3042d7/out PROFILE=debug RUSTC=rustc RUSTDOC=rustdoc TARGET=x86_64-unknown-linux-gnu /home/jfredett/code/rust-gpu-ex/target/debug/build/crossbeam-utils-9bc66616b262d4c7/build-script-build`
     Running `CARGO=/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/bin/cargo CARGO_CFG_FMT_DEBUG=full CARGO_CFG_OVERFLOW_CHECKS='' CARGO_CFG_PANIC=unwind CARGO_CFG_RELOCATION_MODEL=pic CARGO_CFG_TARGET_ABI='' CARGO_CFG_TARGET_ARCH=x86_64 CARGO_CFG_TARGET_ENDIAN=little CARGO_CFG_TARGET_ENV=gnu CARGO_CFG_TARGET_FAMILY=unix CARGO_CFG_TARGET_FEATURE=fxsr,sse,sse2 CARGO_CFG_TARGET_HAS_ATOMIC=16,32,64,8,ptr CARGO_CFG_TARGET_HAS_ATOMIC_EQUAL_ALIGNMENT=16,32,64,8,ptr CARGO_CFG_TARGET_HAS_ATOMIC_LOAD_STORE=16,32,64,8,ptr CARGO_CFG_TARGET_OS=linux CARGO_CFG_TARGET_POINTER_WIDTH=64 CARGO_CFG_TARGET_THREAD_LOCAL='' CARGO_CFG_TARGET_VENDOR=unknown CARGO_CFG_UB_CHECKS='' CARGO_CFG_UNIX='' CARGO_ENCODED_RUSTFLAGS='' CARGO_FEATURE_ARCHIVE=1 CARGO_FEATURE_COFF=1 CARGO_FEATURE_COMPRESSION=1 CARGO_FEATURE_ELF=1 CARGO_FEATURE_MACHO=1 CARGO_FEATURE_PE=1 CARGO_FEATURE_READ=1 CARGO_FEATURE_READ_CORE=1 CARGO_FEATURE_STD=1 CARGO_FEATURE_UNALIGNED=1 CARGO_FEATURE_WASM=1 CARGO_FEATURE_WRITE=1 CARGO_FEATURE_WRITE_CORE=1 CARGO_FEATURE_WRITE_STD=1 CARGO_FEATURE_XCOFF=1 CARGO_MANIFEST_DIR=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/object-0.36.7 CARGO_MANIFEST_PATH=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/object-0.36.7/Cargo.toml CARGO_PKG_AUTHORS='' CARGO_PKG_DESCRIPTION='A unified interface for reading and writing object file formats.' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='Apache-2.0 OR MIT' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=object CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/gimli-rs/object' CARGO_PKG_RUST_VERSION=1.65 CARGO_PKG_VERSION=0.36.7 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=36 CARGO_PKG_VERSION_PATCH=7 CARGO_PKG_VERSION_PRE='' DEBUG=false HOST=x86_64-unknown-linux-gnu LD_LIBRARY_PATH='/home/jfredett/code/rust-gpu-ex/target/debug/deps:/home/jfredett/code/rust-gpu-ex/target/debug:/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/lib/rustlib/x86_64-unknown-linux-gnu/lib:/nix/store/ggqfrwgzpr3v3dkvh4cnmhymnvf6cqja-gcc-14-20241116-lib/lib' NUM_JOBS=24 OPT_LEVEL=3 OUT_DIR=/home/jfredett/code/rust-gpu-ex/target/debug/build/object-62325c30f80f5d4d/out PROFILE=debug RUSTC=rustc RUSTDOC=rustdoc TARGET=x86_64-unknown-linux-gnu /home/jfredett/code/rust-gpu-ex/target/debug/build/object-da86c2d0e64317f7/build-script-build`
[crossbeam-utils 0.8.21] cargo:rerun-if-changed=no_atomic.rs
[crossbeam-utils 0.8.21] cargo:rustc-check-cfg=cfg(crossbeam_no_atomic,crossbeam_sanitize_thread)
   Compiling stable_deref_trait v1.2.0
     Running `CARGO=/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/bin/cargo CARGO_CRATE_NAME=stable_deref_trait CARGO_MANIFEST_DIR=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/stable_deref_trait-1.2.0 CARGO_MANIFEST_PATH=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/stable_deref_trait-1.2.0/Cargo.toml CARGO_PKG_AUTHORS='Robert Grosse <n210241048576@gmail.com>' CARGO_PKG_DESCRIPTION='An unsafe marker trait for types like Box and Rc that dereference to a stable address even when moved, and hence can be used with libraries such as owning_ref and rental.
' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE=MIT/Apache-2.0 CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=stable_deref_trait CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/storyyeller/stable_deref_trait' CARGO_PKG_RUST_VERSION='' CARGO_PKG_VERSION=1.2.0 CARGO_PKG_VERSION_MAJOR=1 CARGO_PKG_VERSION_MINOR=2 CARGO_PKG_VERSION_PATCH=0 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/jfredett/code/rust-gpu-ex/target/debug/deps:/nix/store/ggqfrwgzpr3v3dkvh4cnmhymnvf6cqja-gcc-14-20241116-lib/lib' rustc --crate-name stable_deref_trait --edition=2015 /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/stable_deref_trait-1.2.0/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=3 -C embed-bitcode=no -C debug-assertions=on --cfg 'feature="alloc"' --cfg 'feature="default"' --cfg 'feature="std"' --check-cfg 'cfg(docsrs)' --check-cfg 'cfg(feature, values("alloc", "default", "std"))' -C metadata=3b95324c85585982 -C extra-filename=-3b95324c85585982 --out-dir /home/jfredett/code/rust-gpu-ex/target/debug/deps -L dependency=/home/jfredett/code/rust-gpu-ex/target/debug/deps --cap-lints warn`
[object 0.36.7] cargo:rustc-cfg=core_error
[object 0.36.7] cargo:rustc-check-cfg=cfg(core_error)
   Compiling convert_case v0.4.0
     Running `CARGO=/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/bin/cargo CARGO_CRATE_NAME=convert_case CARGO_MANIFEST_DIR=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/convert_case-0.4.0 CARGO_MANIFEST_PATH=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/convert_case-0.4.0/Cargo.toml CARGO_PKG_AUTHORS='David Purdum <purdum41@gmail.com>' CARGO_PKG_DESCRIPTION='Convert strings into any case' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE=MIT CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=convert_case CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/rutrum/convert-case' CARGO_PKG_RUST_VERSION='' CARGO_PKG_VERSION=0.4.0 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=4 CARGO_PKG_VERSION_PATCH=0 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/jfredett/code/rust-gpu-ex/target/debug/deps:/nix/store/ggqfrwgzpr3v3dkvh4cnmhymnvf6cqja-gcc-14-20241116-lib/lib' rustc --crate-name convert_case --edition=2018 /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/convert_case-0.4.0/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=3 -C embed-bitcode=no -C debug-assertions=on --check-cfg 'cfg(docsrs)' --check-cfg 'cfg(feature, values("rand", "random"))' -C metadata=7a9bac0b381cd02b -C extra-filename=-7a9bac0b381cd02b --out-dir /home/jfredett/code/rust-gpu-ex/target/debug/deps -L dependency=/home/jfredett/code/rust-gpu-ex/target/debug/deps --cap-lints warn`
     Running `CARGO=/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/bin/cargo CARGO_CFG_FMT_DEBUG=full CARGO_CFG_OVERFLOW_CHECKS='' CARGO_CFG_PANIC=unwind CARGO_CFG_RELOCATION_MODEL=pic CARGO_CFG_TARGET_ABI='' CARGO_CFG_TARGET_ARCH=x86_64 CARGO_CFG_TARGET_ENDIAN=little CARGO_CFG_TARGET_ENV=gnu CARGO_CFG_TARGET_FAMILY=unix CARGO_CFG_TARGET_FEATURE=fxsr,sse,sse2 CARGO_CFG_TARGET_HAS_ATOMIC=16,32,64,8,ptr CARGO_CFG_TARGET_HAS_ATOMIC_EQUAL_ALIGNMENT=16,32,64,8,ptr CARGO_CFG_TARGET_HAS_ATOMIC_LOAD_STORE=16,32,64,8,ptr CARGO_CFG_TARGET_OS=linux CARGO_CFG_TARGET_POINTER_WIDTH=64 CARGO_CFG_TARGET_THREAD_LOCAL='' CARGO_CFG_TARGET_VENDOR=unknown CARGO_CFG_UB_CHECKS='' CARGO_CFG_UNIX='' CARGO_ENCODED_RUSTFLAGS='' CARGO_FEATURE_DEFAULT=1 CARGO_FEATURE_DERIVE=1 CARGO_FEATURE_SERDE_DERIVE=1 CARGO_FEATURE_STD=1 CARGO_MANIFEST_DIR=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.217 CARGO_MANIFEST_PATH=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.217/Cargo.toml CARGO_PKG_AUTHORS='Erick Tryzelaar <erick.tryzelaar@gmail.com>:David Tolnay <dtolnay@gmail.com>' CARGO_PKG_DESCRIPTION='A generic serialization/deserialization framework' CARGO_PKG_HOMEPAGE='https://serde.rs' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=serde CARGO_PKG_README=crates-io.md CARGO_PKG_REPOSITORY='https://github.com/serde-rs/serde' CARGO_PKG_RUST_VERSION=1.31 CARGO_PKG_VERSION=1.0.217 CARGO_PKG_VERSION_MAJOR=1 CARGO_PKG_VERSION_MINOR=0 CARGO_PKG_VERSION_PATCH=217 CARGO_PKG_VERSION_PRE='' DEBUG=false HOST=x86_64-unknown-linux-gnu LD_LIBRARY_PATH='/home/jfredett/code/rust-gpu-ex/target/debug/deps:/home/jfredett/code/rust-gpu-ex/target/debug:/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/lib/rustlib/x86_64-unknown-linux-gnu/lib:/nix/store/ggqfrwgzpr3v3dkvh4cnmhymnvf6cqja-gcc-14-20241116-lib/lib' NUM_JOBS=24 OPT_LEVEL=3 OUT_DIR=/home/jfredett/code/rust-gpu-ex/target/debug/build/serde-89a98421ee8e614b/out PROFILE=debug RUSTC=rustc RUSTDOC=rustdoc TARGET=x86_64-unknown-linux-gnu /home/jfredett/code/rust-gpu-ex/target/debug/build/serde-5c3ebf9913aa6372/build-script-build`
     Running `CARGO=/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/bin/cargo CARGO_CRATE_NAME=crossbeam_utils CARGO_MANIFEST_DIR=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/crossbeam-utils-0.8.21 CARGO_MANIFEST_PATH=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/crossbeam-utils-0.8.21/Cargo.toml CARGO_PKG_AUTHORS='' CARGO_PKG_DESCRIPTION='Utilities for concurrent programming' CARGO_PKG_HOMEPAGE='https://github.com/crossbeam-rs/crossbeam/tree/master/crossbeam-utils' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=crossbeam-utils CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/crossbeam-rs/crossbeam' CARGO_PKG_RUST_VERSION=1.60 CARGO_PKG_VERSION=0.8.21 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=8 CARGO_PKG_VERSION_PATCH=21 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/jfredett/code/rust-gpu-ex/target/debug/deps:/nix/store/ggqfrwgzpr3v3dkvh4cnmhymnvf6cqja-gcc-14-20241116-lib/lib' OUT_DIR=/home/jfredett/code/rust-gpu-ex/target/debug/build/crossbeam-utils-ba7c9cda4c3042d7/out rustc --crate-name crossbeam_utils --edition=2021 /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/crossbeam-utils-0.8.21/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no -C debuginfo=2 --warn=unexpected_cfgs '--allow=clippy::lint_groups_priority' '--allow=clippy::declare_interior_mutable_const' --check-cfg 'cfg(crossbeam_loom)' --check-cfg 'cfg(crossbeam_sanitize)' --cfg 'feature="default"' --cfg 'feature="std"' --check-cfg 'cfg(docsrs)' --check-cfg 'cfg(feature, values("default", "loom", "nightly", "std"))' -C metadata=b8a806ea53dde461 -C extra-filename=-b8a806ea53dde461 --out-dir /home/jfredett/code/rust-gpu-ex/target/debug/deps -L dependency=/home/jfredett/code/rust-gpu-ex/target/debug/deps --cap-lints warn --check-cfg 'cfg(crossbeam_no_atomic,crossbeam_sanitize_thread)'`
[serde 1.0.217] cargo:rerun-if-changed=build.rs
[serde 1.0.217] cargo:rustc-check-cfg=cfg(no_core_cstr)
[serde 1.0.217] cargo:rustc-check-cfg=cfg(no_core_error)
[serde 1.0.217] cargo:rustc-check-cfg=cfg(no_core_net)
[serde 1.0.217] cargo:rustc-check-cfg=cfg(no_core_num_saturating)
[serde 1.0.217] cargo:rustc-check-cfg=cfg(no_core_try_from)
[serde 1.0.217] cargo:rustc-check-cfg=cfg(no_diagnostic_namespace)
[serde 1.0.217] cargo:rustc-check-cfg=cfg(no_float_copysign)
[serde 1.0.217] cargo:rustc-check-cfg=cfg(no_num_nonzero_signed)
[serde 1.0.217] cargo:rustc-check-cfg=cfg(no_relaxed_trait_bounds)
[serde 1.0.217] cargo:rustc-check-cfg=cfg(no_serde_derive)
[serde 1.0.217] cargo:rustc-check-cfg=cfg(no_std_atomic)
[serde 1.0.217] cargo:rustc-check-cfg=cfg(no_std_atomic64)
[serde 1.0.217] cargo:rustc-check-cfg=cfg(no_systemtime_checked_add)
[serde 1.0.217] cargo:rustc-check-cfg=cfg(no_target_has_atomic)
   Compiling longest-increasing-subsequence v0.1.0
     Running `CARGO=/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/bin/cargo CARGO_CRATE_NAME=longest_increasing_subsequence CARGO_MANIFEST_DIR=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/longest-increasing-subsequence-0.1.0 CARGO_MANIFEST_PATH=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/longest-increasing-subsequence-0.1.0/Cargo.toml CARGO_PKG_AUTHORS='Nick Fitzgerald <fitzgen@gmail.com>' CARGO_PKG_DESCRIPTION='Find a longest increasing subsequence of some input sequence' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE=MIT/Apache-2.0 CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=longest-increasing-subsequence CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/fitzgen/longest-increasing-subsequence' CARGO_PKG_RUST_VERSION='' CARGO_PKG_VERSION=0.1.0 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=1 CARGO_PKG_VERSION_PATCH=0 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/jfredett/code/rust-gpu-ex/target/debug/deps:/nix/store/ggqfrwgzpr3v3dkvh4cnmhymnvf6cqja-gcc-14-20241116-lib/lib' rustc --crate-name longest_increasing_subsequence --edition=2018 /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/longest-increasing-subsequence-0.1.0/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=3 -C embed-bitcode=no -C debug-assertions=on --check-cfg 'cfg(docsrs)' --check-cfg 'cfg(feature, values())' -C metadata=1bd3e98cd14ade56 -C extra-filename=-1bd3e98cd14ade56 --out-dir /home/jfredett/code/rust-gpu-ex/target/debug/deps -L dependency=/home/jfredett/code/rust-gpu-ex/target/debug/deps --cap-lints warn`
     Running `CARGO=/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/bin/cargo CARGO_CFG_FMT_DEBUG=full CARGO_CFG_OVERFLOW_CHECKS='' CARGO_CFG_PANIC=unwind CARGO_CFG_RELOCATION_MODEL=pic CARGO_CFG_TARGET_ABI='' CARGO_CFG_TARGET_ARCH=x86_64 CARGO_CFG_TARGET_ENDIAN=little CARGO_CFG_TARGET_ENV=gnu CARGO_CFG_TARGET_FAMILY=unix CARGO_CFG_TARGET_FEATURE=fxsr,sse,sse2 CARGO_CFG_TARGET_HAS_ATOMIC=16,32,64,8,ptr CARGO_CFG_TARGET_HAS_ATOMIC_EQUAL_ALIGNMENT=16,32,64,8,ptr CARGO_CFG_TARGET_HAS_ATOMIC_LOAD_STORE=16,32,64,8,ptr CARGO_CFG_TARGET_OS=linux CARGO_CFG_TARGET_POINTER_WIDTH=64 CARGO_CFG_TARGET_THREAD_LOCAL='' CARGO_CFG_TARGET_VENDOR=unknown CARGO_CFG_UB_CHECKS='' CARGO_CFG_UNIX='' CARGO_ENCODED_RUSTFLAGS='' CARGO_FEATURE_DEFAULT=1 CARGO_MANIFEST_DIR=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/libm-0.2.11 CARGO_MANIFEST_PATH=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/libm-0.2.11/Cargo.toml CARGO_PKG_AUTHORS='Jorge Aparicio <jorge@japaric.io>' CARGO_PKG_DESCRIPTION='libm in pure Rust' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='MIT AND (MIT OR Apache-2.0)' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=libm CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/rust-lang/libm' CARGO_PKG_RUST_VERSION=1.63 CARGO_PKG_VERSION=0.2.11 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=2 CARGO_PKG_VERSION_PATCH=11 CARGO_PKG_VERSION_PRE='' DEBUG=true HOST=x86_64-unknown-linux-gnu LD_LIBRARY_PATH='/home/jfredett/code/rust-gpu-ex/target/debug/deps:/home/jfredett/code/rust-gpu-ex/target/debug:/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/lib/rustlib/x86_64-unknown-linux-gnu/lib:/nix/store/ggqfrwgzpr3v3dkvh4cnmhymnvf6cqja-gcc-14-20241116-lib/lib' NUM_JOBS=24 OPT_LEVEL=0 OUT_DIR=/home/jfredett/code/rust-gpu-ex/target/debug/build/libm-4f01587d3e733695/out PROFILE=debug RUSTC=rustc RUSTDOC=rustdoc TARGET=x86_64-unknown-linux-gnu /home/jfredett/code/rust-gpu-ex/target/debug/build/libm-53648c7b2758247a/build-script-build`
[libm 0.2.11] cargo:rerun-if-changed=build.rs
[libm 0.2.11] cargo:rustc-check-cfg=cfg(assert_no_panic)
[libm 0.2.11] cargo:rustc-check-cfg=cfg(feature, values("unstable"))
[libm 0.2.11] cargo:rustc-check-cfg=cfg(feature, values("checked"))
   Compiling syn v1.0.109
     Running `CARGO=/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/bin/cargo CARGO_CRATE_NAME=build_script_build CARGO_MANIFEST_DIR=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109 CARGO_MANIFEST_PATH=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/Cargo.toml CARGO_PKG_AUTHORS='David Tolnay <dtolnay@gmail.com>' CARGO_PKG_DESCRIPTION='Parser for Rust source code' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=syn CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/dtolnay/syn' CARGO_PKG_RUST_VERSION=1.31 CARGO_PKG_VERSION=1.0.109 CARGO_PKG_VERSION_MAJOR=1 CARGO_PKG_VERSION_MINOR=0 CARGO_PKG_VERSION_PATCH=109 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/jfredett/code/rust-gpu-ex/target/debug/deps:/nix/store/ggqfrwgzpr3v3dkvh4cnmhymnvf6cqja-gcc-14-20241116-lib/lib' rustc --crate-name build_script_build --edition=2018 /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/build.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type bin --emit=dep-info,link -C opt-level=3 -C embed-bitcode=no -C debug-assertions=on --cfg 'feature="clone-impls"' --cfg 'feature="default"' --cfg 'feature="derive"' --cfg 'feature="full"' --cfg 'feature="parsing"' --cfg 'feature="printing"' --cfg 'feature="proc-macro"' --cfg 'feature="quote"' --cfg 'feature="visit-mut"' --check-cfg 'cfg(docsrs)' --check-cfg 'cfg(feature, values("clone-impls", "default", "derive", "extra-traits", "fold", "full", "parsing", "printing", "proc-macro", "quote", "test", "visit", "visit-mut"))' -C metadata=4a769d0e934da471 -C extra-filename=-4a769d0e934da471 --out-dir /home/jfredett/code/rust-gpu-ex/target/debug/build/syn-4a769d0e934da471 -L dependency=/home/jfredett/code/rust-gpu-ex/target/debug/deps --cap-lints warn`
warning: `thread_local` (lib) generated 2 warnings
   Compiling internal-iterator v0.2.3
     Running `CARGO=/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/bin/cargo CARGO_CRATE_NAME=internal_iterator CARGO_MANIFEST_DIR=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/internal-iterator-0.2.3 CARGO_MANIFEST_PATH=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/internal-iterator-0.2.3/Cargo.toml CARGO_PKG_AUTHORS='djade <djadenkus@gmail.com>' CARGO_PKG_DESCRIPTION='Internal iteration equivalent of `std::iter::Iterator`.' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=internal-iterator CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/jDomantas/internal-iterator' CARGO_PKG_RUST_VERSION='' CARGO_PKG_VERSION=0.2.3 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=2 CARGO_PKG_VERSION_PATCH=3 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/jfredett/code/rust-gpu-ex/target/debug/deps:/nix/store/ggqfrwgzpr3v3dkvh4cnmhymnvf6cqja-gcc-14-20241116-lib/lib' rustc --crate-name internal_iterator --edition=2021 /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/internal-iterator-0.2.3/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=3 -C embed-bitcode=no -C debug-assertions=on --cfg 'feature="alloc"' --cfg 'feature="default"' --cfg 'feature="std"' --check-cfg 'cfg(docsrs)' --check-cfg 'cfg(feature, values("alloc", "default", "std"))' -C metadata=de07778bb02a8f9d -C extra-filename=-de07778bb02a8f9d --out-dir /home/jfredett/code/rust-gpu-ex/target/debug/deps -L dependency=/home/jfredett/code/rust-gpu-ex/target/debug/deps --cap-lints warn`
warning: `twox-hash` (lib) generated 1 warning
   Compiling aho-corasick v1.1.3
     Running `CARGO=/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/bin/cargo CARGO_CRATE_NAME=aho_corasick CARGO_MANIFEST_DIR=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/aho-corasick-1.1.3 CARGO_MANIFEST_PATH=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/aho-corasick-1.1.3/Cargo.toml CARGO_PKG_AUTHORS='Andrew Gallant <jamslam@gmail.com>' CARGO_PKG_DESCRIPTION='Fast multiple substring searching.' CARGO_PKG_HOMEPAGE='https://github.com/BurntSushi/aho-corasick' CARGO_PKG_LICENSE='Unlicense OR MIT' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=aho-corasick CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/BurntSushi/aho-corasick' CARGO_PKG_RUST_VERSION=1.60.0 CARGO_PKG_VERSION=1.1.3 CARGO_PKG_VERSION_MAJOR=1 CARGO_PKG_VERSION_MINOR=1 CARGO_PKG_VERSION_PATCH=3 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/jfredett/code/rust-gpu-ex/target/debug/deps:/nix/store/ggqfrwgzpr3v3dkvh4cnmhymnvf6cqja-gcc-14-20241116-lib/lib' rustc --crate-name aho_corasick --edition=2021 /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/aho-corasick-1.1.3/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=3 -C embed-bitcode=no -C debug-assertions=on --cfg 'feature="perf-literal"' --cfg 'feature="std"' --check-cfg 'cfg(docsrs)' --check-cfg 'cfg(feature, values("default", "logging", "perf-literal", "std"))' -C metadata=4321c69f465d1567 -C extra-filename=-4321c69f465d1567 --out-dir /home/jfredett/code/rust-gpu-ex/target/debug/deps -L dependency=/home/jfredett/code/rust-gpu-ex/target/debug/deps --extern memchr=/home/jfredett/code/rust-gpu-ex/target/debug/deps/libmemchr-f5d0dba28048739b.rmeta --cap-lints warn`
     Running `CARGO=/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/bin/cargo CARGO_CFG_FMT_DEBUG=full CARGO_CFG_OVERFLOW_CHECKS='' CARGO_CFG_PANIC=unwind CARGO_CFG_RELOCATION_MODEL=pic CARGO_CFG_TARGET_ABI='' CARGO_CFG_TARGET_ARCH=x86_64 CARGO_CFG_TARGET_ENDIAN=little CARGO_CFG_TARGET_ENV=gnu CARGO_CFG_TARGET_FAMILY=unix CARGO_CFG_TARGET_FEATURE=fxsr,sse,sse2 CARGO_CFG_TARGET_HAS_ATOMIC=16,32,64,8,ptr CARGO_CFG_TARGET_HAS_ATOMIC_EQUAL_ALIGNMENT=16,32,64,8,ptr CARGO_CFG_TARGET_HAS_ATOMIC_LOAD_STORE=16,32,64,8,ptr CARGO_CFG_TARGET_OS=linux CARGO_CFG_TARGET_POINTER_WIDTH=64 CARGO_CFG_TARGET_THREAD_LOCAL='' CARGO_CFG_TARGET_VENDOR=unknown CARGO_CFG_UB_CHECKS='' CARGO_CFG_UNIX='' CARGO_ENCODED_RUSTFLAGS='' CARGO_FEATURE_DEFAULT=1 CARGO_FEATURE_PROC_MACRO=1 CARGO_MANIFEST_DIR=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/proc-macro2-1.0.93 CARGO_MANIFEST_PATH=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/proc-macro2-1.0.93/Cargo.toml CARGO_PKG_AUTHORS='David Tolnay <dtolnay@gmail.com>:Alex Crichton <alex@alexcrichton.com>' CARGO_PKG_DESCRIPTION='A substitute implementation of the compiler'\''s `proc_macro` API to decouple token-based libraries from the procedural macro use case.' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=proc-macro2 CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/dtolnay/proc-macro2' CARGO_PKG_RUST_VERSION=1.56 CARGO_PKG_VERSION=1.0.93 CARGO_PKG_VERSION_MAJOR=1 CARGO_PKG_VERSION_MINOR=0 CARGO_PKG_VERSION_PATCH=93 CARGO_PKG_VERSION_PRE='' DEBUG=false HOST=x86_64-unknown-linux-gnu LD_LIBRARY_PATH='/home/jfredett/code/rust-gpu-ex/target/debug/deps:/home/jfredett/code/rust-gpu-ex/target/debug:/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/lib/rustlib/x86_64-unknown-linux-gnu/lib:/nix/store/ggqfrwgzpr3v3dkvh4cnmhymnvf6cqja-gcc-14-20241116-lib/lib' NUM_JOBS=24 OPT_LEVEL=3 OUT_DIR=/home/jfredett/code/rust-gpu-ex/target/debug/build/proc-macro2-db344d6cc6ee6888/out PROFILE=debug RUSTC=rustc RUSTDOC=rustdoc TARGET=x86_64-unknown-linux-gnu /home/jfredett/code/rust-gpu-ex/target/debug/build/proc-macro2-4677317602a4097b/build-script-build`
   Compiling tracing-log v0.2.0
     Running `CARGO=/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/bin/cargo CARGO_CRATE_NAME=tracing_log CARGO_MANIFEST_DIR=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tracing-log-0.2.0 CARGO_MANIFEST_PATH=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tracing-log-0.2.0/Cargo.toml CARGO_PKG_AUTHORS='Tokio Contributors <team@tokio.rs>' CARGO_PKG_DESCRIPTION='Provides compatibility between `tracing` and the `log` crate.
' CARGO_PKG_HOMEPAGE='https://tokio.rs' CARGO_PKG_LICENSE=MIT CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=tracing-log CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/tokio-rs/tracing' CARGO_PKG_RUST_VERSION=1.56.0 CARGO_PKG_VERSION=0.2.0 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=2 CARGO_PKG_VERSION_PATCH=0 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/jfredett/code/rust-gpu-ex/target/debug/deps:/nix/store/ggqfrwgzpr3v3dkvh4cnmhymnvf6cqja-gcc-14-20241116-lib/lib' rustc --crate-name tracing_log --edition=2018 /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tracing-log-0.2.0/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=3 -C embed-bitcode=no -C debug-assertions=on --cfg 'feature="log-tracer"' --cfg 'feature="std"' --check-cfg 'cfg(docsrs)' --check-cfg 'cfg(feature, values("ahash", "default", "interest-cache", "log-tracer", "lru", "std"))' -C metadata=700584cbb3a4eb7c -C extra-filename=-700584cbb3a4eb7c --out-dir /home/jfredett/code/rust-gpu-ex/target/debug/deps -L dependency=/home/jfredett/code/rust-gpu-ex/target/debug/deps --extern log=/home/jfredett/code/rust-gpu-ex/target/debug/deps/liblog-31208c80599e6ff7.rmeta --extern once_cell=/home/jfredett/code/rust-gpu-ex/target/debug/deps/libonce_cell-bd1b1fc72190860c.rmeta --extern tracing_core=/home/jfredett/code/rust-gpu-ex/target/debug/deps/libtracing_core-d150f2d26d60a8b5.rmeta --cap-lints warn`
[proc-macro2 1.0.93] cargo:rustc-check-cfg=cfg(fuzzing)
[proc-macro2 1.0.93] cargo:rustc-check-cfg=cfg(no_is_available)
[proc-macro2 1.0.93] cargo:rustc-check-cfg=cfg(no_literal_byte_character)
[proc-macro2 1.0.93] cargo:rustc-check-cfg=cfg(no_literal_c_string)
[proc-macro2 1.0.93] cargo:rustc-check-cfg=cfg(no_source_text)
[proc-macro2 1.0.93] cargo:rustc-check-cfg=cfg(proc_macro_span)
[proc-macro2 1.0.93] cargo:rustc-check-cfg=cfg(procmacro2_backtrace)
[proc-macro2 1.0.93] cargo:rustc-check-cfg=cfg(procmacro2_nightly_testing)
[proc-macro2 1.0.93] cargo:rustc-check-cfg=cfg(procmacro2_semver_exempt)
[proc-macro2 1.0.93] cargo:rustc-check-cfg=cfg(randomize_layout)
[proc-macro2 1.0.93] cargo:rustc-check-cfg=cfg(span_locations)
[proc-macro2 1.0.93] cargo:rustc-check-cfg=cfg(super_unstable)
[proc-macro2 1.0.93] cargo:rustc-check-cfg=cfg(wrap_proc_macro)
[proc-macro2 1.0.93] cargo:rerun-if-changed=build/probe.rs
   Compiling itertools v0.10.5
     Running `CARGO=/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/bin/cargo CARGO_CRATE_NAME=itertools CARGO_MANIFEST_DIR=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5 CARGO_MANIFEST_PATH=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/Cargo.toml CARGO_PKG_AUTHORS=bluss CARGO_PKG_DESCRIPTION='Extra iterator adaptors, iterator methods, free functions, and macros.' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE=MIT/Apache-2.0 CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=itertools CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/rust-itertools/itertools' CARGO_PKG_RUST_VERSION='' CARGO_PKG_VERSION=0.10.5 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=10 CARGO_PKG_VERSION_PATCH=5 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/jfredett/code/rust-gpu-ex/target/debug/deps:/nix/store/ggqfrwgzpr3v3dkvh4cnmhymnvf6cqja-gcc-14-20241116-lib/lib' rustc --crate-name itertools --edition=2018 /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.10.5/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=3 -C embed-bitcode=no -C debug-assertions=on --cfg 'feature="default"' --cfg 'feature="use_alloc"' --cfg 'feature="use_std"' --check-cfg 'cfg(docsrs)' --check-cfg 'cfg(feature, values("default", "use_alloc", "use_std"))' -C metadata=808280115db6b0e5 -C extra-filename=-808280115db6b0e5 --out-dir /home/jfredett/code/rust-gpu-ex/target/debug/deps -L dependency=/home/jfredett/code/rust-gpu-ex/target/debug/deps --extern either=/home/jfredett/code/rust-gpu-ex/target/debug/deps/libeither-bede50f8b691fcc1.rmeta --cap-lints warn`
warning: lint `private_in_public` has been removed: replaced with another group of lints, see RFC <https://rust-lang.github.io/rfcs/2145-type-privacy.html> for more information
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tracing-log-0.2.0/src/lib.rs:115:5
    |
115 |     private_in_public,
    |     ^^^^^^^^^^^^^^^^^
    |
    = note: `#[warn(renamed_and_removed_lints)]` on by default

[proc-macro2 1.0.93] cargo:rustc-cfg=wrap_proc_macro
[proc-macro2 1.0.93] cargo:rustc-cfg=proc_macro_span
     Running `CARGO=/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/bin/cargo CARGO_CRATE_NAME=proc_macro2 CARGO_MANIFEST_DIR=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/proc-macro2-1.0.93 CARGO_MANIFEST_PATH=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/proc-macro2-1.0.93/Cargo.toml CARGO_PKG_AUTHORS='David Tolnay <dtolnay@gmail.com>:Alex Crichton <alex@alexcrichton.com>' CARGO_PKG_DESCRIPTION='A substitute implementation of the compiler'\''s `proc_macro` API to decouple token-based libraries from the procedural macro use case.' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=proc-macro2 CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/dtolnay/proc-macro2' CARGO_PKG_RUST_VERSION=1.56 CARGO_PKG_VERSION=1.0.93 CARGO_PKG_VERSION_MAJOR=1 CARGO_PKG_VERSION_MINOR=0 CARGO_PKG_VERSION_PATCH=93 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/jfredett/code/rust-gpu-ex/target/debug/deps:/nix/store/ggqfrwgzpr3v3dkvh4cnmhymnvf6cqja-gcc-14-20241116-lib/lib' OUT_DIR=/home/jfredett/code/rust-gpu-ex/target/debug/build/proc-macro2-db344d6cc6ee6888/out rustc --crate-name proc_macro2 --edition=2021 /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/proc-macro2-1.0.93/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=3 -C embed-bitcode=no -C debug-assertions=on --cfg 'feature="default"' --cfg 'feature="proc-macro"' --check-cfg 'cfg(docsrs)' --check-cfg 'cfg(feature, values("default", "nightly", "proc-macro", "span-locations"))' -C metadata=2990a941f70f10f3 -C extra-filename=-2990a941f70f10f3 --out-dir /home/jfredett/code/rust-gpu-ex/target/debug/deps -L dependency=/home/jfredett/code/rust-gpu-ex/target/debug/deps --extern unicode_ident=/home/jfredett/code/rust-gpu-ex/target/debug/deps/libunicode_ident-ddd6fc7b9b0cd3b9.rmeta --cap-lints warn --cfg wrap_proc_macro --cfg proc_macro_span --check-cfg 'cfg(fuzzing)' --check-cfg 'cfg(no_is_available)' --check-cfg 'cfg(no_literal_byte_character)' --check-cfg 'cfg(no_literal_c_string)' --check-cfg 'cfg(no_source_text)' --check-cfg 'cfg(proc_macro_span)' --check-cfg 'cfg(procmacro2_backtrace)' --check-cfg 'cfg(procmacro2_nightly_testing)' --check-cfg 'cfg(procmacro2_semver_exempt)' --check-cfg 'cfg(randomize_layout)' --check-cfg 'cfg(span_locations)' --check-cfg 'cfg(super_unstable)' --check-cfg 'cfg(wrap_proc_macro)'`
   Compiling flate2 v1.0.35
     Running `CARGO=/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/bin/cargo CARGO_CRATE_NAME=flate2 CARGO_MANIFEST_DIR=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flate2-1.0.35 CARGO_MANIFEST_PATH=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flate2-1.0.35/Cargo.toml CARGO_PKG_AUTHORS='Alex Crichton <alex@alexcrichton.com>:Josh Triplett <josh@joshtriplett.org>' CARGO_PKG_DESCRIPTION='DEFLATE compression and decompression exposed as Read/BufRead/Write streams.
Supports miniz_oxide and multiple zlib implementations. Supports zlib, gzip,
and raw deflate streams.
' CARGO_PKG_HOMEPAGE='https://github.com/rust-lang/flate2-rs' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=flate2 CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/rust-lang/flate2-rs' CARGO_PKG_RUST_VERSION=1.56.1 CARGO_PKG_VERSION=1.0.35 CARGO_PKG_VERSION_MAJOR=1 CARGO_PKG_VERSION_MINOR=0 CARGO_PKG_VERSION_PATCH=35 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/jfredett/code/rust-gpu-ex/target/debug/deps:/nix/store/ggqfrwgzpr3v3dkvh4cnmhymnvf6cqja-gcc-14-20241116-lib/lib' rustc --crate-name flate2 --edition=2018 /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/flate2-1.0.35/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=3 -C embed-bitcode=no -C debug-assertions=on --cfg 'feature="any_impl"' --cfg 'feature="default"' --cfg 'feature="miniz_oxide"' --cfg 'feature="rust_backend"' --check-cfg 'cfg(docsrs)' --check-cfg 'cfg(feature, values("any_impl", "any_zlib", "cloudflare-zlib-sys", "cloudflare_zlib", "default", "libz-ng-sys", "libz-rs-sys", "libz-sys", "miniz-sys", "miniz_oxide", "rust_backend", "zlib", "zlib-default", "zlib-ng", "zlib-ng-compat", "zlib-rs"))' -C metadata=5e7cb4fc5914e13f -C extra-filename=-5e7cb4fc5914e13f --out-dir /home/jfredett/code/rust-gpu-ex/target/debug/deps -L dependency=/home/jfredett/code/rust-gpu-ex/target/debug/deps --extern crc32fast=/home/jfredett/code/rust-gpu-ex/target/debug/deps/libcrc32fast-268ab493df00bf36.rmeta --extern miniz_oxide=/home/jfredett/code/rust-gpu-ex/target/debug/deps/libminiz_oxide-ba9a75ca4182d7ef.rmeta --cap-lints warn`
warning: `nu-ansi-term` (lib) generated 1 warning
   Compiling linux-raw-sys v0.4.15
     Running `CARGO=/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/bin/cargo CARGO_CRATE_NAME=linux_raw_sys CARGO_MANIFEST_DIR=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/linux-raw-sys-0.4.15 CARGO_MANIFEST_PATH=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/linux-raw-sys-0.4.15/Cargo.toml CARGO_PKG_AUTHORS='Dan Gohman <dev@sunfishcode.online>' CARGO_PKG_DESCRIPTION='Generated bindings for Linux'\''s userspace API' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='Apache-2.0 WITH LLVM-exception OR Apache-2.0 OR MIT' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=linux-raw-sys CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/sunfishcode/linux-raw-sys' CARGO_PKG_RUST_VERSION=1.63 CARGO_PKG_VERSION=0.4.15 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=4 CARGO_PKG_VERSION_PATCH=15 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/jfredett/code/rust-gpu-ex/target/debug/deps:/nix/store/ggqfrwgzpr3v3dkvh4cnmhymnvf6cqja-gcc-14-20241116-lib/lib' rustc --crate-name linux_raw_sys --edition=2021 /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/linux-raw-sys-0.4.15/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=3 -C embed-bitcode=no --warn=unexpected_cfgs --check-cfg 'cfg(target_arch, values("xtensa"))' -C debug-assertions=on --cfg 'feature="elf"' --cfg 'feature="errno"' --cfg 'feature="general"' --cfg 'feature="if_ether"' --cfg 'feature="io_uring"' --cfg 'feature="ioctl"' --cfg 'feature="net"' --cfg 'feature="netlink"' --cfg 'feature="no_std"' --cfg 'feature="prctl"' --cfg 'feature="system"' --cfg 'feature="xdp"' --check-cfg 'cfg(docsrs)' --check-cfg 'cfg(feature, values("bootparam", "btrfs", "compiler_builtins", "core", "default", "elf", "elf_uapi", "errno", "general", "if_arp", "if_ether", "if_packet", "io_uring", "ioctl", "landlock", "loop_device", "mempolicy", "net", "netlink", "no_std", "prctl", "ptrace", "rustc-dep-of-std", "std", "system", "xdp"))' -C metadata=e9bb6832b04073e9 -C extra-filename=-e9bb6832b04073e9 --out-dir /home/jfredett/code/rust-gpu-ex/target/debug/deps -L dependency=/home/jfredett/code/rust-gpu-ex/target/debug/deps --cap-lints warn`
     Running `CARGO=/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/bin/cargo CARGO_CFG_FMT_DEBUG=full CARGO_CFG_OVERFLOW_CHECKS='' CARGO_CFG_PANIC=unwind CARGO_CFG_RELOCATION_MODEL=pic CARGO_CFG_TARGET_ABI='' CARGO_CFG_TARGET_ARCH=x86_64 CARGO_CFG_TARGET_ENDIAN=little CARGO_CFG_TARGET_ENV=gnu CARGO_CFG_TARGET_FAMILY=unix CARGO_CFG_TARGET_FEATURE=fxsr,sse,sse2 CARGO_CFG_TARGET_HAS_ATOMIC=16,32,64,8,ptr CARGO_CFG_TARGET_HAS_ATOMIC_EQUAL_ALIGNMENT=16,32,64,8,ptr CARGO_CFG_TARGET_HAS_ATOMIC_LOAD_STORE=16,32,64,8,ptr CARGO_CFG_TARGET_OS=linux CARGO_CFG_TARGET_POINTER_WIDTH=64 CARGO_CFG_TARGET_THREAD_LOCAL='' CARGO_CFG_TARGET_VENDOR=unknown CARGO_CFG_UB_CHECKS='' CARGO_CFG_UNIX='' CARGO_ENCODED_RUSTFLAGS='' CARGO_FEATURE_DEFAULT=1 CARGO_FEATURE_STD=1 CARGO_MANIFEST_DIR=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/libc-0.2.169 CARGO_MANIFEST_PATH=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/libc-0.2.169/Cargo.toml CARGO_PKG_AUTHORS='The Rust Project Developers' CARGO_PKG_DESCRIPTION='Raw FFI bindings to platform libraries like libc.
' CARGO_PKG_HOMEPAGE='https://github.com/rust-lang/libc' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=libc CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/rust-lang/libc' CARGO_PKG_RUST_VERSION=1.63 CARGO_PKG_VERSION=0.2.169 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=2 CARGO_PKG_VERSION_PATCH=169 CARGO_PKG_VERSION_PRE='' DEBUG=false HOST=x86_64-unknown-linux-gnu LD_LIBRARY_PATH='/home/jfredett/code/rust-gpu-ex/target/debug/deps:/home/jfredett/code/rust-gpu-ex/target/debug:/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/lib/rustlib/x86_64-unknown-linux-gnu/lib:/nix/store/ggqfrwgzpr3v3dkvh4cnmhymnvf6cqja-gcc-14-20241116-lib/lib' NUM_JOBS=24 OPT_LEVEL=3 OUT_DIR=/home/jfredett/code/rust-gpu-ex/target/debug/build/libc-4e6fd5503bd08e18/out PROFILE=debug RUSTC=rustc RUSTDOC=rustdoc TARGET=x86_64-unknown-linux-gnu /home/jfredett/code/rust-gpu-ex/target/debug/build/libc-0b10198da98c5682/build-script-build`
[libc 0.2.169] cargo:rerun-if-changed=build.rs
[libc 0.2.169] cargo:rerun-if-env-changed=RUST_LIBC_UNSTABLE_FREEBSD_VERSION
[libc 0.2.169] cargo:rustc-cfg=freebsd11
[libc 0.2.169] cargo:rustc-cfg=libc_const_extern_fn
[libc 0.2.169] cargo:rustc-check-cfg=cfg(emscripten_new_stat_abi)
[libc 0.2.169] cargo:rustc-check-cfg=cfg(espidf_time32)
[libc 0.2.169] cargo:rustc-check-cfg=cfg(freebsd10)
[libc 0.2.169] cargo:rustc-check-cfg=cfg(freebsd11)
[libc 0.2.169] cargo:rustc-check-cfg=cfg(freebsd12)
[libc 0.2.169] cargo:rustc-check-cfg=cfg(freebsd13)
[libc 0.2.169] cargo:rustc-check-cfg=cfg(freebsd14)
[libc 0.2.169] cargo:rustc-check-cfg=cfg(freebsd15)
[libc 0.2.169] cargo:rustc-check-cfg=cfg(libc_const_extern_fn)
[libc 0.2.169] cargo:rustc-check-cfg=cfg(libc_deny_warnings)
[libc 0.2.169] cargo:rustc-check-cfg=cfg(libc_thread_local)
[libc 0.2.169] cargo:rustc-check-cfg=cfg(libc_ctest)
[libc 0.2.169] cargo:rustc-check-cfg=cfg(target_os,values("switch","aix","ohos","hurd","rtems","visionos","nuttx"))
[libc 0.2.169] cargo:rustc-check-cfg=cfg(target_env,values("illumos","wasi","aix","ohos"))
[libc 0.2.169] cargo:rustc-check-cfg=cfg(target_arch,values("loongarch64","mips32r6","mips64r6","csky"))
     Running `CARGO=/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/bin/cargo CARGO_CRATE_NAME=libc CARGO_MANIFEST_DIR=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/libc-0.2.169 CARGO_MANIFEST_PATH=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/libc-0.2.169/Cargo.toml CARGO_PKG_AUTHORS='The Rust Project Developers' CARGO_PKG_DESCRIPTION='Raw FFI bindings to platform libraries like libc.
' CARGO_PKG_HOMEPAGE='https://github.com/rust-lang/libc' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=libc CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/rust-lang/libc' CARGO_PKG_RUST_VERSION=1.63 CARGO_PKG_VERSION=0.2.169 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=2 CARGO_PKG_VERSION_PATCH=169 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/jfredett/code/rust-gpu-ex/target/debug/deps:/nix/store/ggqfrwgzpr3v3dkvh4cnmhymnvf6cqja-gcc-14-20241116-lib/lib' OUT_DIR=/home/jfredett/code/rust-gpu-ex/target/debug/build/libc-4e6fd5503bd08e18/out rustc --crate-name libc --edition=2021 /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/libc-0.2.169/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=3 -C embed-bitcode=no -C debug-assertions=on --cfg 'feature="default"' --cfg 'feature="std"' --check-cfg 'cfg(docsrs)' --check-cfg 'cfg(feature, values("align", "const-extern-fn", "default", "extra_traits", "rustc-dep-of-std", "rustc-std-workspace-core", "std", "use_std"))' -C metadata=67d069db6a8dae33 -C extra-filename=-67d069db6a8dae33 --out-dir /home/jfredett/code/rust-gpu-ex/target/debug/deps -L dependency=/home/jfredett/code/rust-gpu-ex/target/debug/deps --cap-lints warn --cfg freebsd11 --cfg libc_const_extern_fn --check-cfg 'cfg(emscripten_new_stat_abi)' --check-cfg 'cfg(espidf_time32)' --check-cfg 'cfg(freebsd10)' --check-cfg 'cfg(freebsd11)' --check-cfg 'cfg(freebsd12)' --check-cfg 'cfg(freebsd13)' --check-cfg 'cfg(freebsd14)' --check-cfg 'cfg(freebsd15)' --check-cfg 'cfg(libc_const_extern_fn)' --check-cfg 'cfg(libc_deny_warnings)' --check-cfg 'cfg(libc_thread_local)' --check-cfg 'cfg(libc_ctest)' --check-cfg 'cfg(target_os,values("switch","aix","ohos","hurd","rtems","visionos","nuttx"))' --check-cfg 'cfg(target_env,values("illumos","wasi","aix","ohos"))' --check-cfg 'cfg(target_arch,values("loongarch64","mips32r6","mips64r6","csky"))'`
   Compiling indexmap v2.7.1
     Running `CARGO=/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/bin/cargo CARGO_CRATE_NAME=indexmap CARGO_MANIFEST_DIR=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/indexmap-2.7.1 CARGO_MANIFEST_PATH=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/indexmap-2.7.1/Cargo.toml CARGO_PKG_AUTHORS='' CARGO_PKG_DESCRIPTION='A hash table with consistent order and fast iteration.' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='Apache-2.0 OR MIT' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=indexmap CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/indexmap-rs/indexmap' CARGO_PKG_RUST_VERSION=1.63 CARGO_PKG_VERSION=2.7.1 CARGO_PKG_VERSION_MAJOR=2 CARGO_PKG_VERSION_MINOR=7 CARGO_PKG_VERSION_PATCH=1 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/jfredett/code/rust-gpu-ex/target/debug/deps:/nix/store/ggqfrwgzpr3v3dkvh4cnmhymnvf6cqja-gcc-14-20241116-lib/lib' rustc --crate-name indexmap --edition=2021 /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/indexmap-2.7.1/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=3 -C embed-bitcode=no '--allow=clippy::style' -C debug-assertions=on --cfg 'feature="default"' --cfg 'feature="std"' --check-cfg 'cfg(docsrs)' --check-cfg 'cfg(feature, values("arbitrary", "borsh", "default", "quickcheck", "rayon", "rustc-rayon", "serde", "std", "test_debug"))' -C metadata=08e82cab490e2ea5 -C extra-filename=-08e82cab490e2ea5 --out-dir /home/jfredett/code/rust-gpu-ex/target/debug/deps -L dependency=/home/jfredett/code/rust-gpu-ex/target/debug/deps --extern equivalent=/home/jfredett/code/rust-gpu-ex/target/debug/deps/libequivalent-44dbb2ac1a7b78c6.rmeta --extern hashbrown=/home/jfredett/code/rust-gpu-ex/target/debug/deps/libhashbrown-ee9301b93923918e.rmeta --cap-lints warn`
   Compiling arrayvec v0.7.6
     Running `CARGO=/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/bin/cargo CARGO_CRATE_NAME=arrayvec CARGO_MANIFEST_DIR=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrayvec-0.7.6 CARGO_MANIFEST_PATH=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrayvec-0.7.6/Cargo.toml CARGO_PKG_AUTHORS=bluss CARGO_PKG_DESCRIPTION='A vector with fixed capacity, backed by an array (it can be stored on the stack too). Implements fixed capacity ArrayVec and ArrayString.' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=arrayvec CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/bluss/arrayvec' CARGO_PKG_RUST_VERSION=1.51 CARGO_PKG_VERSION=0.7.6 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=7 CARGO_PKG_VERSION_PATCH=6 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/jfredett/code/rust-gpu-ex/target/debug/deps:/nix/store/ggqfrwgzpr3v3dkvh4cnmhymnvf6cqja-gcc-14-20241116-lib/lib' rustc --crate-name arrayvec --edition=2018 /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/arrayvec-0.7.6/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=3 -C embed-bitcode=no -C debug-assertions=on --cfg 'feature="default"' --cfg 'feature="std"' --check-cfg 'cfg(docsrs)' --check-cfg 'cfg(feature, values("borsh", "default", "serde", "std", "zeroize"))' -C metadata=ecd9c3cb21affbb7 -C extra-filename=-ecd9c3cb21affbb7 --out-dir /home/jfredett/code/rust-gpu-ex/target/debug/deps -L dependency=/home/jfredett/code/rust-gpu-ex/target/debug/deps --cap-lints warn`
warning: `tracing-log` (lib) generated 1 warning
   Compiling rustc_codegen_spirv v0.9.0 (https://github.com/Rust-GPU/rust-gpu.git?branch=main#6e2c84d4)
     Running `CARGO=/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/bin/cargo CARGO_CRATE_NAME=build_script_build CARGO_MANIFEST_DIR=/home/jfredett/.cargo/git/checkouts/rust-gpu-11142fd2aadc2318/6e2c84d/crates/rustc_codegen_spirv CARGO_MANIFEST_PATH=/home/jfredett/.cargo/git/checkouts/rust-gpu-11142fd2aadc2318/6e2c84d/crates/rustc_codegen_spirv/Cargo.toml CARGO_PKG_AUTHORS='rust-gpu developers:Embark <opensource@embark-studios.com>' CARGO_PKG_DESCRIPTION='SPIR-V code generator backend for rustc' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=rustc_codegen_spirv CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/rust-gpu/rust-gpu' CARGO_PKG_RUST_VERSION='' CARGO_PKG_VERSION=0.9.0 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=9 CARGO_PKG_VERSION_PATCH=0 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/jfredett/code/rust-gpu-ex/target/debug/deps:/nix/store/ggqfrwgzpr3v3dkvh4cnmhymnvf6cqja-gcc-14-20241116-lib/lib' rustc --crate-name build_script_build --edition=2021 /home/jfredett/.cargo/git/checkouts/rust-gpu-11142fd2aadc2318/6e2c84d/crates/rustc_codegen_spirv/build.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type bin --emit=dep-info,link -C opt-level=3 -C embed-bitcode=no -C debug-assertions=on --cfg 'feature="use-compiled-tools"' --check-cfg 'cfg(docsrs)' --check-cfg 'cfg(feature, values("default", "skip-toolchain-check", "use-compiled-tools", "use-installed-tools"))' -C metadata=4e74f1f857ce0777 -C extra-filename=-4e74f1f857ce0777 --out-dir /home/jfredett/code/rust-gpu-ex/target/debug/build/rustc_codegen_spirv-4e74f1f857ce0777 -L dependency=/home/jfredett/code/rust-gpu-ex/target/debug/deps --cap-lints warn`
     Running `CARGO=/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/bin/cargo CARGO_CFG_FMT_DEBUG=full CARGO_CFG_OVERFLOW_CHECKS='' CARGO_CFG_PANIC=unwind CARGO_CFG_RELOCATION_MODEL=pic CARGO_CFG_TARGET_ABI='' CARGO_CFG_TARGET_ARCH=x86_64 CARGO_CFG_TARGET_ENDIAN=little CARGO_CFG_TARGET_ENV=gnu CARGO_CFG_TARGET_FAMILY=unix CARGO_CFG_TARGET_FEATURE=fxsr,sse,sse2 CARGO_CFG_TARGET_HAS_ATOMIC=16,32,64,8,ptr CARGO_CFG_TARGET_HAS_ATOMIC_EQUAL_ALIGNMENT=16,32,64,8,ptr CARGO_CFG_TARGET_HAS_ATOMIC_LOAD_STORE=16,32,64,8,ptr CARGO_CFG_TARGET_OS=linux CARGO_CFG_TARGET_POINTER_WIDTH=64 CARGO_CFG_TARGET_THREAD_LOCAL='' CARGO_CFG_TARGET_VENDOR=unknown CARGO_CFG_UB_CHECKS='' CARGO_CFG_UNIX='' CARGO_ENCODED_RUSTFLAGS='' CARGO_MANIFEST_DIR=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirt-0.4.0 CARGO_MANIFEST_PATH=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirt-0.4.0/Cargo.toml CARGO_PKG_AUTHORS='SPIR-T developers:Embark <opensource@embark-studios.com>' CARGO_PKG_DESCRIPTION='Shader-focused IR to target, transform and translate from.' CARGO_PKG_HOMEPAGE='https://github.com/rust-gpu/spirt' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=spirt CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/rust-gpu/spirt/tree/0.4.0' CARGO_PKG_RUST_VERSION='' CARGO_PKG_VERSION=0.4.0 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=4 CARGO_PKG_VERSION_PATCH=0 CARGO_PKG_VERSION_PRE='' DEBUG=false HOST=x86_64-unknown-linux-gnu LD_LIBRARY_PATH='/home/jfredett/code/rust-gpu-ex/target/debug/deps:/home/jfredett/code/rust-gpu-ex/target/debug:/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/lib/rustlib/x86_64-unknown-linux-gnu/lib:/nix/store/ggqfrwgzpr3v3dkvh4cnmhymnvf6cqja-gcc-14-20241116-lib/lib' NUM_JOBS=24 OPT_LEVEL=3 OUT_DIR=/home/jfredett/code/rust-gpu-ex/target/debug/build/spirt-3f7c40ab87ca3f32/out PROFILE=debug RUSTC=rustc RUSTDOC=rustdoc TARGET=x86_64-unknown-linux-gnu /home/jfredett/code/rust-gpu-ex/target/debug/build/spirt-60ed7361ec24a1c6/build-script-build`
[spirt 0.4.0] cargo:rerun-if-changed=build.rs
[spirt 0.4.0] cargo:rerun-if-changed=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirt-0.4.0/khronos-spec/SPIRV-Headers/include/spirv/unified1
   Compiling autocfg v1.4.0
     Running `CARGO=/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/bin/cargo CARGO_CRATE_NAME=autocfg CARGO_MANIFEST_DIR=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/autocfg-1.4.0 CARGO_MANIFEST_PATH=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/autocfg-1.4.0/Cargo.toml CARGO_PKG_AUTHORS='Josh Stone <cuviper@gmail.com>' CARGO_PKG_DESCRIPTION='Automatic cfg for Rust compiler features' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='Apache-2.0 OR MIT' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=autocfg CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/cuviper/autocfg' CARGO_PKG_RUST_VERSION=1.0 CARGO_PKG_VERSION=1.4.0 CARGO_PKG_VERSION_MAJOR=1 CARGO_PKG_VERSION_MINOR=4 CARGO_PKG_VERSION_PATCH=0 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/jfredett/code/rust-gpu-ex/target/debug/deps:/nix/store/ggqfrwgzpr3v3dkvh4cnmhymnvf6cqja-gcc-14-20241116-lib/lib' rustc --crate-name autocfg --edition=2015 /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/autocfg-1.4.0/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=3 -C embed-bitcode=no -C debug-assertions=on --check-cfg 'cfg(docsrs)' --check-cfg 'cfg(feature, values())' -C metadata=f9101e019490a951 -C extra-filename=-f9101e019490a951 --out-dir /home/jfredett/code/rust-gpu-ex/target/debug/deps -L dependency=/home/jfredett/code/rust-gpu-ex/target/debug/deps --cap-lints warn`
   Compiling nu-ansi-term v0.50.1
     Running `CARGO=/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/bin/cargo CARGO_CRATE_NAME=nu_ansi_term CARGO_MANIFEST_DIR=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nu-ansi-term-0.50.1 CARGO_MANIFEST_PATH=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nu-ansi-term-0.50.1/Cargo.toml CARGO_PKG_AUTHORS='ogham@bsago.me:Ryan Scheel (Havvy) <ryan.havvy@gmail.com>:Josh Triplett <josh@joshtriplett.org>:The Nushell Project Developers' CARGO_PKG_DESCRIPTION='Library for ANSI terminal colors and styles (bold, underline)' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE=MIT CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=nu-ansi-term CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/nushell/nu-ansi-term' CARGO_PKG_RUST_VERSION=1.62.1 CARGO_PKG_VERSION=0.50.1 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=50 CARGO_PKG_VERSION_PATCH=1 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/jfredett/code/rust-gpu-ex/target/debug/deps:/nix/store/ggqfrwgzpr3v3dkvh4cnmhymnvf6cqja-gcc-14-20241116-lib/lib' rustc --crate-name nu_ansi_term --edition=2021 /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/nu-ansi-term-0.50.1/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=3 -C embed-bitcode=no -C debug-assertions=on --check-cfg 'cfg(docsrs)' --check-cfg 'cfg(feature, values("derive_serde_style", "gnu_legacy", "serde"))' -C metadata=b87c3e770460a3e7 -C extra-filename=-b87c3e770460a3e7 --out-dir /home/jfredett/code/rust-gpu-ex/target/debug/deps -L dependency=/home/jfredett/code/rust-gpu-ex/target/debug/deps --cap-lints warn`
warning: `sharded-slab` (lib) generated 105 warnings
     Running `CARGO=/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/bin/cargo CARGO_CFG_FMT_DEBUG=full CARGO_CFG_OVERFLOW_CHECKS='' CARGO_CFG_PANIC=unwind CARGO_CFG_RELOCATION_MODEL=pic CARGO_CFG_TARGET_ABI='' CARGO_CFG_TARGET_ARCH=x86_64 CARGO_CFG_TARGET_ENDIAN=little CARGO_CFG_TARGET_ENV=gnu CARGO_CFG_TARGET_FAMILY=unix CARGO_CFG_TARGET_FEATURE=fxsr,sse,sse2 CARGO_CFG_TARGET_HAS_ATOMIC=16,32,64,8,ptr CARGO_CFG_TARGET_HAS_ATOMIC_EQUAL_ALIGNMENT=16,32,64,8,ptr CARGO_CFG_TARGET_HAS_ATOMIC_LOAD_STORE=16,32,64,8,ptr CARGO_CFG_TARGET_OS=linux CARGO_CFG_TARGET_POINTER_WIDTH=64 CARGO_CFG_TARGET_THREAD_LOCAL='' CARGO_CFG_TARGET_VENDOR=unknown CARGO_CFG_UB_CHECKS='' CARGO_CFG_UNIX='' CARGO_ENCODED_RUSTFLAGS='' CARGO_FEATURE_CLONE_IMPLS=1 CARGO_FEATURE_DEFAULT=1 CARGO_FEATURE_DERIVE=1 CARGO_FEATURE_FULL=1 CARGO_FEATURE_PARSING=1 CARGO_FEATURE_PRINTING=1 CARGO_FEATURE_PROC_MACRO=1 CARGO_FEATURE_QUOTE=1 CARGO_FEATURE_VISIT_MUT=1 CARGO_MANIFEST_DIR=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109 CARGO_MANIFEST_PATH=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/Cargo.toml CARGO_PKG_AUTHORS='David Tolnay <dtolnay@gmail.com>' CARGO_PKG_DESCRIPTION='Parser for Rust source code' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=syn CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/dtolnay/syn' CARGO_PKG_RUST_VERSION=1.31 CARGO_PKG_VERSION=1.0.109 CARGO_PKG_VERSION_MAJOR=1 CARGO_PKG_VERSION_MINOR=0 CARGO_PKG_VERSION_PATCH=109 CARGO_PKG_VERSION_PRE='' DEBUG=false HOST=x86_64-unknown-linux-gnu LD_LIBRARY_PATH='/home/jfredett/code/rust-gpu-ex/target/debug/deps:/home/jfredett/code/rust-gpu-ex/target/debug:/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/lib/rustlib/x86_64-unknown-linux-gnu/lib:/nix/store/ggqfrwgzpr3v3dkvh4cnmhymnvf6cqja-gcc-14-20241116-lib/lib' NUM_JOBS=24 OPT_LEVEL=3 OUT_DIR=/home/jfredett/code/rust-gpu-ex/target/debug/build/syn-7a95e33eac06eefe/out PROFILE=debug RUSTC=rustc RUSTDOC=rustdoc TARGET=x86_64-unknown-linux-gnu /home/jfredett/code/rust-gpu-ex/target/debug/build/syn-4a769d0e934da471/build-script-build`
   Compiling crossbeam-epoch v0.9.18
     Running `CARGO=/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/bin/cargo CARGO_CRATE_NAME=crossbeam_epoch CARGO_MANIFEST_DIR=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/crossbeam-epoch-0.9.18 CARGO_MANIFEST_PATH=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/crossbeam-epoch-0.9.18/Cargo.toml CARGO_PKG_AUTHORS='' CARGO_PKG_DESCRIPTION='Epoch-based garbage collection' CARGO_PKG_HOMEPAGE='https://github.com/crossbeam-rs/crossbeam/tree/master/crossbeam-epoch' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=crossbeam-epoch CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/crossbeam-rs/crossbeam' CARGO_PKG_RUST_VERSION=1.61 CARGO_PKG_VERSION=0.9.18 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=9 CARGO_PKG_VERSION_PATCH=18 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/jfredett/code/rust-gpu-ex/target/debug/deps:/nix/store/ggqfrwgzpr3v3dkvh4cnmhymnvf6cqja-gcc-14-20241116-lib/lib' rustc --crate-name crossbeam_epoch --edition=2021 /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/crossbeam-epoch-0.9.18/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no -C debuginfo=2 --cfg 'feature="alloc"' --cfg 'feature="std"' --check-cfg 'cfg(docsrs)' --check-cfg 'cfg(feature, values("alloc", "default", "loom", "loom-crate", "nightly", "std"))' -C metadata=0242c05ec84035a4 -C extra-filename=-0242c05ec84035a4 --out-dir /home/jfredett/code/rust-gpu-ex/target/debug/deps -L dependency=/home/jfredett/code/rust-gpu-ex/target/debug/deps --extern crossbeam_utils=/home/jfredett/code/rust-gpu-ex/target/debug/deps/libcrossbeam_utils-b8a806ea53dde461.rmeta --cap-lints warn`
     Running `CARGO=/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/bin/cargo CARGO_CRATE_NAME=libm CARGO_MANIFEST_DIR=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/libm-0.2.11 CARGO_MANIFEST_PATH=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/libm-0.2.11/Cargo.toml CARGO_PKG_AUTHORS='Jorge Aparicio <jorge@japaric.io>' CARGO_PKG_DESCRIPTION='libm in pure Rust' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='MIT AND (MIT OR Apache-2.0)' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=libm CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/rust-lang/libm' CARGO_PKG_RUST_VERSION=1.63 CARGO_PKG_VERSION=0.2.11 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=2 CARGO_PKG_VERSION_PATCH=11 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/jfredett/code/rust-gpu-ex/target/debug/deps:/nix/store/ggqfrwgzpr3v3dkvh4cnmhymnvf6cqja-gcc-14-20241116-lib/lib' OUT_DIR=/home/jfredett/code/rust-gpu-ex/target/debug/build/libm-4f01587d3e733695/out rustc --crate-name libm --edition=2021 /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/libm-0.2.11/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no -C debuginfo=2 --cfg 'feature="default"' --check-cfg 'cfg(docsrs)' --check-cfg 'cfg(feature, values("default", "force-soft-floats", "unstable"))' -C metadata=7b2adc15df4485fe -C extra-filename=-7b2adc15df4485fe --out-dir /home/jfredett/code/rust-gpu-ex/target/debug/deps -L dependency=/home/jfredett/code/rust-gpu-ex/target/debug/deps --cap-lints warn --check-cfg 'cfg(assert_no_panic)' --check-cfg 'cfg(feature, values("unstable"))' --check-cfg 'cfg(feature, values("checked"))'`
   Compiling quote v1.0.38
     Running `CARGO=/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/bin/cargo CARGO_CRATE_NAME=quote CARGO_MANIFEST_DIR=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/quote-1.0.38 CARGO_MANIFEST_PATH=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/quote-1.0.38/Cargo.toml CARGO_PKG_AUTHORS='David Tolnay <dtolnay@gmail.com>' CARGO_PKG_DESCRIPTION='Quasi-quoting macro quote'\!'(...)' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=quote CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/dtolnay/quote' CARGO_PKG_RUST_VERSION=1.56 CARGO_PKG_VERSION=1.0.38 CARGO_PKG_VERSION_MAJOR=1 CARGO_PKG_VERSION_MINOR=0 CARGO_PKG_VERSION_PATCH=38 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/jfredett/code/rust-gpu-ex/target/debug/deps:/nix/store/ggqfrwgzpr3v3dkvh4cnmhymnvf6cqja-gcc-14-20241116-lib/lib' rustc --crate-name quote --edition=2018 /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/quote-1.0.38/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=3 -C embed-bitcode=no -C debug-assertions=on --cfg 'feature="default"' --cfg 'feature="proc-macro"' --check-cfg 'cfg(docsrs)' --check-cfg 'cfg(feature, values("default", "proc-macro"))' -C metadata=d9aa7c945a8df305 -C extra-filename=-d9aa7c945a8df305 --out-dir /home/jfredett/code/rust-gpu-ex/target/debug/deps -L dependency=/home/jfredett/code/rust-gpu-ex/target/debug/deps --extern proc_macro2=/home/jfredett/code/rust-gpu-ex/target/debug/deps/libproc_macro2-2990a941f70f10f3.rmeta --cap-lints warn`
   Compiling ahash v0.8.11
     Running `CARGO=/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/bin/cargo CARGO_CRATE_NAME=build_script_build CARGO_MANIFEST_DIR=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ahash-0.8.11 CARGO_MANIFEST_PATH=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ahash-0.8.11/Cargo.toml CARGO_PKG_AUTHORS='Tom Kaitchuck <Tom.Kaitchuck@gmail.com>' CARGO_PKG_DESCRIPTION='A non-cryptographic hash function using AES-NI for high performance' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=ahash CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/tkaitchuck/ahash' CARGO_PKG_RUST_VERSION=1.60.0 CARGO_PKG_VERSION=0.8.11 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=8 CARGO_PKG_VERSION_PATCH=11 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/jfredett/code/rust-gpu-ex/target/debug/deps:/nix/store/ggqfrwgzpr3v3dkvh4cnmhymnvf6cqja-gcc-14-20241116-lib/lib' rustc --crate-name build_script_build --edition=2018 /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ahash-0.8.11/build.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type bin --emit=dep-info,link -C opt-level=3 -C embed-bitcode=no -C debug-assertions=on --cfg 'feature="default"' --cfg 'feature="getrandom"' --cfg 'feature="no-rng"' --cfg 'feature="runtime-rng"' --cfg 'feature="std"' --check-cfg 'cfg(docsrs)' --check-cfg 'cfg(feature, values("atomic-polyfill", "compile-time-rng", "const-random", "default", "getrandom", "nightly-arm-aes", "no-rng", "runtime-rng", "serde", "std"))' -C metadata=8a645b438e1e52ac -C extra-filename=-8a645b438e1e52ac --out-dir /home/jfredett/code/rust-gpu-ex/target/debug/build/ahash-8a645b438e1e52ac -L dependency=/home/jfredett/code/rust-gpu-ex/target/debug/deps --extern version_check=/home/jfredett/code/rust-gpu-ex/target/debug/deps/libversion_check-b5b2fb4bb4bf2bf5.rlib --cap-lints warn`
warning: unexpected `cfg` condition name: `crossbeam_loom`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/crossbeam-epoch-0.9.18/src/lib.rs:66:7
   |
66 | #[cfg(crossbeam_loom)]
   |       ^^^^^^^^^^^^^^
   |
   = help: expected names are: `clippy`, `debug_assertions`, `doc`, `docsrs`, `doctest`, `feature`, `fmt_debug`, `miri`, `overflow_checks`, `panic`, `proc_macro`, `relocation_model`, `rustfmt`, `sanitize`, `sanitizer_cfi_generalize_pointers`, `sanitizer_cfi_normalize_integers`, `target_abi`, `target_arch`, `target_endian`, `target_env`, `target_family`, `target_feature`, `target_has_atomic`, `target_has_atomic_equal_alignment`, `target_has_atomic_load_store`, `target_os`, `target_pointer_width`, `target_thread_local`, `target_vendor`, `test`, `ub_checks`, `unix`, and `windows`
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(crossbeam_loom)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(crossbeam_loom)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: `#[warn(unexpected_cfgs)]` on by default

warning: unexpected `cfg` condition name: `crossbeam_loom`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/crossbeam-epoch-0.9.18/src/lib.rs:69:7
   |
69 | #[cfg(crossbeam_loom)]
   |       ^^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(crossbeam_loom)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(crossbeam_loom)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `crossbeam_loom`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/crossbeam-epoch-0.9.18/src/lib.rs:91:11
   |
91 | #[cfg(not(crossbeam_loom))]
   |           ^^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(crossbeam_loom)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(crossbeam_loom)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `crossbeam_loom`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/crossbeam-epoch-0.9.18/src/atomic.rs:1675:21
     |
1675 | #[cfg(all(test, not(crossbeam_loom)))]
     |                     ^^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(crossbeam_loom)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(crossbeam_loom)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `crossbeam_loom`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/crossbeam-epoch-0.9.18/src/atomic.rs:350:15
    |
350 |     #[cfg(not(crossbeam_loom))]
    |               ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(crossbeam_loom)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(crossbeam_loom)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `crossbeam_loom`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/crossbeam-epoch-0.9.18/src/atomic.rs:358:11
    |
358 |     #[cfg(crossbeam_loom)]
    |           ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(crossbeam_loom)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(crossbeam_loom)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `crossbeam_loom`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/crossbeam-epoch-0.9.18/src/collector.rs:112:21
    |
112 | #[cfg(all(test, not(crossbeam_loom)))]
    |                     ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(crossbeam_loom)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(crossbeam_loom)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `crossbeam_loom`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/crossbeam-epoch-0.9.18/src/deferred.rs:90:21
   |
90 | #[cfg(all(test, not(crossbeam_loom)))]
   |                     ^^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(crossbeam_loom)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(crossbeam_loom)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `crossbeam_sanitize`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/crossbeam-epoch-0.9.18/src/internal.rs:56:15
   |
56 | #[cfg(not(any(crossbeam_sanitize, miri)))]
   |               ^^^^^^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(crossbeam_sanitize)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(crossbeam_sanitize)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `crossbeam_sanitize`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/crossbeam-epoch-0.9.18/src/internal.rs:59:11
   |
59 | #[cfg(any(crossbeam_sanitize, miri))]
   |           ^^^^^^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(crossbeam_sanitize)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(crossbeam_sanitize)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `crossbeam_sanitize`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/crossbeam-epoch-0.9.18/src/internal.rs:300:15
    |
300 | #[cfg(not(any(crossbeam_sanitize, miri)))] // `crossbeam_sanitize` and `miri` reduce the size of `Local`
    |               ^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(crossbeam_sanitize)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(crossbeam_sanitize)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `crossbeam_loom`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/crossbeam-epoch-0.9.18/src/internal.rs:557:21
    |
557 | #[cfg(all(test, not(crossbeam_loom)))]
    |                     ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(crossbeam_loom)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(crossbeam_loom)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `crossbeam_sanitize`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/crossbeam-epoch-0.9.18/src/internal.rs:202:29
    |
202 |         let steps = if cfg!(crossbeam_sanitize) {
    |                             ^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(crossbeam_sanitize)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(crossbeam_sanitize)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `crossbeam_loom`
 --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/crossbeam-epoch-0.9.18/src/sync/mod.rs:5:11
  |
5 | #[cfg(not(crossbeam_loom))]
  |           ^^^^^^^^^^^^^^
  |
  = help: consider using a Cargo feature instead
  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
           [lints.rust]
           unexpected_cfgs = { level = "warn", check-cfg = ['cfg(crossbeam_loom)'] }
  = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(crossbeam_loom)");` to the top of the `build.rs`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `crossbeam_loom`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/crossbeam-epoch-0.9.18/src/sync/list.rs:298:21
    |
298 | #[cfg(all(test, not(crossbeam_loom)))]
    |                     ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(crossbeam_loom)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(crossbeam_loom)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `crossbeam_loom`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/crossbeam-epoch-0.9.18/src/sync/queue.rs:217:21
    |
217 | #[cfg(all(test, not(crossbeam_loom)))]
    |                     ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(crossbeam_loom)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(crossbeam_loom)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `crossbeam_loom`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/crossbeam-epoch-0.9.18/src/default.rs:10:11
   |
10 | #[cfg(not(crossbeam_loom))]
   |           ^^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(crossbeam_loom)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(crossbeam_loom)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `crossbeam_loom`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/crossbeam-epoch-0.9.18/src/default.rs:64:21
   |
64 | #[cfg(all(test, not(crossbeam_loom)))]
   |                     ^^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(crossbeam_loom)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(crossbeam_loom)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `crossbeam_loom`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/crossbeam-epoch-0.9.18/src/default.rs:14:15
   |
14 |     #[cfg(not(crossbeam_loom))]
   |               ^^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(crossbeam_loom)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(crossbeam_loom)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `crossbeam_loom`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/crossbeam-epoch-0.9.18/src/default.rs:22:11
   |
22 |     #[cfg(crossbeam_loom)]
   |           ^^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(crossbeam_loom)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(crossbeam_loom)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

     Running `CARGO=/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/bin/cargo CARGO_CFG_FMT_DEBUG=full CARGO_CFG_OVERFLOW_CHECKS='' CARGO_CFG_PANIC=unwind CARGO_CFG_RELOCATION_MODEL=pic CARGO_CFG_TARGET_ABI='' CARGO_CFG_TARGET_ARCH=x86_64 CARGO_CFG_TARGET_ENDIAN=little CARGO_CFG_TARGET_ENV=gnu CARGO_CFG_TARGET_FAMILY=unix CARGO_CFG_TARGET_FEATURE=fxsr,sse,sse2 CARGO_CFG_TARGET_HAS_ATOMIC=16,32,64,8,ptr CARGO_CFG_TARGET_HAS_ATOMIC_EQUAL_ALIGNMENT=16,32,64,8,ptr CARGO_CFG_TARGET_HAS_ATOMIC_LOAD_STORE=16,32,64,8,ptr CARGO_CFG_TARGET_OS=linux CARGO_CFG_TARGET_POINTER_WIDTH=64 CARGO_CFG_TARGET_THREAD_LOCAL='' CARGO_CFG_TARGET_VENDOR=unknown CARGO_CFG_UB_CHECKS='' CARGO_CFG_UNIX='' CARGO_ENCODED_RUSTFLAGS='' CARGO_FEATURE_ALLOC=1 CARGO_FEATURE_ALL_APIS=1 CARGO_FEATURE_DEFAULT=1 CARGO_FEATURE_EVENT=1 CARGO_FEATURE_FS=1 CARGO_FEATURE_IO_URING=1 CARGO_FEATURE_ITOA=1 CARGO_FEATURE_LIBC_EXTRA_TRAITS=1 CARGO_FEATURE_MM=1 CARGO_FEATURE_MOUNT=1 CARGO_FEATURE_NET=1 CARGO_FEATURE_ONCE_CELL=1 CARGO_FEATURE_PARAM=1 CARGO_FEATURE_PIPE=1 CARGO_FEATURE_PROCESS=1 CARGO_FEATURE_PROCFS=1 CARGO_FEATURE_PTY=1 CARGO_FEATURE_RAND=1 CARGO_FEATURE_RUNTIME=1 CARGO_FEATURE_SHM=1 CARGO_FEATURE_STD=1 CARGO_FEATURE_STDIO=1 CARGO_FEATURE_SYSTEM=1 CARGO_FEATURE_TERMIOS=1 CARGO_FEATURE_THREAD=1 CARGO_FEATURE_TIME=1 CARGO_FEATURE_USE_LIBC_AUXV=1 CARGO_MANIFEST_DIR=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rustix-0.38.44 CARGO_MANIFEST_PATH=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rustix-0.38.44/Cargo.toml CARGO_PKG_AUTHORS='Dan Gohman <dev@sunfishcode.online>:Jakub Konka <kubkon@jakubkonka.com>' CARGO_PKG_DESCRIPTION='Safe Rust bindings to POSIX/Unix/Linux/Winsock-like syscalls' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='Apache-2.0 WITH LLVM-exception OR Apache-2.0 OR MIT' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=rustix CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/bytecodealliance/rustix' CARGO_PKG_RUST_VERSION=1.63 CARGO_PKG_VERSION=0.38.44 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=38 CARGO_PKG_VERSION_PATCH=44 CARGO_PKG_VERSION_PRE='' DEBUG=false HOST=x86_64-unknown-linux-gnu LD_LIBRARY_PATH='/home/jfredett/code/rust-gpu-ex/target/debug/deps:/home/jfredett/code/rust-gpu-ex/target/debug:/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/lib/rustlib/x86_64-unknown-linux-gnu/lib:/nix/store/ggqfrwgzpr3v3dkvh4cnmhymnvf6cqja-gcc-14-20241116-lib/lib' NUM_JOBS=24 OPT_LEVEL=3 OUT_DIR=/home/jfredett/code/rust-gpu-ex/target/debug/build/rustix-f01753ddc04a9351/out PROFILE=debug RUSTC=rustc RUSTDOC=rustdoc TARGET=x86_64-unknown-linux-gnu /home/jfredett/code/rust-gpu-ex/target/debug/build/rustix-0a131afb7c3e5ec9/build-script-build`
[rustix 0.38.44] cargo:rerun-if-changed=build.rs
[rustix 0.38.44] cargo:rustc-cfg=static_assertions
[rustix 0.38.44] cargo:rustc-cfg=linux_raw
[rustix 0.38.44] cargo:rustc-cfg=linux_like
[rustix 0.38.44] cargo:rustc-cfg=linux_kernel
[rustix 0.38.44] cargo:rerun-if-env-changed=CARGO_CFG_RUSTIX_USE_EXPERIMENTAL_ASM
[rustix 0.38.44] cargo:rerun-if-env-changed=CARGO_CFG_RUSTIX_USE_LIBC
[rustix 0.38.44] cargo:rerun-if-env-changed=CARGO_FEATURE_USE_LIBC
[rustix 0.38.44] cargo:rerun-if-env-changed=CARGO_FEATURE_RUSTC_DEP_OF_STD
[rustix 0.38.44] cargo:rerun-if-env-changed=CARGO_CFG_MIRI
   Compiling rspirv v0.12.0+sdk-1.3.268.0
     Running `CARGO=/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/bin/cargo CARGO_CRATE_NAME=rspirv CARGO_MANIFEST_DIR=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rspirv-0.12.0+sdk-1.3.268.0 CARGO_MANIFEST_PATH=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rspirv-0.12.0+sdk-1.3.268.0/Cargo.toml CARGO_PKG_AUTHORS='Lei Zhang <antiagainst@gmail.com>' CARGO_PKG_DESCRIPTION='Rust library APIs for SPIR-V module manipulation' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE=Apache-2.0 CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=rspirv CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/gfx-rs/rspirv' CARGO_PKG_RUST_VERSION='' CARGO_PKG_VERSION=0.12.0+sdk-1.3.268.0 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=12 CARGO_PKG_VERSION_PATCH=0 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/jfredett/code/rust-gpu-ex/target/debug/deps:/nix/store/ggqfrwgzpr3v3dkvh4cnmhymnvf6cqja-gcc-14-20241116-lib/lib' rustc --crate-name rspirv --edition=2018 /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rspirv-0.12.0+sdk-1.3.268.0/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=3 -C embed-bitcode=no -C debug-assertions=on --check-cfg 'cfg(docsrs)' --check-cfg 'cfg(feature, values("clippy"))' -C metadata=606bca2a4698fce6 -C extra-filename=-606bca2a4698fce6 --out-dir /home/jfredett/code/rust-gpu-ex/target/debug/deps -L dependency=/home/jfredett/code/rust-gpu-ex/target/debug/deps --extern rustc_hash=/home/jfredett/code/rust-gpu-ex/target/debug/deps/librustc_hash-a39a34f805bd6bd5.rmeta --extern spirv=/home/jfredett/code/rust-gpu-ex/target/debug/deps/libspirv-3a869eb6f631c6fe.rmeta --cap-lints warn`
   Compiling syn v2.0.98
     Running `CARGO=/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/bin/cargo CARGO_CRATE_NAME=syn CARGO_MANIFEST_DIR=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-2.0.98 CARGO_MANIFEST_PATH=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-2.0.98/Cargo.toml CARGO_PKG_AUTHORS='David Tolnay <dtolnay@gmail.com>' CARGO_PKG_DESCRIPTION='Parser for Rust source code' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=syn CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/dtolnay/syn' CARGO_PKG_RUST_VERSION=1.61 CARGO_PKG_VERSION=2.0.98 CARGO_PKG_VERSION_MAJOR=2 CARGO_PKG_VERSION_MINOR=0 CARGO_PKG_VERSION_PATCH=98 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/jfredett/code/rust-gpu-ex/target/debug/deps:/nix/store/ggqfrwgzpr3v3dkvh4cnmhymnvf6cqja-gcc-14-20241116-lib/lib' rustc --crate-name syn --edition=2021 /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-2.0.98/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=3 -C embed-bitcode=no -C debug-assertions=on --cfg 'feature="clone-impls"' --cfg 'feature="default"' --cfg 'feature="derive"' --cfg 'feature="extra-traits"' --cfg 'feature="full"' --cfg 'feature="parsing"' --cfg 'feature="printing"' --cfg 'feature="proc-macro"' --cfg 'feature="visit-mut"' --check-cfg 'cfg(docsrs)' --check-cfg 'cfg(feature, values("clone-impls", "default", "derive", "extra-traits", "fold", "full", "parsing", "printing", "proc-macro", "test", "visit", "visit-mut"))' -C metadata=19fd017e5184929f -C extra-filename=-19fd017e5184929f --out-dir /home/jfredett/code/rust-gpu-ex/target/debug/deps -L dependency=/home/jfredett/code/rust-gpu-ex/target/debug/deps --extern proc_macro2=/home/jfredett/code/rust-gpu-ex/target/debug/deps/libproc_macro2-2990a941f70f10f3.rmeta --extern quote=/home/jfredett/code/rust-gpu-ex/target/debug/deps/libquote-d9aa7c945a8df305.rmeta --extern unicode_ident=/home/jfredett/code/rust-gpu-ex/target/debug/deps/libunicode_ident-ddd6fc7b9b0cd3b9.rmeta --cap-lints warn`
     Running `CARGO=/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/bin/cargo CARGO_CFG_FMT_DEBUG=full CARGO_CFG_OVERFLOW_CHECKS='' CARGO_CFG_PANIC=unwind CARGO_CFG_RELOCATION_MODEL=pic CARGO_CFG_TARGET_ABI='' CARGO_CFG_TARGET_ARCH=x86_64 CARGO_CFG_TARGET_ENDIAN=little CARGO_CFG_TARGET_ENV=gnu CARGO_CFG_TARGET_FAMILY=unix CARGO_CFG_TARGET_FEATURE=fxsr,sse,sse2 CARGO_CFG_TARGET_HAS_ATOMIC=16,32,64,8,ptr CARGO_CFG_TARGET_HAS_ATOMIC_EQUAL_ALIGNMENT=16,32,64,8,ptr CARGO_CFG_TARGET_HAS_ATOMIC_LOAD_STORE=16,32,64,8,ptr CARGO_CFG_TARGET_OS=linux CARGO_CFG_TARGET_POINTER_WIDTH=64 CARGO_CFG_TARGET_THREAD_LOCAL='' CARGO_CFG_TARGET_VENDOR=unknown CARGO_CFG_UB_CHECKS='' CARGO_CFG_UNIX='' CARGO_ENCODED_RUSTFLAGS='' CARGO_FEATURE_DEFAULT=1 CARGO_FEATURE_GETRANDOM=1 CARGO_FEATURE_NO_RNG=1 CARGO_FEATURE_RUNTIME_RNG=1 CARGO_FEATURE_STD=1 CARGO_MANIFEST_DIR=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ahash-0.8.11 CARGO_MANIFEST_PATH=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ahash-0.8.11/Cargo.toml CARGO_PKG_AUTHORS='Tom Kaitchuck <Tom.Kaitchuck@gmail.com>' CARGO_PKG_DESCRIPTION='A non-cryptographic hash function using AES-NI for high performance' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=ahash CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/tkaitchuck/ahash' CARGO_PKG_RUST_VERSION=1.60.0 CARGO_PKG_VERSION=0.8.11 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=8 CARGO_PKG_VERSION_PATCH=11 CARGO_PKG_VERSION_PRE='' DEBUG=false HOST=x86_64-unknown-linux-gnu LD_LIBRARY_PATH='/home/jfredett/code/rust-gpu-ex/target/debug/deps:/home/jfredett/code/rust-gpu-ex/target/debug:/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/lib/rustlib/x86_64-unknown-linux-gnu/lib:/nix/store/ggqfrwgzpr3v3dkvh4cnmhymnvf6cqja-gcc-14-20241116-lib/lib' NUM_JOBS=24 OPT_LEVEL=3 OUT_DIR=/home/jfredett/code/rust-gpu-ex/target/debug/build/ahash-0ec5ac452527d6ee/out PROFILE=debug RUSTC=rustc RUSTDOC=rustdoc TARGET=x86_64-unknown-linux-gnu /home/jfredett/code/rust-gpu-ex/target/debug/build/ahash-8a645b438e1e52ac/build-script-build`
[ahash 0.8.11] cargo:rerun-if-changed=build.rs
[ahash 0.8.11] cargo:rustc-cfg=feature="specialize"
[ahash 0.8.11] cargo:rustc-cfg=feature="folded_multiply"
   Compiling rayon-core v1.12.1
     Running `CARGO=/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/bin/cargo CARGO_CRATE_NAME=build_script_build CARGO_MANIFEST_DIR=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rayon-core-1.12.1 CARGO_MANIFEST_PATH=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rayon-core-1.12.1/Cargo.toml CARGO_PKG_AUTHORS='Niko Matsakis <niko@alum.mit.edu>:Josh Stone <cuviper@gmail.com>' CARGO_PKG_DESCRIPTION='Core APIs for Rayon' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=rayon-core CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/rayon-rs/rayon' CARGO_PKG_RUST_VERSION=1.63 CARGO_PKG_VERSION=1.12.1 CARGO_PKG_VERSION_MAJOR=1 CARGO_PKG_VERSION_MINOR=12 CARGO_PKG_VERSION_PATCH=1 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/jfredett/code/rust-gpu-ex/target/debug/deps:/nix/store/ggqfrwgzpr3v3dkvh4cnmhymnvf6cqja-gcc-14-20241116-lib/lib' rustc --crate-name build_script_build --edition=2021 /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rayon-core-1.12.1/build.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type bin --emit=dep-info,link -C opt-level=3 -C embed-bitcode=no -C debug-assertions=on --check-cfg 'cfg(docsrs)' --check-cfg 'cfg(feature, values("web_spin_lock"))' -C metadata=b4b45cf20c214092 -C extra-filename=-b4b45cf20c214092 --out-dir /home/jfredett/code/rust-gpu-ex/target/debug/build/rayon-core-b4b45cf20c214092 -L dependency=/home/jfredett/code/rust-gpu-ex/target/debug/deps --cap-lints warn`
   Compiling rustc-demangle v0.1.24
     Running `CARGO=/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/bin/cargo CARGO_CRATE_NAME=rustc_demangle CARGO_MANIFEST_DIR=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rustc-demangle-0.1.24 CARGO_MANIFEST_PATH=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rustc-demangle-0.1.24/Cargo.toml CARGO_PKG_AUTHORS='Alex Crichton <alex@alexcrichton.com>' CARGO_PKG_DESCRIPTION='Rust compiler symbol demangling.
' CARGO_PKG_HOMEPAGE='https://github.com/rust-lang/rustc-demangle' CARGO_PKG_LICENSE=MIT/Apache-2.0 CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=rustc-demangle CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/rust-lang/rustc-demangle' CARGO_PKG_RUST_VERSION='' CARGO_PKG_VERSION=0.1.24 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=1 CARGO_PKG_VERSION_PATCH=24 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/jfredett/code/rust-gpu-ex/target/debug/deps:/nix/store/ggqfrwgzpr3v3dkvh4cnmhymnvf6cqja-gcc-14-20241116-lib/lib' rustc --crate-name rustc_demangle --edition=2015 /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rustc-demangle-0.1.24/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=3 -C embed-bitcode=no -C debug-assertions=on --check-cfg 'cfg(docsrs)' --check-cfg 'cfg(feature, values("compiler_builtins", "core", "rustc-dep-of-std", "std"))' -C metadata=5121dd40ee01dc14 -C extra-filename=-5121dd40ee01dc14 --out-dir /home/jfredett/code/rust-gpu-ex/target/debug/deps -L dependency=/home/jfredett/code/rust-gpu-ex/target/debug/deps --cap-lints warn`
warning: `crossbeam-epoch` (lib) generated 20 warnings
   Compiling ar v0.9.0
     Running `CARGO=/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/bin/cargo CARGO_CRATE_NAME=ar CARGO_MANIFEST_DIR=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ar-0.9.0 CARGO_MANIFEST_PATH=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ar-0.9.0/Cargo.toml CARGO_PKG_AUTHORS='Matthew D. Steele <mdsteele@alum.mit.edu>' CARGO_PKG_DESCRIPTION='A library for encoding/decoding Unix archive files.' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE=MIT CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=ar CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/mdsteele/rust-ar' CARGO_PKG_RUST_VERSION='' CARGO_PKG_VERSION=0.9.0 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=9 CARGO_PKG_VERSION_PATCH=0 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/jfredett/code/rust-gpu-ex/target/debug/deps:/nix/store/ggqfrwgzpr3v3dkvh4cnmhymnvf6cqja-gcc-14-20241116-lib/lib' rustc --crate-name ar --edition=2015 /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ar-0.9.0/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=3 -C embed-bitcode=no -C debug-assertions=on --check-cfg 'cfg(docsrs)' --check-cfg 'cfg(feature, values())' -C metadata=32d3c87a23ef7059 -C extra-filename=-32d3c87a23ef7059 --out-dir /home/jfredett/code/rust-gpu-ex/target/debug/deps -L dependency=/home/jfredett/code/rust-gpu-ex/target/debug/deps --cap-lints warn`
     Running `CARGO=/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/bin/cargo CARGO_CFG_FMT_DEBUG=full CARGO_CFG_OVERFLOW_CHECKS='' CARGO_CFG_PANIC=unwind CARGO_CFG_RELOCATION_MODEL=pic CARGO_CFG_TARGET_ABI='' CARGO_CFG_TARGET_ARCH=x86_64 CARGO_CFG_TARGET_ENDIAN=little CARGO_CFG_TARGET_ENV=gnu CARGO_CFG_TARGET_FAMILY=unix CARGO_CFG_TARGET_FEATURE=fxsr,sse,sse2 CARGO_CFG_TARGET_HAS_ATOMIC=16,32,64,8,ptr CARGO_CFG_TARGET_HAS_ATOMIC_EQUAL_ALIGNMENT=16,32,64,8,ptr CARGO_CFG_TARGET_HAS_ATOMIC_LOAD_STORE=16,32,64,8,ptr CARGO_CFG_TARGET_OS=linux CARGO_CFG_TARGET_POINTER_WIDTH=64 CARGO_CFG_TARGET_THREAD_LOCAL='' CARGO_CFG_TARGET_VENDOR=unknown CARGO_CFG_UB_CHECKS='' CARGO_CFG_UNIX='' CARGO_ENCODED_RUSTFLAGS='' CARGO_MANIFEST_DIR=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rayon-core-1.12.1 CARGO_MANIFEST_LINKS=rayon-core CARGO_MANIFEST_PATH=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rayon-core-1.12.1/Cargo.toml CARGO_PKG_AUTHORS='Niko Matsakis <niko@alum.mit.edu>:Josh Stone <cuviper@gmail.com>' CARGO_PKG_DESCRIPTION='Core APIs for Rayon' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=rayon-core CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/rayon-rs/rayon' CARGO_PKG_RUST_VERSION=1.63 CARGO_PKG_VERSION=1.12.1 CARGO_PKG_VERSION_MAJOR=1 CARGO_PKG_VERSION_MINOR=12 CARGO_PKG_VERSION_PATCH=1 CARGO_PKG_VERSION_PRE='' DEBUG=true HOST=x86_64-unknown-linux-gnu LD_LIBRARY_PATH='/home/jfredett/code/rust-gpu-ex/target/debug/deps:/home/jfredett/code/rust-gpu-ex/target/debug:/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/lib/rustlib/x86_64-unknown-linux-gnu/lib:/nix/store/ggqfrwgzpr3v3dkvh4cnmhymnvf6cqja-gcc-14-20241116-lib/lib' NUM_JOBS=24 OPT_LEVEL=0 OUT_DIR=/home/jfredett/code/rust-gpu-ex/target/debug/build/rayon-core-e88dc35d16f2f8be/out PROFILE=debug RUSTC=rustc RUSTDOC=rustdoc TARGET=x86_64-unknown-linux-gnu /home/jfredett/code/rust-gpu-ex/target/debug/build/rayon-core-b4b45cf20c214092/build-script-build`
[rayon-core 1.12.1] cargo:rerun-if-changed=build.rs
   Compiling crossbeam-deque v0.8.6
     Running `CARGO=/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/bin/cargo CARGO_CRATE_NAME=crossbeam_deque CARGO_MANIFEST_DIR=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/crossbeam-deque-0.8.6 CARGO_MANIFEST_PATH=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/crossbeam-deque-0.8.6/Cargo.toml CARGO_PKG_AUTHORS='' CARGO_PKG_DESCRIPTION='Concurrent work-stealing deque' CARGO_PKG_HOMEPAGE='https://github.com/crossbeam-rs/crossbeam/tree/master/crossbeam-deque' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=crossbeam-deque CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/crossbeam-rs/crossbeam' CARGO_PKG_RUST_VERSION=1.61 CARGO_PKG_VERSION=0.8.6 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=8 CARGO_PKG_VERSION_PATCH=6 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/jfredett/code/rust-gpu-ex/target/debug/deps:/nix/store/ggqfrwgzpr3v3dkvh4cnmhymnvf6cqja-gcc-14-20241116-lib/lib' rustc --crate-name crossbeam_deque --edition=2021 /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/crossbeam-deque-0.8.6/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no -C debuginfo=2 --warn=unexpected_cfgs '--allow=clippy::lint_groups_priority' '--allow=clippy::declare_interior_mutable_const' --check-cfg 'cfg(crossbeam_loom)' --check-cfg 'cfg(crossbeam_sanitize)' --cfg 'feature="default"' --cfg 'feature="std"' --check-cfg 'cfg(docsrs)' --check-cfg 'cfg(feature, values("default", "std"))' -C metadata=23714a1a0a58c412 -C extra-filename=-23714a1a0a58c412 --out-dir /home/jfredett/code/rust-gpu-ex/target/debug/deps -L dependency=/home/jfredett/code/rust-gpu-ex/target/debug/deps --extern crossbeam_epoch=/home/jfredett/code/rust-gpu-ex/target/debug/deps/libcrossbeam_epoch-0242c05ec84035a4.rmeta --extern crossbeam_utils=/home/jfredett/code/rust-gpu-ex/target/debug/deps/libcrossbeam_utils-b8a806ea53dde461.rmeta --cap-lints warn`
     Running `CARGO=/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/bin/cargo CARGO_CRATE_NAME=syn CARGO_MANIFEST_DIR=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109 CARGO_MANIFEST_PATH=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/Cargo.toml CARGO_PKG_AUTHORS='David Tolnay <dtolnay@gmail.com>' CARGO_PKG_DESCRIPTION='Parser for Rust source code' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=syn CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/dtolnay/syn' CARGO_PKG_RUST_VERSION=1.31 CARGO_PKG_VERSION=1.0.109 CARGO_PKG_VERSION_MAJOR=1 CARGO_PKG_VERSION_MINOR=0 CARGO_PKG_VERSION_PATCH=109 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/jfredett/code/rust-gpu-ex/target/debug/deps:/nix/store/ggqfrwgzpr3v3dkvh4cnmhymnvf6cqja-gcc-14-20241116-lib/lib' OUT_DIR=/home/jfredett/code/rust-gpu-ex/target/debug/build/syn-7a95e33eac06eefe/out rustc --crate-name syn --edition=2018 /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=3 -C embed-bitcode=no -C debug-assertions=on --cfg 'feature="clone-impls"' --cfg 'feature="default"' --cfg 'feature="derive"' --cfg 'feature="full"' --cfg 'feature="parsing"' --cfg 'feature="printing"' --cfg 'feature="proc-macro"' --cfg 'feature="quote"' --cfg 'feature="visit-mut"' --check-cfg 'cfg(docsrs)' --check-cfg 'cfg(feature, values("clone-impls", "default", "derive", "extra-traits", "fold", "full", "parsing", "printing", "proc-macro", "quote", "test", "visit", "visit-mut"))' -C metadata=388639f3b5be02fa -C extra-filename=-388639f3b5be02fa --out-dir /home/jfredett/code/rust-gpu-ex/target/debug/deps -L dependency=/home/jfredett/code/rust-gpu-ex/target/debug/deps --extern proc_macro2=/home/jfredett/code/rust-gpu-ex/target/debug/deps/libproc_macro2-2990a941f70f10f3.rmeta --extern quote=/home/jfredett/code/rust-gpu-ex/target/debug/deps/libquote-d9aa7c945a8df305.rmeta --extern unicode_ident=/home/jfredett/code/rust-gpu-ex/target/debug/deps/libunicode_ident-ddd6fc7b9b0cd3b9.rmeta --cap-lints warn`
   Compiling spirv-std-types v0.9.0
     Running `CARGO=/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/bin/cargo CARGO_CRATE_NAME=spirv_std_types CARGO_MANIFEST_DIR=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-types-0.9.0 CARGO_MANIFEST_PATH=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-types-0.9.0/Cargo.toml CARGO_PKG_AUTHORS='Embark <opensource@embark-studios.com>' CARGO_PKG_DESCRIPTION='SPIR-V types shared between spirv-std and spirv-std-macros' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=spirv-std-types CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/EmbarkStudios/rust-gpu' CARGO_PKG_RUST_VERSION='' CARGO_PKG_VERSION=0.9.0 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=9 CARGO_PKG_VERSION_PATCH=0 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/jfredett/code/rust-gpu-ex/target/debug/deps:/nix/store/ggqfrwgzpr3v3dkvh4cnmhymnvf6cqja-gcc-14-20241116-lib/lib' rustc --crate-name spirv_std_types --edition=2021 /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-types-0.9.0/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=3 -C embed-bitcode=no -C debug-assertions=on --check-cfg 'cfg(docsrs)' --check-cfg 'cfg(feature, values())' -C metadata=8663783bcf3a59a0 -C extra-filename=-8663783bcf3a59a0 --out-dir /home/jfredett/code/rust-gpu-ex/target/debug/deps -L dependency=/home/jfredett/code/rust-gpu-ex/target/debug/deps --cap-lints warn`
warning: unexpected `cfg` condition value: `spirv`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-types-0.9.0/src/image_params.rs:69:11
   |
69 | #[cfg(not(target_arch = "spirv"))]
   |           ^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: `#[warn(unexpected_cfgs)]` on by default

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-types-0.9.0/src/image_params.rs:118:11
    |
118 | #[cfg(not(target_arch = "spirv"))]
    |           ^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: `spirv-std-types` (lib) generated 2 warnings
   Compiling jobserver v0.1.32
     Running `CARGO=/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/bin/cargo CARGO_CRATE_NAME=jobserver CARGO_MANIFEST_DIR=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/jobserver-0.1.32 CARGO_MANIFEST_PATH=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/jobserver-0.1.32/Cargo.toml CARGO_PKG_AUTHORS='Alex Crichton <alex@alexcrichton.com>' CARGO_PKG_DESCRIPTION='An implementation of the GNU Make jobserver for Rust.
' CARGO_PKG_HOMEPAGE='https://github.com/rust-lang/jobserver-rs' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=jobserver CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/rust-lang/jobserver-rs' CARGO_PKG_RUST_VERSION=1.63 CARGO_PKG_VERSION=0.1.32 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=1 CARGO_PKG_VERSION_PATCH=32 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/jfredett/code/rust-gpu-ex/target/debug/deps:/nix/store/ggqfrwgzpr3v3dkvh4cnmhymnvf6cqja-gcc-14-20241116-lib/lib' rustc --crate-name jobserver --edition=2021 /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/jobserver-0.1.32/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=3 -C embed-bitcode=no -C debug-assertions=on --check-cfg 'cfg(docsrs)' --check-cfg 'cfg(feature, values())' -C metadata=b6bc27d713a6d5e6 -C extra-filename=-b6bc27d713a6d5e6 --out-dir /home/jfredett/code/rust-gpu-ex/target/debug/deps -L dependency=/home/jfredett/code/rust-gpu-ex/target/debug/deps --extern libc=/home/jfredett/code/rust-gpu-ex/target/debug/deps/liblibc-67d069db6a8dae33.rmeta --cap-lints warn`
   Compiling getrandom v0.2.15
     Running `CARGO=/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/bin/cargo CARGO_CRATE_NAME=getrandom CARGO_MANIFEST_DIR=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/getrandom-0.2.15 CARGO_MANIFEST_PATH=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/getrandom-0.2.15/Cargo.toml CARGO_PKG_AUTHORS='The Rand Project Developers' CARGO_PKG_DESCRIPTION='A small cross-platform library for retrieving random data from system source' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=getrandom CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/rust-random/getrandom' CARGO_PKG_RUST_VERSION='' CARGO_PKG_VERSION=0.2.15 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=2 CARGO_PKG_VERSION_PATCH=15 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/jfredett/code/rust-gpu-ex/target/debug/deps:/nix/store/ggqfrwgzpr3v3dkvh4cnmhymnvf6cqja-gcc-14-20241116-lib/lib' rustc --crate-name getrandom --edition=2018 /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/getrandom-0.2.15/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=3 -C embed-bitcode=no -C debug-assertions=on --check-cfg 'cfg(docsrs)' --check-cfg 'cfg(feature, values("compiler_builtins", "core", "custom", "js", "js-sys", "linux_disable_fallback", "rdrand", "rustc-dep-of-std", "std", "test-in-browser", "wasm-bindgen"))' -C metadata=057539f4b24557ae -C extra-filename=-057539f4b24557ae --out-dir /home/jfredett/code/rust-gpu-ex/target/debug/deps -L dependency=/home/jfredett/code/rust-gpu-ex/target/debug/deps --extern cfg_if=/home/jfredett/code/rust-gpu-ex/target/debug/deps/libcfg_if-a56fbeab59b8aa84.rmeta --extern libc=/home/jfredett/code/rust-gpu-ex/target/debug/deps/liblibc-67d069db6a8dae33.rmeta --cap-lints warn`
   Compiling gimli v0.30.0
     Running `CARGO=/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/bin/cargo CARGO_CRATE_NAME=gimli CARGO_MANIFEST_DIR=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/gimli-0.30.0 CARGO_MANIFEST_PATH=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/gimli-0.30.0/Cargo.toml CARGO_PKG_AUTHORS='' CARGO_PKG_DESCRIPTION='A library for reading and writing the DWARF debugging format.' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=gimli CARGO_PKG_README=./README.md CARGO_PKG_REPOSITORY='https://github.com/gimli-rs/gimli' CARGO_PKG_RUST_VERSION=1.60 CARGO_PKG_VERSION=0.30.0 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=30 CARGO_PKG_VERSION_PATCH=0 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/jfredett/code/rust-gpu-ex/target/debug/deps:/nix/store/ggqfrwgzpr3v3dkvh4cnmhymnvf6cqja-gcc-14-20241116-lib/lib' rustc --crate-name gimli --edition=2018 /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/gimli-0.30.0/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=3 -C embed-bitcode=no -C debug-assertions=on --cfg 'feature="read"' --cfg 'feature="read-core"' --cfg 'feature="std"' --cfg 'feature="write"' --check-cfg 'cfg(docsrs)' --check-cfg 'cfg(feature, values("default", "endian-reader", "fallible-iterator", "read", "read-all", "read-core", "rustc-dep-of-std", "std", "write"))' -C metadata=49714c3034315d07 -C extra-filename=-49714c3034315d07 --out-dir /home/jfredett/code/rust-gpu-ex/target/debug/deps -L dependency=/home/jfredett/code/rust-gpu-ex/target/debug/deps --extern indexmap=/home/jfredett/code/rust-gpu-ex/target/debug/deps/libindexmap-08e82cab490e2ea5.rmeta --cap-lints warn`
warning: method `symmetric_difference` is never used
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/regex-syntax-0.6.29/src/hir/interval.rs:423:8
    |
335 | pub trait Interval:
    |           -------- method in this trait
...
423 |     fn symmetric_difference(
    |        ^^^^^^^^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

   Compiling elsa v1.11.0
     Running `CARGO=/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/bin/cargo CARGO_CRATE_NAME=elsa CARGO_MANIFEST_DIR=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/elsa-1.11.0 CARGO_MANIFEST_PATH=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/elsa-1.11.0/Cargo.toml CARGO_PKG_AUTHORS='Manish Goregaokar <manishsmail@gmail.com>' CARGO_PKG_DESCRIPTION='Append-only collections for Rust where borrows to entries can outlive insertions' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE=MIT/Apache-2.0 CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=elsa CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/manishearth/elsa' CARGO_PKG_RUST_VERSION='' CARGO_PKG_VERSION=1.11.0 CARGO_PKG_VERSION_MAJOR=1 CARGO_PKG_VERSION_MINOR=11 CARGO_PKG_VERSION_PATCH=0 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/jfredett/code/rust-gpu-ex/target/debug/deps:/nix/store/ggqfrwgzpr3v3dkvh4cnmhymnvf6cqja-gcc-14-20241116-lib/lib' rustc --crate-name elsa --edition=2018 /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/elsa-1.11.0/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=3 -C embed-bitcode=no -C debug-assertions=on --cfg 'feature="default"' --cfg 'feature="indexmap"' --check-cfg 'cfg(docsrs)' --check-cfg 'cfg(feature, values("default", "indexmap"))' -C metadata=3aebab4fc59ae359 -C extra-filename=-3aebab4fc59ae359 --out-dir /home/jfredett/code/rust-gpu-ex/target/debug/deps -L dependency=/home/jfredett/code/rust-gpu-ex/target/debug/deps --extern indexmap=/home/jfredett/code/rust-gpu-ex/target/debug/deps/libindexmap-08e82cab490e2ea5.rmeta --extern stable_deref_trait=/home/jfredett/code/rust-gpu-ex/target/debug/deps/libstable_deref_trait-3b95324c85585982.rmeta --cap-lints warn`
warning: call to `.borrow()` on a reference in this situation does nothing
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/regex-syntax-0.6.29/src/ast/parse.rs:379:21
    |
379 |         self.pattern.borrow()
    |                     ^^^^^^^^^ help: remove this redundant call
    |
    = note: the type `str` does not implement `Borrow`, so calling `borrow` on `&str` copies the reference, which does not do anything and can be removed
    = note: `#[warn(noop_method_call)]` on by default

   Compiling raw-string v0.3.5
     Running `CARGO=/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/bin/cargo CARGO_CRATE_NAME=raw_string CARGO_MANIFEST_DIR=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/raw-string-0.3.5 CARGO_MANIFEST_PATH=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/raw-string-0.3.5/Cargo.toml CARGO_PKG_AUTHORS='Mara Bos <m-ou.se@m-ou.se>' CARGO_PKG_DESCRIPTION='RawStr/RawString are like str/String, but without any guaranteed encoding' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE=BSD-2-Clause CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=raw-string CARGO_PKG_README='' CARGO_PKG_REPOSITORY='https://github.com/m-ou-se/raw-string-rs' CARGO_PKG_RUST_VERSION='' CARGO_PKG_VERSION=0.3.5 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=3 CARGO_PKG_VERSION_PATCH=5 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/jfredett/code/rust-gpu-ex/target/debug/deps:/nix/store/ggqfrwgzpr3v3dkvh4cnmhymnvf6cqja-gcc-14-20241116-lib/lib' rustc --crate-name raw_string --edition=2015 /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/raw-string-0.3.5/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=3 -C embed-bitcode=no -C debug-assertions=on --check-cfg 'cfg(docsrs)' --check-cfg 'cfg(feature, values("old-nightly"))' -C metadata=635fcc5ef96b349c -C extra-filename=-635fcc5ef96b349c --out-dir /home/jfredett/code/rust-gpu-ex/target/debug/deps -L dependency=/home/jfredett/code/rust-gpu-ex/target/debug/deps --cap-lints warn`
     Running `CARGO=/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/bin/cargo CARGO_CRATE_NAME=ahash CARGO_MANIFEST_DIR=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ahash-0.8.11 CARGO_MANIFEST_PATH=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ahash-0.8.11/Cargo.toml CARGO_PKG_AUTHORS='Tom Kaitchuck <Tom.Kaitchuck@gmail.com>' CARGO_PKG_DESCRIPTION='A non-cryptographic hash function using AES-NI for high performance' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=ahash CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/tkaitchuck/ahash' CARGO_PKG_RUST_VERSION=1.60.0 CARGO_PKG_VERSION=0.8.11 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=8 CARGO_PKG_VERSION_PATCH=11 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/jfredett/code/rust-gpu-ex/target/debug/deps:/nix/store/ggqfrwgzpr3v3dkvh4cnmhymnvf6cqja-gcc-14-20241116-lib/lib' OUT_DIR=/home/jfredett/code/rust-gpu-ex/target/debug/build/ahash-0ec5ac452527d6ee/out rustc --crate-name ahash --edition=2018 /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ahash-0.8.11/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=3 -C embed-bitcode=no -C debug-assertions=on --cfg 'feature="default"' --cfg 'feature="getrandom"' --cfg 'feature="no-rng"' --cfg 'feature="runtime-rng"' --cfg 'feature="std"' --check-cfg 'cfg(docsrs)' --check-cfg 'cfg(feature, values("atomic-polyfill", "compile-time-rng", "const-random", "default", "getrandom", "nightly-arm-aes", "no-rng", "runtime-rng", "serde", "std"))' -C metadata=dcb95eea30757253 -C extra-filename=-dcb95eea30757253 --out-dir /home/jfredett/code/rust-gpu-ex/target/debug/deps -L dependency=/home/jfredett/code/rust-gpu-ex/target/debug/deps --extern cfg_if=/home/jfredett/code/rust-gpu-ex/target/debug/deps/libcfg_if-a56fbeab59b8aa84.rmeta --extern getrandom=/home/jfredett/code/rust-gpu-ex/target/debug/deps/libgetrandom-057539f4b24557ae.rmeta --extern once_cell=/home/jfredett/code/rust-gpu-ex/target/debug/deps/libonce_cell-bd1b1fc72190860c.rmeta --extern zerocopy=/home/jfredett/code/rust-gpu-ex/target/debug/deps/libzerocopy-cc4eccbba3e66362.rmeta --cap-lints warn --cfg 'feature="specialize"' --cfg 'feature="folded_multiply"'`
   Compiling glam v0.24.2
     Running `CARGO=/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/bin/cargo CARGO_CRATE_NAME=glam CARGO_MANIFEST_DIR=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2 CARGO_MANIFEST_PATH=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/Cargo.toml CARGO_PKG_AUTHORS='Cameron Hart <cameron.hart@gmail.com>' CARGO_PKG_DESCRIPTION='A simple and fast 3D math library for games and graphics' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=glam CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/bitshifter/glam-rs' CARGO_PKG_RUST_VERSION=1.58.1 CARGO_PKG_VERSION=0.24.2 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=24 CARGO_PKG_VERSION_PATCH=2 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/jfredett/code/rust-gpu-ex/target/debug/deps:/nix/store/ggqfrwgzpr3v3dkvh4cnmhymnvf6cqja-gcc-14-20241116-lib/lib' rustc --crate-name glam --edition=2021 /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no -C debuginfo=2 --cfg 'feature="libm"' --check-cfg 'cfg(docsrs)' --check-cfg 'cfg(feature, values("approx", "bytecheck", "bytemuck", "core-simd", "cuda", "debug-glam-assert", "default", "fast-math", "glam-assert", "libm", "mint", "rand", "rkyv", "scalar-math", "serde", "std"))' -C metadata=4a054504c3840e47 -C extra-filename=-4a054504c3840e47 --out-dir /home/jfredett/code/rust-gpu-ex/target/debug/deps -L dependency=/home/jfredett/code/rust-gpu-ex/target/debug/deps --extern libm=/home/jfredett/code/rust-gpu-ex/target/debug/deps/liblibm-7b2adc15df4485fe.rmeta --cap-lints warn`
     Running `CARGO=/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/bin/cargo CARGO_CRATE_NAME=rayon_core CARGO_MANIFEST_DIR=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rayon-core-1.12.1 CARGO_MANIFEST_PATH=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rayon-core-1.12.1/Cargo.toml CARGO_PKG_AUTHORS='Niko Matsakis <niko@alum.mit.edu>:Josh Stone <cuviper@gmail.com>' CARGO_PKG_DESCRIPTION='Core APIs for Rayon' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=rayon-core CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/rayon-rs/rayon' CARGO_PKG_RUST_VERSION=1.63 CARGO_PKG_VERSION=1.12.1 CARGO_PKG_VERSION_MAJOR=1 CARGO_PKG_VERSION_MINOR=12 CARGO_PKG_VERSION_PATCH=1 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/jfredett/code/rust-gpu-ex/target/debug/deps:/nix/store/ggqfrwgzpr3v3dkvh4cnmhymnvf6cqja-gcc-14-20241116-lib/lib' OUT_DIR=/home/jfredett/code/rust-gpu-ex/target/debug/build/rayon-core-e88dc35d16f2f8be/out rustc --crate-name rayon_core --edition=2021 /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rayon-core-1.12.1/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no -C debuginfo=2 --check-cfg 'cfg(docsrs)' --check-cfg 'cfg(feature, values("web_spin_lock"))' -C metadata=44857fd3f67532a4 -C extra-filename=-44857fd3f67532a4 --out-dir /home/jfredett/code/rust-gpu-ex/target/debug/deps -L dependency=/home/jfredett/code/rust-gpu-ex/target/debug/deps --extern crossbeam_deque=/home/jfredett/code/rust-gpu-ex/target/debug/deps/libcrossbeam_deque-23714a1a0a58c412.rmeta --extern crossbeam_utils=/home/jfredett/code/rust-gpu-ex/target/debug/deps/libcrossbeam_utils-b8a806ea53dde461.rmeta --cap-lints warn`
warning: unexpected `cfg` condition value: `specialize`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ahash-0.8.11/src/lib.rs:100:13
    |
100 | #![cfg_attr(feature = "specialize", feature(min_specialization))]
    |             ^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `atomic-polyfill`, `compile-time-rng`, `const-random`, `default`, `getrandom`, `nightly-arm-aes`, `no-rng`, `runtime-rng`, `serde`, and `std`
    = help: consider adding `specialize` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: `#[warn(unexpected_cfgs)]` on by default

warning: unexpected `cfg` condition value: `specialize`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ahash-0.8.11/src/fallback_hash.rs:202:7
    |
202 | #[cfg(feature = "specialize")]
    |       ^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `atomic-polyfill`, `compile-time-rng`, `const-random`, `default`, `getrandom`, `nightly-arm-aes`, `no-rng`, `runtime-rng`, `serde`, and `std`
    = help: consider adding `specialize` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `specialize`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ahash-0.8.11/src/fallback_hash.rs:209:7
    |
209 | #[cfg(feature = "specialize")]
    |       ^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `atomic-polyfill`, `compile-time-rng`, `const-random`, `default`, `getrandom`, `nightly-arm-aes`, `no-rng`, `runtime-rng`, `serde`, and `std`
    = help: consider adding `specialize` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `specialize`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ahash-0.8.11/src/fallback_hash.rs:253:7
    |
253 | #[cfg(feature = "specialize")]
    |       ^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `atomic-polyfill`, `compile-time-rng`, `const-random`, `default`, `getrandom`, `nightly-arm-aes`, `no-rng`, `runtime-rng`, `serde`, and `std`
    = help: consider adding `specialize` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `specialize`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ahash-0.8.11/src/fallback_hash.rs:257:7
    |
257 | #[cfg(feature = "specialize")]
    |       ^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `atomic-polyfill`, `compile-time-rng`, `const-random`, `default`, `getrandom`, `nightly-arm-aes`, `no-rng`, `runtime-rng`, `serde`, and `std`
    = help: consider adding `specialize` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `specialize`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ahash-0.8.11/src/fallback_hash.rs:300:7
    |
300 | #[cfg(feature = "specialize")]
    |       ^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `atomic-polyfill`, `compile-time-rng`, `const-random`, `default`, `getrandom`, `nightly-arm-aes`, `no-rng`, `runtime-rng`, `serde`, and `std`
    = help: consider adding `specialize` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `specialize`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ahash-0.8.11/src/fallback_hash.rs:305:7
    |
305 | #[cfg(feature = "specialize")]
    |       ^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `atomic-polyfill`, `compile-time-rng`, `const-random`, `default`, `getrandom`, `nightly-arm-aes`, `no-rng`, `runtime-rng`, `serde`, and `std`
    = help: consider adding `specialize` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `specialize`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ahash-0.8.11/src/fallback_hash.rs:118:11
    |
118 |     #[cfg(feature = "specialize")]
    |           ^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `atomic-polyfill`, `compile-time-rng`, `const-random`, `default`, `getrandom`, `nightly-arm-aes`, `no-rng`, `runtime-rng`, `serde`, and `std`
    = help: consider adding `specialize` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `128`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ahash-0.8.11/src/fallback_hash.rs:164:11
    |
164 |     #[cfg(target_pointer_width = "128")]
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_pointer_width` are: `16`, `32`, and `64`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `folded_multiply`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ahash-0.8.11/src/operations.rs:16:7
   |
16 | #[cfg(feature = "folded_multiply")]
   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `feature` are: `atomic-polyfill`, `compile-time-rng`, `const-random`, `default`, `getrandom`, `nightly-arm-aes`, `no-rng`, `runtime-rng`, `serde`, and `std`
   = help: consider adding `folded_multiply` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `folded_multiply`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ahash-0.8.11/src/operations.rs:23:11
   |
23 | #[cfg(not(feature = "folded_multiply"))]
   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `feature` are: `atomic-polyfill`, `compile-time-rng`, `const-random`, `default`, `getrandom`, `nightly-arm-aes`, `no-rng`, `runtime-rng`, `serde`, and `std`
   = help: consider adding `folded_multiply` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `specialize`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ahash-0.8.11/src/random_state.rs:468:7
    |
468 | #[cfg(feature = "specialize")]
    |       ^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `atomic-polyfill`, `compile-time-rng`, `const-random`, `default`, `getrandom`, `nightly-arm-aes`, `no-rng`, `runtime-rng`, `serde`, and `std`
    = help: consider adding `specialize` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `specialize`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ahash-0.8.11/src/random_state.rs:14:14
   |
14 |     if #[cfg(feature = "specialize")]{
   |              ^^^^^^^
   |
   = note: expected values for `feature` are: `atomic-polyfill`, `compile-time-rng`, `const-random`, `default`, `getrandom`, `nightly-arm-aes`, `no-rng`, `runtime-rng`, `serde`, and `std`
   = help: consider adding `specialize` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `fuzzing`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ahash-0.8.11/src/random_state.rs:53:58
   |
53 |     if #[cfg(all(feature = "compile-time-rng", any(test, fuzzing)))] {
   |                                                          ^^^^^^^
   |
   = help: expected names are: `clippy`, `debug_assertions`, `doc`, `docsrs`, `doctest`, `feature`, `fmt_debug`, `miri`, `overflow_checks`, `panic`, `proc_macro`, `relocation_model`, `rustfmt`, `sanitize`, `sanitizer_cfi_generalize_pointers`, `sanitizer_cfi_normalize_integers`, `target_abi`, `target_arch`, `target_endian`, `target_env`, `target_family`, `target_feature`, `target_has_atomic`, `target_has_atomic_equal_alignment`, `target_has_atomic_load_store`, `target_os`, `target_pointer_width`, `target_thread_local`, `target_vendor`, `test`, `ub_checks`, `unix`, and `windows`
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(fuzzing)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(fuzzing)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `fuzzing`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ahash-0.8.11/src/random_state.rs:73:54
   |
73 |     } else if #[cfg(all(feature = "runtime-rng", not(fuzzing)))] {
   |                                                      ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(fuzzing)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(fuzzing)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `specialize`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ahash-0.8.11/src/random_state.rs:461:11
    |
461 |     #[cfg(feature = "specialize")]
    |           ^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `atomic-polyfill`, `compile-time-rng`, `const-random`, `default`, `getrandom`, `nightly-arm-aes`, `no-rng`, `runtime-rng`, `serde`, and `std`
    = help: consider adding `specialize` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `specialize`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ahash-0.8.11/src/specialize.rs:10:7
   |
10 | #[cfg(feature = "specialize")]
   |       ^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `feature` are: `atomic-polyfill`, `compile-time-rng`, `const-random`, `default`, `getrandom`, `nightly-arm-aes`, `no-rng`, `runtime-rng`, `serde`, and `std`
   = help: consider adding `specialize` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `specialize`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ahash-0.8.11/src/specialize.rs:12:7
   |
12 | #[cfg(feature = "specialize")]
   |       ^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `feature` are: `atomic-polyfill`, `compile-time-rng`, `const-random`, `default`, `getrandom`, `nightly-arm-aes`, `no-rng`, `runtime-rng`, `serde`, and `std`
   = help: consider adding `specialize` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `specialize`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ahash-0.8.11/src/specialize.rs:14:7
   |
14 | #[cfg(feature = "specialize")]
   |       ^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `feature` are: `atomic-polyfill`, `compile-time-rng`, `const-random`, `default`, `getrandom`, `nightly-arm-aes`, `no-rng`, `runtime-rng`, `serde`, and `std`
   = help: consider adding `specialize` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `specialize`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ahash-0.8.11/src/specialize.rs:24:11
   |
24 | #[cfg(not(feature = "specialize"))]
   |           ^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `feature` are: `atomic-polyfill`, `compile-time-rng`, `const-random`, `default`, `getrandom`, `nightly-arm-aes`, `no-rng`, `runtime-rng`, `serde`, and `std`
   = help: consider adding `specialize` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `specialize`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ahash-0.8.11/src/specialize.rs:37:7
   |
37 | #[cfg(feature = "specialize")]
   |       ^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `feature` are: `atomic-polyfill`, `compile-time-rng`, `const-random`, `default`, `getrandom`, `nightly-arm-aes`, `no-rng`, `runtime-rng`, `serde`, and `std`
   = help: consider adding `specialize` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `specialize`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ahash-0.8.11/src/specialize.rs:70:7
   |
70 | #[cfg(feature = "specialize")]
   |       ^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `feature` are: `atomic-polyfill`, `compile-time-rng`, `const-random`, `default`, `getrandom`, `nightly-arm-aes`, `no-rng`, `runtime-rng`, `serde`, and `std`
   = help: consider adding `specialize` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `specialize`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ahash-0.8.11/src/specialize.rs:78:7
   |
78 | #[cfg(feature = "specialize")]
   |       ^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `feature` are: `atomic-polyfill`, `compile-time-rng`, `const-random`, `default`, `getrandom`, `nightly-arm-aes`, `no-rng`, `runtime-rng`, `serde`, and `std`
   = help: consider adding `specialize` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `specialize`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ahash-0.8.11/src/specialize.rs:86:7
   |
86 | #[cfg(feature = "specialize")]
   |       ^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `feature` are: `atomic-polyfill`, `compile-time-rng`, `const-random`, `default`, `getrandom`, `nightly-arm-aes`, `no-rng`, `runtime-rng`, `serde`, and `std`
   = help: consider adding `specialize` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `specialize`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ahash-0.8.11/src/specialize.rs:94:7
   |
94 | #[cfg(feature = "specialize")]
   |       ^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `feature` are: `atomic-polyfill`, `compile-time-rng`, `const-random`, `default`, `getrandom`, `nightly-arm-aes`, `no-rng`, `runtime-rng`, `serde`, and `std`
   = help: consider adding `specialize` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `specialize`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ahash-0.8.11/src/specialize.rs:102:7
    |
102 | #[cfg(feature = "specialize")]
    |       ^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `atomic-polyfill`, `compile-time-rng`, `const-random`, `default`, `getrandom`, `nightly-arm-aes`, `no-rng`, `runtime-rng`, `serde`, and `std`
    = help: consider adding `specialize` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `specialize`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ahash-0.8.11/src/specialize.rs:110:7
    |
110 | #[cfg(feature = "specialize")]
    |       ^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `atomic-polyfill`, `compile-time-rng`, `const-random`, `default`, `getrandom`, `nightly-arm-aes`, `no-rng`, `runtime-rng`, `serde`, and `std`
    = help: consider adding `specialize` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `specialize`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ahash-0.8.11/src/specialize.rs:118:7
    |
118 | #[cfg(feature = "specialize")]
    |       ^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `atomic-polyfill`, `compile-time-rng`, `const-random`, `default`, `getrandom`, `nightly-arm-aes`, `no-rng`, `runtime-rng`, `serde`, and `std`
    = help: consider adding `specialize` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `specialize`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ahash-0.8.11/src/specialize.rs:126:11
    |
126 | #[cfg(all(feature = "specialize"))]
    |           ^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `atomic-polyfill`, `compile-time-rng`, `const-random`, `default`, `getrandom`, `nightly-arm-aes`, `no-rng`, `runtime-rng`, `serde`, and `std`
    = help: consider adding `specialize` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `specialize`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ahash-0.8.11/src/specialize.rs:52:15
   |
52 |         #[cfg(feature = "specialize")]
   |               ^^^^^^^^^^^^^^^^^^^^^^
...
61 | call_hasher_impl!(u8);
   | --------------------- in this macro invocation
   |
   = note: expected values for `feature` are: `atomic-polyfill`, `compile-time-rng`, `const-random`, `default`, `getrandom`, `nightly-arm-aes`, `no-rng`, `runtime-rng`, `serde`, and `std`
   = help: consider adding `specialize` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `call_hasher_impl` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `specialize`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ahash-0.8.11/src/specialize.rs:52:15
   |
52 |         #[cfg(feature = "specialize")]
   |               ^^^^^^^^^^^^^^^^^^^^^^
...
62 | call_hasher_impl!(u16);
   | ---------------------- in this macro invocation
   |
   = note: expected values for `feature` are: `atomic-polyfill`, `compile-time-rng`, `const-random`, `default`, `getrandom`, `nightly-arm-aes`, `no-rng`, `runtime-rng`, `serde`, and `std`
   = help: consider adding `specialize` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `call_hasher_impl` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `specialize`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ahash-0.8.11/src/specialize.rs:52:15
   |
52 |         #[cfg(feature = "specialize")]
   |               ^^^^^^^^^^^^^^^^^^^^^^
...
63 | call_hasher_impl!(u32);
   | ---------------------- in this macro invocation
   |
   = note: expected values for `feature` are: `atomic-polyfill`, `compile-time-rng`, `const-random`, `default`, `getrandom`, `nightly-arm-aes`, `no-rng`, `runtime-rng`, `serde`, and `std`
   = help: consider adding `specialize` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `call_hasher_impl` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `specialize`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ahash-0.8.11/src/specialize.rs:52:15
   |
52 |         #[cfg(feature = "specialize")]
   |               ^^^^^^^^^^^^^^^^^^^^^^
...
64 | call_hasher_impl!(u64);
   | ---------------------- in this macro invocation
   |
   = note: expected values for `feature` are: `atomic-polyfill`, `compile-time-rng`, `const-random`, `default`, `getrandom`, `nightly-arm-aes`, `no-rng`, `runtime-rng`, `serde`, and `std`
   = help: consider adding `specialize` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `call_hasher_impl` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `specialize`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ahash-0.8.11/src/specialize.rs:52:15
   |
52 |         #[cfg(feature = "specialize")]
   |               ^^^^^^^^^^^^^^^^^^^^^^
...
65 | call_hasher_impl!(i8);
   | --------------------- in this macro invocation
   |
   = note: expected values for `feature` are: `atomic-polyfill`, `compile-time-rng`, `const-random`, `default`, `getrandom`, `nightly-arm-aes`, `no-rng`, `runtime-rng`, `serde`, and `std`
   = help: consider adding `specialize` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `call_hasher_impl` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `specialize`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ahash-0.8.11/src/specialize.rs:52:15
   |
52 |         #[cfg(feature = "specialize")]
   |               ^^^^^^^^^^^^^^^^^^^^^^
...
66 | call_hasher_impl!(i16);
   | ---------------------- in this macro invocation
   |
   = note: expected values for `feature` are: `atomic-polyfill`, `compile-time-rng`, `const-random`, `default`, `getrandom`, `nightly-arm-aes`, `no-rng`, `runtime-rng`, `serde`, and `std`
   = help: consider adding `specialize` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `call_hasher_impl` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `specialize`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ahash-0.8.11/src/specialize.rs:52:15
   |
52 |         #[cfg(feature = "specialize")]
   |               ^^^^^^^^^^^^^^^^^^^^^^
...
67 | call_hasher_impl!(i32);
   | ---------------------- in this macro invocation
   |
   = note: expected values for `feature` are: `atomic-polyfill`, `compile-time-rng`, `const-random`, `default`, `getrandom`, `nightly-arm-aes`, `no-rng`, `runtime-rng`, `serde`, and `std`
   = help: consider adding `specialize` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `call_hasher_impl` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `specialize`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ahash-0.8.11/src/specialize.rs:52:15
   |
52 |         #[cfg(feature = "specialize")]
   |               ^^^^^^^^^^^^^^^^^^^^^^
...
68 | call_hasher_impl!(i64);
   | ---------------------- in this macro invocation
   |
   = note: expected values for `feature` are: `atomic-polyfill`, `compile-time-rng`, `const-random`, `default`, `getrandom`, `nightly-arm-aes`, `no-rng`, `runtime-rng`, `serde`, and `std`
   = help: consider adding `specialize` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `call_hasher_impl` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `specialize`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ahash-0.8.11/src/lib.rs:265:11
    |
265 |     #[cfg(feature = "specialize")]
    |           ^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `atomic-polyfill`, `compile-time-rng`, `const-random`, `default`, `getrandom`, `nightly-arm-aes`, `no-rng`, `runtime-rng`, `serde`, and `std`
    = help: consider adding `specialize` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `specialize`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ahash-0.8.11/src/lib.rs:272:15
    |
272 |     #[cfg(not(feature = "specialize"))]
    |               ^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `atomic-polyfill`, `compile-time-rng`, `const-random`, `default`, `getrandom`, `nightly-arm-aes`, `no-rng`, `runtime-rng`, `serde`, and `std`
    = help: consider adding `specialize` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `specialize`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ahash-0.8.11/src/lib.rs:279:11
    |
279 |     #[cfg(feature = "specialize")]
    |           ^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `atomic-polyfill`, `compile-time-rng`, `const-random`, `default`, `getrandom`, `nightly-arm-aes`, `no-rng`, `runtime-rng`, `serde`, and `std`
    = help: consider adding `specialize` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `specialize`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ahash-0.8.11/src/lib.rs:286:15
    |
286 |     #[cfg(not(feature = "specialize"))]
    |               ^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `atomic-polyfill`, `compile-time-rng`, `const-random`, `default`, `getrandom`, `nightly-arm-aes`, `no-rng`, `runtime-rng`, `serde`, and `std`
    = help: consider adding `specialize` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `specialize`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ahash-0.8.11/src/lib.rs:293:11
    |
293 |     #[cfg(feature = "specialize")]
    |           ^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `atomic-polyfill`, `compile-time-rng`, `const-random`, `default`, `getrandom`, `nightly-arm-aes`, `no-rng`, `runtime-rng`, `serde`, and `std`
    = help: consider adding `specialize` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `specialize`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ahash-0.8.11/src/lib.rs:300:15
    |
300 |     #[cfg(not(feature = "specialize"))]
    |               ^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `feature` are: `atomic-polyfill`, `compile-time-rng`, `const-random`, `default`, `getrandom`, `nightly-arm-aes`, `no-rng`, `runtime-rng`, `serde`, and `std`
    = help: consider adding `specialize` as a feature in `Cargo.toml`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/lib.rs:254:13
    |
254 | #![cfg_attr(doc_cfg, feature(doc_cfg))]
    |             ^^^^^^^
    |
    = help: expected names are: `clippy`, `debug_assertions`, `doc`, `docsrs`, `doctest`, `feature`, `fmt_debug`, `miri`, `overflow_checks`, `panic`, `proc_macro`, `relocation_model`, `rustfmt`, `sanitize`, `sanitizer_cfi_generalize_pointers`, `sanitizer_cfi_normalize_integers`, `target_abi`, `target_arch`, `target_endian`, `target_env`, `target_family`, `target_feature`, `target_has_atomic`, `target_has_atomic_equal_alignment`, `target_has_atomic_load_store`, `target_os`, `target_pointer_width`, `target_thread_local`, `target_vendor`, `test`, `ub_checks`, `unix`, and `windows`
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: `#[warn(unexpected_cfgs)]` on by default

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/lib.rs:430:12
    |
430 | #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/lib.rs:434:12
    |
434 | #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/lib.rs:455:12
    |
455 | #[cfg_attr(doc_cfg, doc(cfg(all(feature = "parsing", feature = "printing"))))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/lib.rs:804:12
    |
804 | #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/lib.rs:867:12
    |
867 | #[cfg_attr(doc_cfg, doc(cfg(all(feature = "parsing", feature = "proc-macro"))))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/lib.rs:887:12
    |
887 | #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/lib.rs:916:12
    |
916 | #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/lib.rs:959:12
    |
959 | #[cfg_attr(doc_cfg, doc(cfg(all(feature = "parsing", feature = "full"))))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/group.rs:136:12
    |
136 | #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/group.rs:214:12
    |
214 | #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/group.rs:269:12
    |
269 | #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/token.rs:561:12
    |
561 | #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/token.rs:569:12
    |
569 | #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_omit_await_from_token_macro`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/token.rs:881:11
    |
881 | #[cfg(not(syn_omit_await_from_token_macro))]
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_omit_await_from_token_macro)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_omit_await_from_token_macro)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_omit_await_from_token_macro`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/token.rs:883:7
    |
883 | #[cfg(syn_omit_await_from_token_macro)]
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_omit_await_from_token_macro)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_omit_await_from_token_macro)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/token.rs:394:24
    |
394 |               #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |                          ^^^^^^^
...
556 | / define_punctuation_structs! {
557 | |     "_" pub struct Underscore/1 /// `_`
558 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `define_punctuation_structs` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/token.rs:398:24
    |
398 |               #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |                          ^^^^^^^
...
556 | / define_punctuation_structs! {
557 | |     "_" pub struct Underscore/1 /// `_`
558 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `define_punctuation_structs` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/token.rs:271:24
    |
271 |               #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |                          ^^^^^^^
...
652 | / define_keywords! {
653 | |     "abstract"    pub struct Abstract     /// `abstract`
654 | |     "as"          pub struct As           /// `as`
655 | |     "async"       pub struct Async        /// `async`
...   |
704 | |     "yield"       pub struct Yield        /// `yield`
705 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `define_keywords` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/token.rs:275:24
    |
275 |               #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |                          ^^^^^^^
...
652 | / define_keywords! {
653 | |     "abstract"    pub struct Abstract     /// `abstract`
654 | |     "as"          pub struct As           /// `as`
655 | |     "async"       pub struct Async        /// `async`
...   |
704 | |     "yield"       pub struct Yield        /// `yield`
705 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `define_keywords` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/token.rs:309:24
    |
309 |               #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                          ^^^^^^^
...
652 | / define_keywords! {
653 | |     "abstract"    pub struct Abstract     /// `abstract`
654 | |     "as"          pub struct As           /// `as`
655 | |     "async"       pub struct Async        /// `async`
...   |
704 | |     "yield"       pub struct Yield        /// `yield`
705 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `define_keywords` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/token.rs:317:24
    |
317 |               #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                          ^^^^^^^
...
652 | / define_keywords! {
653 | |     "abstract"    pub struct Abstract     /// `abstract`
654 | |     "as"          pub struct As           /// `as`
655 | |     "async"       pub struct Async        /// `async`
...   |
704 | |     "yield"       pub struct Yield        /// `yield`
705 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `define_keywords` (in Nightly builds, run with -Z macro-backtrace for more info)

   Compiling cc v1.2.13
     Running `CARGO=/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/bin/cargo CARGO_CRATE_NAME=cc CARGO_MANIFEST_DIR=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.2.13 CARGO_MANIFEST_PATH=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.2.13/Cargo.toml CARGO_PKG_AUTHORS='Alex Crichton <alex@alexcrichton.com>' CARGO_PKG_DESCRIPTION='A build-time dependency for Cargo build scripts to assist in invoking the native
C compiler to compile native C code into a static archive to be linked into Rust
code.
' CARGO_PKG_HOMEPAGE='https://github.com/rust-lang/cc-rs' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=cc CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/rust-lang/cc-rs' CARGO_PKG_RUST_VERSION=1.63 CARGO_PKG_VERSION=1.2.13 CARGO_PKG_VERSION_MAJOR=1 CARGO_PKG_VERSION_MINOR=2 CARGO_PKG_VERSION_PATCH=13 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/jfredett/code/rust-gpu-ex/target/debug/deps:/nix/store/ggqfrwgzpr3v3dkvh4cnmhymnvf6cqja-gcc-14-20241116-lib/lib' rustc --crate-name cc --edition=2018 /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cc-1.2.13/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=3 -C embed-bitcode=no -C debug-assertions=on --cfg 'feature="parallel"' --check-cfg 'cfg(docsrs)' --check-cfg 'cfg(feature, values("jobserver", "parallel"))' -C metadata=7d785819edad5406 -C extra-filename=-7d785819edad5406 --out-dir /home/jfredett/code/rust-gpu-ex/target/debug/deps -L dependency=/home/jfredett/code/rust-gpu-ex/target/debug/deps --extern jobserver=/home/jfredett/code/rust-gpu-ex/target/debug/deps/libjobserver-b6bc27d713a6d5e6.rmeta --extern libc=/home/jfredett/code/rust-gpu-ex/target/debug/deps/liblibc-67d069db6a8dae33.rmeta --extern shlex=/home/jfredett/code/rust-gpu-ex/target/debug/deps/libshlex-43fa7c4abdebf70b.rmeta --cap-lints warn`
warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/token.rs:444:24
    |
444 |               #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                          ^^^^^^^
...
707 | / define_punctuation! {
708 | |     "+"           pub struct Add/1        /// `+`
709 | |     "+="          pub struct AddEq/2      /// `+=`
710 | |     "&"           pub struct And/1        /// `&`
...   |
753 | |     "~"           pub struct Tilde/1      /// `~`
754 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `define_punctuation` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/token.rs:452:24
    |
452 |               #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                          ^^^^^^^
...
707 | / define_punctuation! {
708 | |     "+"           pub struct Add/1        /// `+`
709 | |     "+="          pub struct AddEq/2      /// `+=`
710 | |     "&"           pub struct And/1        /// `&`
...   |
753 | |     "~"           pub struct Tilde/1      /// `~`
754 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `define_punctuation` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/token.rs:394:24
    |
394 |               #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |                          ^^^^^^^
...
707 | / define_punctuation! {
708 | |     "+"           pub struct Add/1        /// `+`
709 | |     "+="          pub struct AddEq/2      /// `+=`
710 | |     "&"           pub struct And/1        /// `&`
...   |
753 | |     "~"           pub struct Tilde/1      /// `~`
754 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `define_punctuation_structs` which comes from the expansion of the macro `define_punctuation` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/token.rs:398:24
    |
398 |               #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |                          ^^^^^^^
...
707 | / define_punctuation! {
708 | |     "+"           pub struct Add/1        /// `+`
709 | |     "+="          pub struct AddEq/2      /// `+=`
710 | |     "&"           pub struct And/1        /// `&`
...   |
753 | |     "~"           pub struct Tilde/1      /// `~`
754 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `define_punctuation_structs` which comes from the expansion of the macro `define_punctuation` (in Nightly builds, run with -Z macro-backtrace for more info)

     Running `CARGO=/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/bin/cargo CARGO_CRATE_NAME=rustix CARGO_MANIFEST_DIR=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rustix-0.38.44 CARGO_MANIFEST_PATH=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rustix-0.38.44/Cargo.toml CARGO_PKG_AUTHORS='Dan Gohman <dev@sunfishcode.online>:Jakub Konka <kubkon@jakubkonka.com>' CARGO_PKG_DESCRIPTION='Safe Rust bindings to POSIX/Unix/Linux/Winsock-like syscalls' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='Apache-2.0 WITH LLVM-exception OR Apache-2.0 OR MIT' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=rustix CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/bytecodealliance/rustix' CARGO_PKG_RUST_VERSION=1.63 CARGO_PKG_VERSION=0.38.44 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=38 CARGO_PKG_VERSION_PATCH=44 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/jfredett/code/rust-gpu-ex/target/debug/deps:/nix/store/ggqfrwgzpr3v3dkvh4cnmhymnvf6cqja-gcc-14-20241116-lib/lib' OUT_DIR=/home/jfredett/code/rust-gpu-ex/target/debug/build/rustix-f01753ddc04a9351/out rustc --crate-name rustix --edition=2021 /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rustix-0.38.44/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=3 -C embed-bitcode=no --warn=unexpected_cfgs --check-cfg 'cfg(alloc_c_string)' --check-cfg 'cfg(alloc_ffi)' --check-cfg 'cfg(apple)' --check-cfg 'cfg(asm_experimental_arch)' --check-cfg 'cfg(bsd)' --check-cfg 'cfg(core_c_str)' --check-cfg 'cfg(core_ffi_c)' --check-cfg 'cfg(core_intrinsics)' --check-cfg 'cfg(criterion)' --check-cfg 'cfg(document_experimental_runtime_api)' --check-cfg 'cfg(fix_y2038)' --check-cfg 'cfg(freebsdlike)' --check-cfg 'cfg(libc)' --check-cfg 'cfg(linux_kernel)' --check-cfg 'cfg(linux_like)' --check-cfg 'cfg(linux_raw)' --check-cfg 'cfg(netbsdlike)' --check-cfg 'cfg(rustc_attrs)' --check-cfg 'cfg(solarish)' --check-cfg 'cfg(staged_api)' --check-cfg 'cfg(static_assertions)' --check-cfg 'cfg(thumb_mode)' --check-cfg 'cfg(wasi)' --check-cfg 'cfg(wasi_ext)' --check-cfg 'cfg(target_arch, values("xtensa"))' -C debug-assertions=on --cfg 'feature="all-apis"' --cfg 'feature="alloc"' --cfg 'feature="default"' --cfg 'feature="event"' --cfg 'feature="fs"' --cfg 'feature="io_uring"' --cfg 'feature="itoa"' --cfg 'feature="libc-extra-traits"' --cfg 'feature="mm"' --cfg 'feature="mount"' --cfg 'feature="net"' --cfg 'feature="once_cell"' --cfg 'feature="param"' --cfg 'feature="pipe"' --cfg 'feature="process"' --cfg 'feature="procfs"' --cfg 'feature="pty"' --cfg 'feature="rand"' --cfg 'feature="runtime"' --cfg 'feature="shm"' --cfg 'feature="std"' --cfg 'feature="stdio"' --cfg 'feature="system"' --cfg 'feature="termios"' --cfg 'feature="thread"' --cfg 'feature="time"' --cfg 'feature="use-libc-auxv"' --check-cfg 'cfg(docsrs)' --check-cfg 'cfg(feature, values("all-apis", "alloc", "cc", "compiler_builtins", "core", "default", "event", "fs", "io_uring", "itoa", "libc", "libc-extra-traits", "libc_errno", "linux_4_11", "linux_latest", "mm", "mount", "net", "once_cell", "param", "pipe", "process", "procfs", "pty", "rand", "runtime", "rustc-dep-of-std", "rustc-std-workspace-alloc", "shm", "std", "stdio", "system", "termios", "thread", "time", "try_close", "use-explicitly-provided-auxv", "use-libc", "use-libc-auxv"))' -C metadata=73be97fb1fe274b8 -C extra-filename=-73be97fb1fe274b8 --out-dir /home/jfredett/code/rust-gpu-ex/target/debug/deps -L dependency=/home/jfredett/code/rust-gpu-ex/target/debug/deps --extern bitflags=/home/jfredett/code/rust-gpu-ex/target/debug/deps/libbitflags-65c57d855a941538.rmeta --extern itoa=/home/jfredett/code/rust-gpu-ex/target/debug/deps/libitoa-520a3cdd65cc5743.rmeta --extern linux_raw_sys=/home/jfredett/code/rust-gpu-ex/target/debug/deps/liblinux_raw_sys-e9bb6832b04073e9.rmeta --extern once_cell=/home/jfredett/code/rust-gpu-ex/target/debug/deps/libonce_cell-bd1b1fc72190860c.rmeta --cap-lints warn --cfg static_assertions --cfg linux_raw --cfg linux_like --cfg linux_kernel`
   Compiling bitflags v1.3.2
     Running `CARGO=/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/bin/cargo CARGO_CRATE_NAME=bitflags CARGO_MANIFEST_DIR=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2 CARGO_MANIFEST_PATH=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/Cargo.toml CARGO_PKG_AUTHORS='The Rust Project Developers' CARGO_PKG_DESCRIPTION='A macro to generate structures which behave like bitflags.
' CARGO_PKG_HOMEPAGE='https://github.com/bitflags/bitflags' CARGO_PKG_LICENSE=MIT/Apache-2.0 CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=bitflags CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/bitflags/bitflags' CARGO_PKG_RUST_VERSION='' CARGO_PKG_VERSION=1.3.2 CARGO_PKG_VERSION_MAJOR=1 CARGO_PKG_VERSION_MINOR=3 CARGO_PKG_VERSION_PATCH=2 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/jfredett/code/rust-gpu-ex/target/debug/deps:/nix/store/ggqfrwgzpr3v3dkvh4cnmhymnvf6cqja-gcc-14-20241116-lib/lib' rustc --crate-name bitflags --edition=2018 /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bitflags-1.3.2/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no -C debuginfo=2 --cfg 'feature="default"' --check-cfg 'cfg(docsrs)' --check-cfg 'cfg(feature, values("compiler_builtins", "core", "default", "example_generated", "rustc-dep-of-std"))' -C metadata=560efdb99b117eef -C extra-filename=-560efdb99b117eef --out-dir /home/jfredett/code/rust-gpu-ex/target/debug/deps -L dependency=/home/jfredett/code/rust-gpu-ex/target/debug/deps --cap-lints warn`
warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/token.rs:503:24
    |
503 |               #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |                          ^^^^^^^
...
756 | / define_delimiters! {
757 | |     "{"           pub struct Brace        /// `{...}`
758 | |     "["           pub struct Bracket      /// `[...]`
759 | |     "("           pub struct Paren        /// `(...)`
760 | |     " "           pub struct Group        /// None-delimited group
761 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `define_delimiters` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/token.rs:507:24
    |
507 |               #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |                          ^^^^^^^
...
756 | / define_delimiters! {
757 | |     "{"           pub struct Brace        /// `{...}`
758 | |     "["           pub struct Bracket      /// `[...]`
759 | |     "("           pub struct Paren        /// `(...)`
760 | |     " "           pub struct Group        /// None-delimited group
761 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `define_delimiters` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/ident.rs:38:12
   |
38 | #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
   |            ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/attr.rs:463:12
    |
463 | #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/attr.rs:148:16
    |
148 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/attr.rs:329:16
    |
329 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/attr.rs:360:16
    |
360 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/macros.rs:155:20
    |
155 |           #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                      ^^^^^^^
    |
   ::: /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/attr.rs:336:1
    |
336 | / ast_enum_of_structs! {
337 | |     /// Content of a compile-time structured attribute.
338 | |     ///
339 | |     /// *This type is available only if Syn is built with the `"derive"` or `"full"`
...   |
369 | |     }
370 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `generate_to_tokens` which comes from the expansion of the macro `ast_enum_of_structs` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/attr.rs:377:16
    |
377 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/attr.rs:390:16
    |
390 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/attr.rs:417:16
    |
417 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/macros.rs:155:20
    |
155 |           #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                      ^^^^^^^
    |
   ::: /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/attr.rs:412:1
    |
412 | / ast_enum_of_structs! {
413 | |     /// Element of a compile-time attribute list.
414 | |     ///
415 | |     /// *This type is available only if Syn is built with the `"derive"` or `"full"`
...   |
425 | |     }
426 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `generate_to_tokens` which comes from the expansion of the macro `ast_enum_of_structs` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/attr.rs:165:16
    |
165 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/attr.rs:213:16
    |
213 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/attr.rs:223:16
    |
223 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/attr.rs:237:16
    |
237 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/attr.rs:251:16
    |
251 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/attr.rs:557:16
    |
557 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/attr.rs:565:16
    |
565 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/attr.rs:573:16
    |
573 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/attr.rs:581:16
    |
581 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/attr.rs:630:16
    |
630 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/attr.rs:644:16
    |
644 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/attr.rs:654:16
    |
654 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
 --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/data.rs:9:16
  |
9 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
  |                ^^^^^^^
  |
  = help: consider using a Cargo feature instead
  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
           [lints.rust]
           unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
  = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/data.rs:36:16
   |
36 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
   |                ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/macros.rs:155:20
    |
155 |           #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                      ^^^^^^^
    |
   ::: /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/data.rs:25:1
    |
25  | / ast_enum_of_structs! {
26  | |     /// Data stored within an enum variant or struct.
27  | |     ///
28  | |     /// *This type is available only if Syn is built with the `"derive"` or `"full"`
...   |
47  | |     }
48  | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `generate_to_tokens` which comes from the expansion of the macro `ast_enum_of_structs` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/data.rs:56:16
   |
56 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
   |                ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/data.rs:68:16
   |
68 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
   |                ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/data.rs:153:16
    |
153 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/data.rs:185:16
    |
185 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/macros.rs:155:20
    |
155 |           #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                      ^^^^^^^
    |
   ::: /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/data.rs:173:1
    |
173 | / ast_enum_of_structs! {
174 | |     /// The visibility level of an item: inherited or `pub` or
175 | |     /// `pub(restricted)`.
176 | |     ///
...   |
199 | |     }
200 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `generate_to_tokens` which comes from the expansion of the macro `ast_enum_of_structs` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/data.rs:207:16
    |
207 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/data.rs:218:16
    |
218 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/data.rs:230:16
    |
230 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/data.rs:246:16
    |
246 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/data.rs:275:16
    |
275 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/data.rs:286:16
    |
286 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/data.rs:327:16
    |
327 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/data.rs:299:20
    |
299 |         #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                    ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/data.rs:315:20
    |
315 |         #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                    ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/data.rs:423:16
    |
423 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/data.rs:436:16
    |
436 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/data.rs:445:16
    |
445 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/data.rs:454:16
    |
454 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/data.rs:467:16
    |
467 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/data.rs:474:16
    |
474 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/data.rs:481:16
    |
481 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:89:16
   |
89 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
   |                ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_no_non_exhaustive`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:90:20
   |
90 |     #[cfg_attr(not(syn_no_non_exhaustive), non_exhaustive)]
   |                    ^^^^^^^^^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_no_non_exhaustive)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_no_non_exhaustive)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/macros.rs:155:20
    |
155 |           #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                      ^^^^^^^
    |
   ::: /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:14:1
    |
14  | / ast_enum_of_structs! {
15  | |     /// A Rust expression.
16  | |     ///
17  | |     /// *This type is available only if Syn is built with the `"derive"` or `"full"`
...   |
249 | |     }
250 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `generate_to_tokens` which comes from the expansion of the macro `ast_enum_of_structs` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:256:16
    |
256 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:268:16
    |
268 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:281:16
    |
281 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:294:16
    |
294 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:307:16
    |
307 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:321:16
    |
321 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:334:16
    |
334 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:346:16
    |
346 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:359:16
    |
359 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:373:16
    |
373 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:387:16
    |
387 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:400:16
    |
400 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:418:16
    |
418 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:431:16
    |
431 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:444:16
    |
444 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:464:16
    |
464 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:480:16
    |
480 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:495:16
    |
495 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:508:16
    |
508 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:523:16
    |
523 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:534:16
    |
534 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:547:16
    |
547 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:558:16
    |
558 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:572:16
    |
572 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:588:16
    |
588 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:604:16
    |
604 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:616:16
    |
616 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:629:16
    |
629 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:643:16
    |
643 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:657:16
    |
657 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:672:16
    |
672 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:687:16
    |
687 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:699:16
    |
699 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:711:16
    |
711 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:723:16
    |
723 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:737:16
    |
737 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:749:16
    |
749 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:761:16
    |
761 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:775:16
    |
775 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:850:16
    |
850 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:920:16
    |
920 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:968:16
    |
968 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:982:16
    |
982 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: methods `read_u128x2`, `read_u128x4`, `read_last_u16`, `read_last_u128x2`, and `read_last_u128x4` are never used
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ahash-0.8.11/src/convert.rs:80:8
   |
75 | pub(crate) trait ReadFromSlice {
   |                  ------------- methods in this trait
...
80 |     fn read_u128x2(&self) -> ([u128; 2], &[u8]);
   |        ^^^^^^^^^^^
81 |     fn read_u128x4(&self) -> ([u128; 4], &[u8]);
   |        ^^^^^^^^^^^
82 |     fn read_last_u16(&self) -> u16;
   |        ^^^^^^^^^^^^^
...
86 |     fn read_last_u128x2(&self) -> [u128; 2];
   |        ^^^^^^^^^^^^^^^^
87 |     fn read_last_u128x4(&self) -> [u128; 4];
   |        ^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(dead_code)]` on by default

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:999:16
    |
999 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:1021:16
     |
1021 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:1049:16
     |
1049 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:1065:16
     |
1065 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_no_non_exhaustive`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:246:15
    |
246 |         #[cfg(syn_no_non_exhaustive)]
    |               ^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_no_non_exhaustive)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_no_non_exhaustive)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_no_const_vec_new`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:784:40
    |
784 |     #[cfg(all(feature = "parsing", not(syn_no_const_vec_new)))]
    |                                        ^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_no_const_vec_new)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_no_const_vec_new)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_no_non_exhaustive`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:838:19
    |
838 |             #[cfg(syn_no_non_exhaustive)]
    |                   ^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_no_non_exhaustive)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_no_non_exhaustive)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:1159:16
     |
1159 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:1880:16
     |
1880 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:1975:16
     |
1975 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:2001:16
     |
2001 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:2063:16
     |
2063 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:2084:16
     |
2084 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:2101:16
     |
2101 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:2119:16
     |
2119 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:2147:16
     |
2147 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:2165:16
     |
2165 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:2206:16
     |
2206 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:2236:16
     |
2236 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:2258:16
     |
2258 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:2326:16
     |
2326 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:2349:16
     |
2349 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:2372:16
     |
2372 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:2381:16
     |
2381 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:2396:16
     |
2396 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:2405:16
     |
2405 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:2414:16
     |
2414 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:2426:16
     |
2426 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:2496:16
     |
2496 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

     Running `CARGO=/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/bin/cargo CARGO_CRATE_NAME=either CARGO_MANIFEST_DIR=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/either-1.13.0 CARGO_MANIFEST_PATH=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/either-1.13.0/Cargo.toml CARGO_PKG_AUTHORS=bluss CARGO_PKG_DESCRIPTION='The enum `Either` with variants `Left` and `Right` is a general purpose sum type with two cases.
' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=either CARGO_PKG_README=README-crates.io.md CARGO_PKG_REPOSITORY='https://github.com/rayon-rs/either' CARGO_PKG_RUST_VERSION=1.37 CARGO_PKG_VERSION=1.13.0 CARGO_PKG_VERSION_MAJOR=1 CARGO_PKG_VERSION_MINOR=13 CARGO_PKG_VERSION_PATCH=0 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/jfredett/code/rust-gpu-ex/target/debug/deps:/nix/store/ggqfrwgzpr3v3dkvh4cnmhymnvf6cqja-gcc-14-20241116-lib/lib' rustc --crate-name either --edition=2018 /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/either-1.13.0/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no -C debuginfo=2 --check-cfg 'cfg(docsrs)' --check-cfg 'cfg(feature, values("default", "serde", "use_std"))' -C metadata=18f06598a4be80b6 -C extra-filename=-18f06598a4be80b6 --out-dir /home/jfredett/code/rust-gpu-ex/target/debug/deps -L dependency=/home/jfredett/code/rust-gpu-ex/target/debug/deps --cap-lints warn`
warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:2547:16
     |
2547 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:2571:16
     |
2571 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:2582:16
     |
2582 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:2594:16
     |
2594 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:2648:16
     |
2648 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:2678:16
     |
2678 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:2727:16
     |
2727 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:2759:16
     |
2759 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:2801:16
     |
2801 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:2818:16
     |
2818 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:2832:16
     |
2832 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:2846:16
     |
2846 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:2879:16
     |
2879 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:2292:28
     |
2292 |                   #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                              ^^^^^^^
...
2309 | /     impl_by_parsing_expr! {
2310 | |         ExprAssign, Assign, "expected assignment expression",
2311 | |         ExprAssignOp, AssignOp, "expected compound assignment expression",
2312 | |         ExprAwait, Await, "expected await expression",
...    |
2322 | |         ExprType, Type, "expected type ascription expression",
2323 | |     }
     | |_____- in this macro invocation
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
     = note: this warning originates in the macro `impl_by_parsing_expr` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:1248:20
     |
1248 |         #[cfg_attr(doc_cfg, doc(cfg(all(feature = "full", feature = "parsing"))))]
     |                    ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_no_non_exhaustive`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:2539:23
     |
2539 |                 #[cfg(syn_no_non_exhaustive)]
     |                       ^^^^^^^^^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_no_non_exhaustive)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_no_non_exhaustive)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_no_const_vec_new`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:2905:23
     |
2905 |             #[cfg(not(syn_no_const_vec_new))]
     |                       ^^^^^^^^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_no_const_vec_new)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_no_const_vec_new)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_no_const_vec_new`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:2907:19
     |
2907 |             #[cfg(syn_no_const_vec_new)]
     |                   ^^^^^^^^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_no_const_vec_new)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_no_const_vec_new)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:2988:16
     |
2988 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:2998:16
     |
2998 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:3008:16
     |
3008 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:3020:16
     |
3020 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:3035:16
     |
3035 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:3046:16
     |
3046 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:3057:16
     |
3057 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:3072:16
     |
3072 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:3082:16
     |
3082 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:3091:16
     |
3091 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:3099:16
     |
3099 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:3110:16
     |
3110 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:3141:16
     |
3141 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:3153:16
     |
3153 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:3165:16
     |
3165 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:3180:16
     |
3180 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:3197:16
     |
3197 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:3211:16
     |
3211 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:3233:16
     |
3233 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:3244:16
     |
3244 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:3255:16
     |
3255 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:3265:16
     |
3265 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:3275:16
     |
3275 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:3291:16
     |
3291 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:3304:16
     |
3304 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:3317:16
     |
3317 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:3328:16
     |
3328 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:3338:16
     |
3338 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:3348:16
     |
3348 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:3358:16
     |
3358 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:3367:16
     |
3367 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:3379:16
     |
3379 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:3390:16
     |
3390 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:3400:16
     |
3400 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:3409:16
     |
3409 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:3420:16
     |
3420 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:3431:16
     |
3431 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:3441:16
     |
3441 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:3451:16
     |
3451 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:3460:16
     |
3460 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:3478:16
     |
3478 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:3491:16
     |
3491 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:3501:16
     |
3501 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:3512:16
     |
3512 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:3522:16
     |
3522 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:3531:16
     |
3531 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/expr.rs:3544:16
     |
3544 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/generics.rs:296:5
    |
296 |     doc_cfg,
    |     ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/generics.rs:307:5
    |
307 |     doc_cfg,
    |     ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/generics.rs:318:5
    |
318 |     doc_cfg,
    |     ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/generics.rs:14:16
   |
14 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
   |                ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/generics.rs:35:16
   |
35 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
   |                ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/macros.rs:155:20
    |
155 |           #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                      ^^^^^^^
    |
   ::: /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/generics.rs:23:1
    |
23  | / ast_enum_of_structs! {
24  | |     /// A generic type parameter, lifetime, or const generic: `T: Into<String>`,
25  | |     /// `'a: 'b`, `const LEN: usize`.
26  | |     ///
...   |
45  | |     }
46  | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `generate_to_tokens` which comes from the expansion of the macro `ast_enum_of_structs` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/generics.rs:53:16
   |
53 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
   |                ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/generics.rs:69:16
   |
69 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
   |                ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/generics.rs:83:16
   |
83 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
   |                ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/generics.rs:363:20
    |
363 |         #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |                    ^^^^^^^
...
404 | generics_wrapper_impls!(ImplGenerics);
    | ------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `generics_wrapper_impls` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/generics.rs:363:20
    |
363 |         #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |                    ^^^^^^^
...
406 | generics_wrapper_impls!(TypeGenerics);
    | ------------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `generics_wrapper_impls` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/generics.rs:363:20
    |
363 |         #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |                    ^^^^^^^
...
408 | generics_wrapper_impls!(Turbofish);
    | ---------------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `generics_wrapper_impls` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/generics.rs:426:16
    |
426 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/generics.rs:475:16
    |
475 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/macros.rs:155:20
    |
155 |           #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                      ^^^^^^^
    |
   ::: /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/generics.rs:470:1
    |
470 | / ast_enum_of_structs! {
471 | |     /// A trait or lifetime used as a bound on a type parameter.
472 | |     ///
473 | |     /// *This type is available only if Syn is built with the `"derive"` or `"full"`
...   |
479 | |     }
480 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `generate_to_tokens` which comes from the expansion of the macro `ast_enum_of_structs` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/generics.rs:487:16
    |
487 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/generics.rs:504:16
    |
504 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/generics.rs:517:16
    |
517 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/generics.rs:535:16
    |
535 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/macros.rs:155:20
    |
155 |           #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                      ^^^^^^^
    |
   ::: /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/generics.rs:524:1
    |
524 | / ast_enum_of_structs! {
525 | |     /// A single predicate in a `where` clause: `T: Deserialize<'de>`.
526 | |     ///
527 | |     /// *This type is available only if Syn is built with the `"derive"` or `"full"`
...   |
545 | |     }
546 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `generate_to_tokens` which comes from the expansion of the macro `ast_enum_of_structs` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/generics.rs:553:16
    |
553 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/generics.rs:570:16
    |
570 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/generics.rs:583:16
    |
583 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/generics.rs:347:9
    |
347 |         doc_cfg,
    |         ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/generics.rs:597:16
    |
597 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/generics.rs:660:16
    |
660 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/generics.rs:687:16
    |
687 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/generics.rs:725:16
    |
725 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/generics.rs:747:16
    |
747 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/generics.rs:758:16
    |
758 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/generics.rs:812:16
    |
812 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/generics.rs:856:16
    |
856 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/generics.rs:905:16
    |
905 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/generics.rs:916:16
    |
916 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/generics.rs:940:16
    |
940 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/generics.rs:971:16
    |
971 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/generics.rs:982:16
    |
982 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/generics.rs:1057:16
     |
1057 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/generics.rs:1207:16
     |
1207 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/generics.rs:1217:16
     |
1217 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/generics.rs:1229:16
     |
1229 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/generics.rs:1268:16
     |
1268 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/generics.rs:1300:16
     |
1300 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/generics.rs:1310:16
     |
1310 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/generics.rs:1325:16
     |
1325 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/generics.rs:1335:16
     |
1335 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/generics.rs:1345:16
     |
1345 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/generics.rs:1354:16
     |
1354 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/item.rs:19:16
   |
19 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
   |                ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_no_non_exhaustive`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/item.rs:20:20
   |
20 |     #[cfg_attr(not(syn_no_non_exhaustive), non_exhaustive)]
   |                    ^^^^^^^^^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_no_non_exhaustive)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_no_non_exhaustive)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/macros.rs:155:20
    |
155 |           #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                      ^^^^^^^
    |
   ::: /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/item.rs:9:1
    |
9   | / ast_enum_of_structs! {
10  | |     /// Things that can appear directly inside of a module or scope.
11  | |     ///
12  | |     /// *This type is available only if Syn is built with the `"full"` feature.*
...   |
96  | |     }
97  | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `generate_to_tokens` which comes from the expansion of the macro `ast_enum_of_structs` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/item.rs:103:16
    |
103 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/item.rs:121:16
    |
121 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/item.rs:137:16
    |
137 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/item.rs:154:16
    |
154 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/item.rs:167:16
    |
167 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/item.rs:181:16
    |
181 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/item.rs:201:16
    |
201 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/item.rs:215:16
    |
215 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/item.rs:229:16
    |
229 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/item.rs:244:16
    |
244 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/item.rs:263:16
    |
263 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/item.rs:279:16
    |
279 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/item.rs:299:16
    |
299 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/item.rs:316:16
    |
316 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/item.rs:333:16
    |
333 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/item.rs:348:16
    |
348 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/item.rs:477:16
    |
477 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/macros.rs:155:20
    |
155 |           #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                      ^^^^^^^
    |
   ::: /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/item.rs:467:1
    |
467 | / ast_enum_of_structs! {
468 | |     /// A suffix of an import tree in a `use` item: `Type as Renamed` or `*`.
469 | |     ///
470 | |     /// *This type is available only if Syn is built with the `"full"` feature.*
...   |
493 | |     }
494 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `generate_to_tokens` which comes from the expansion of the macro `ast_enum_of_structs` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/item.rs:500:16
    |
500 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/item.rs:512:16
    |
512 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/item.rs:522:16
    |
522 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/item.rs:534:16
    |
534 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/item.rs:544:16
    |
544 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/item.rs:561:16
    |
561 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_no_non_exhaustive`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/item.rs:562:20
    |
562 |     #[cfg_attr(not(syn_no_non_exhaustive), non_exhaustive)]
    |                    ^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_no_non_exhaustive)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_no_non_exhaustive)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/macros.rs:155:20
    |
155 |           #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                      ^^^^^^^
    |
   ::: /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/item.rs:551:1
    |
551 | / ast_enum_of_structs! {
552 | |     /// An item within an `extern` block.
553 | |     ///
554 | |     /// *This type is available only if Syn is built with the `"full"` feature.*
...   |
600 | |     }
601 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `generate_to_tokens` which comes from the expansion of the macro `ast_enum_of_structs` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/item.rs:607:16
    |
607 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/item.rs:620:16
    |
620 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/item.rs:637:16
    |
637 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/item.rs:651:16
    |
651 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/item.rs:669:16
    |
669 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_no_non_exhaustive`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/item.rs:670:20
    |
670 |     #[cfg_attr(not(syn_no_non_exhaustive), non_exhaustive)]
    |                    ^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_no_non_exhaustive)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_no_non_exhaustive)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/macros.rs:155:20
    |
155 |           #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                      ^^^^^^^
    |
   ::: /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/item.rs:659:1
    |
659 | / ast_enum_of_structs! {
660 | |     /// An item declaration within the definition of a trait.
661 | |     ///
662 | |     /// *This type is available only if Syn is built with the `"full"` feature.*
...   |
708 | |     }
709 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `generate_to_tokens` which comes from the expansion of the macro `ast_enum_of_structs` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/item.rs:715:16
    |
715 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/item.rs:731:16
    |
731 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/item.rs:744:16
    |
744 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/item.rs:761:16
    |
761 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/item.rs:779:16
    |
779 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_no_non_exhaustive`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/item.rs:780:20
    |
780 |     #[cfg_attr(not(syn_no_non_exhaustive), non_exhaustive)]
    |                    ^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_no_non_exhaustive)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_no_non_exhaustive)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/macros.rs:155:20
    |
155 |           #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                      ^^^^^^^
    |
   ::: /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/item.rs:769:1
    |
769 | / ast_enum_of_structs! {
770 | |     /// An item within an impl block.
771 | |     ///
772 | |     /// *This type is available only if Syn is built with the `"full"` feature.*
...   |
818 | |     }
819 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `generate_to_tokens` which comes from the expansion of the macro `ast_enum_of_structs` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/item.rs:825:16
    |
825 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/item.rs:844:16
    |
844 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/item.rs:858:16
    |
858 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/item.rs:876:16
    |
876 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/item.rs:889:16
    |
889 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/item.rs:927:16
    |
927 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/macros.rs:155:20
    |
155 |           #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                      ^^^^^^^
    |
   ::: /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/item.rs:923:1
    |
923 | / ast_enum_of_structs! {
924 | |     /// An argument in a function signature: the `n: usize` in `fn f(n: usize)`.
925 | |     ///
926 | |     /// *This type is available only if Syn is built with the `"full"` feature.*
...   |
938 | |     }
939 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `generate_to_tokens` which comes from the expansion of the macro `ast_enum_of_structs` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/item.rs:949:16
    |
949 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_no_non_exhaustive`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/item.rs:93:15
   |
93 |         #[cfg(syn_no_non_exhaustive)]
   |               ^^^^^^^^^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_no_non_exhaustive)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_no_non_exhaustive)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_no_non_exhaustive`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/item.rs:381:19
    |
381 |             #[cfg(syn_no_non_exhaustive)]
    |                   ^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_no_non_exhaustive)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_no_non_exhaustive)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_no_non_exhaustive`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/item.rs:597:15
    |
597 |         #[cfg(syn_no_non_exhaustive)]
    |               ^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_no_non_exhaustive)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_no_non_exhaustive)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_no_non_exhaustive`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/item.rs:705:15
    |
705 |         #[cfg(syn_no_non_exhaustive)]
    |               ^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_no_non_exhaustive)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_no_non_exhaustive)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_no_non_exhaustive`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/item.rs:815:15
    |
815 |         #[cfg(syn_no_non_exhaustive)]
    |               ^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_no_non_exhaustive)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_no_non_exhaustive)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/item.rs:976:16
    |
976 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/item.rs:1237:16
     |
1237 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/item.rs:1264:16
     |
1264 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/item.rs:1305:16
     |
1305 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/item.rs:1338:16
     |
1338 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/item.rs:1352:16
     |
1352 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/item.rs:1401:16
     |
1401 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/item.rs:1419:16
     |
1419 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/item.rs:1500:16
     |
1500 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/item.rs:1535:16
     |
1535 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/item.rs:1564:16
     |
1564 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/item.rs:1584:16
     |
1584 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/item.rs:1680:16
     |
1680 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/item.rs:1722:16
     |
1722 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/item.rs:1745:16
     |
1745 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/item.rs:1827:16
     |
1827 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/item.rs:1843:16
     |
1843 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/item.rs:1859:16
     |
1859 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/item.rs:1903:16
     |
1903 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/item.rs:1921:16
     |
1921 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/item.rs:1971:16
     |
1971 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/item.rs:1995:16
     |
1995 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/item.rs:2019:16
     |
2019 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/item.rs:2070:16
     |
2070 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/item.rs:2144:16
     |
2144 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

   Compiling hashbrown v0.14.5
     Running `CARGO=/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/bin/cargo CARGO_CRATE_NAME=hashbrown CARGO_MANIFEST_DIR=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.14.5 CARGO_MANIFEST_PATH=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.14.5/Cargo.toml CARGO_PKG_AUTHORS='Amanieu d'\''Antras <amanieu@gmail.com>' CARGO_PKG_DESCRIPTION='A Rust port of Google'\''s SwissTable hash map' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=hashbrown CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/rust-lang/hashbrown' CARGO_PKG_RUST_VERSION=1.63.0 CARGO_PKG_VERSION=0.14.5 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=14 CARGO_PKG_VERSION_PATCH=5 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/jfredett/code/rust-gpu-ex/target/debug/deps:/nix/store/ggqfrwgzpr3v3dkvh4cnmhymnvf6cqja-gcc-14-20241116-lib/lib' rustc --crate-name hashbrown --edition=2021 /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/hashbrown-0.14.5/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=3 -C embed-bitcode=no -C debug-assertions=on --cfg 'feature="ahash"' --cfg 'feature="allocator-api2"' --cfg 'feature="default"' --cfg 'feature="inline-more"' --check-cfg 'cfg(docsrs)' --check-cfg 'cfg(feature, values("ahash", "alloc", "allocator-api2", "compiler_builtins", "core", "default", "equivalent", "inline-more", "nightly", "raw", "rayon", "rkyv", "rustc-dep-of-std", "rustc-internal-api", "serde"))' -C metadata=21696d0a4b831694 -C extra-filename=-21696d0a4b831694 --out-dir /home/jfredett/code/rust-gpu-ex/target/debug/deps -L dependency=/home/jfredett/code/rust-gpu-ex/target/debug/deps --extern ahash=/home/jfredett/code/rust-gpu-ex/target/debug/deps/libahash-dcb95eea30757253.rmeta --extern allocator_api2=/home/jfredett/code/rust-gpu-ex/target/debug/deps/liballocator_api2-361b78b353901c6d.rmeta --cap-lints warn`
warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/item.rs:2200:16
     |
2200 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/item.rs:2260:16
     |
2260 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/item.rs:2290:16
     |
2290 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/item.rs:2319:16
     |
2319 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/item.rs:2392:16
     |
2392 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/item.rs:2410:16
     |
2410 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/item.rs:2522:16
     |
2522 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/item.rs:2603:16
     |
2603 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/item.rs:2628:16
     |
2628 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/item.rs:2668:16
     |
2668 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/item.rs:2726:16
     |
2726 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_no_non_exhaustive`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/item.rs:1817:23
     |
1817 |                 #[cfg(syn_no_non_exhaustive)]
     |                       ^^^^^^^^^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_no_non_exhaustive)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_no_non_exhaustive)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_no_non_exhaustive`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/item.rs:2251:23
     |
2251 |                 #[cfg(syn_no_non_exhaustive)]
     |                       ^^^^^^^^^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_no_non_exhaustive)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_no_non_exhaustive)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_no_non_exhaustive`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/item.rs:2592:27
     |
2592 |                     #[cfg(syn_no_non_exhaustive)]
     |                           ^^^^^^^^^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_no_non_exhaustive)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_no_non_exhaustive)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/item.rs:2771:16
     |
2771 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/item.rs:2787:16
     |
2787 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/item.rs:2799:16
     |
2799 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/item.rs:2815:16
     |
2815 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/item.rs:2830:16
     |
2830 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/item.rs:2843:16
     |
2843 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/item.rs:2861:16
     |
2861 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/item.rs:2873:16
     |
2873 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/item.rs:2888:16
     |
2888 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/item.rs:2903:16
     |
2903 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/item.rs:2929:16
     |
2929 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/item.rs:2942:16
     |
2942 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/item.rs:2964:16
     |
2964 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/item.rs:2979:16
     |
2979 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/item.rs:3001:16
     |
3001 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/item.rs:3023:16
     |
3023 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/item.rs:3034:16
     |
3034 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/item.rs:3043:16
     |
3043 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/item.rs:3050:16
     |
3050 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/item.rs:3059:16
     |
3059 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/item.rs:3066:16
     |
3066 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/item.rs:3075:16
     |
3075 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/item.rs:3091:16
     |
3091 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/item.rs:3110:16
     |
3110 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/item.rs:3130:16
     |
3130 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/item.rs:3139:16
     |
3139 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/item.rs:3155:16
     |
3155 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/item.rs:3177:16
     |
3177 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/item.rs:3193:16
     |
3193 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/item.rs:3202:16
     |
3202 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/item.rs:3212:16
     |
3212 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/item.rs:3226:16
     |
3226 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/item.rs:3237:16
     |
3237 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/item.rs:3273:16
     |
3273 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/item.rs:3301:16
     |
3301 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/file.rs:80:16
   |
80 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
   |                ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/file.rs:93:16
   |
93 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
   |                ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/file.rs:118:16
    |
118 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/lifetime.rs:127:16
    |
127 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/lifetime.rs:145:16
    |
145 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/lit.rs:629:12
    |
629 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/lit.rs:640:12
    |
640 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/lit.rs:652:12
    |
652 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/macros.rs:155:20
    |
155 |           #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                      ^^^^^^^
    |
   ::: /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/lit.rs:14:1
    |
14  | / ast_enum_of_structs! {
15  | |     /// A Rust literal such as a string or integer or boolean.
16  | |     ///
17  | |     /// # Syntax tree enum
...   |
48  | |     }
49  | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `generate_to_tokens` which comes from the expansion of the macro `ast_enum_of_structs` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/lit.rs:666:20
    |
666 |         #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |                    ^^^^^^^
...
703 | lit_extra_traits!(LitStr);
    | ------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `lit_extra_traits` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/lit.rs:666:20
    |
666 |         #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |                    ^^^^^^^
...
704 | lit_extra_traits!(LitByteStr);
    | ----------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `lit_extra_traits` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/lit.rs:666:20
    |
666 |         #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |                    ^^^^^^^
...
705 | lit_extra_traits!(LitByte);
    | -------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `lit_extra_traits` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/lit.rs:666:20
    |
666 |         #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |                    ^^^^^^^
...
706 | lit_extra_traits!(LitChar);
    | -------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `lit_extra_traits` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/lit.rs:666:20
    |
666 |         #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |                    ^^^^^^^
...
707 | lit_extra_traits!(LitInt);
    | ------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `lit_extra_traits` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/lit.rs:666:20
    |
666 |         #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |                    ^^^^^^^
...
708 | lit_extra_traits!(LitFloat);
    | --------------------------- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `lit_extra_traits` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/lit.rs:170:16
    |
170 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/lit.rs:200:16
    |
200 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/lit.rs:744:16
    |
744 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/lit.rs:816:16
    |
816 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/lit.rs:827:16
    |
827 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/lit.rs:838:16
    |
838 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/lit.rs:849:16
    |
849 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/lit.rs:860:16
    |
860 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/lit.rs:871:16
    |
871 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/lit.rs:882:16
    |
882 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/lit.rs:900:16
    |
900 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/lit.rs:907:16
    |
907 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/lit.rs:914:16
    |
914 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/lit.rs:921:16
    |
921 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/lit.rs:928:16
    |
928 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/lit.rs:935:16
    |
935 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/lit.rs:942:16
    |
942 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_no_negative_literal_parse`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/lit.rs:1568:15
     |
1568 |         #[cfg(syn_no_negative_literal_parse)]
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_no_negative_literal_parse)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_no_negative_literal_parse)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/mac.rs:15:16
   |
15 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
   |                ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/mac.rs:29:16
   |
29 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
   |                ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/mac.rs:137:16
    |
137 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/mac.rs:145:16
    |
145 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/mac.rs:177:16
    |
177 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/mac.rs:201:16
    |
201 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
 --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/derive.rs:8:16
  |
8 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "derive")))]
  |                ^^^^^^^
  |
  = help: consider using a Cargo feature instead
  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
           [lints.rust]
           unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
  = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/derive.rs:37:16
   |
37 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "derive")))]
   |                ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/derive.rs:57:16
   |
57 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "derive")))]
   |                ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/derive.rs:70:16
   |
70 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "derive")))]
   |                ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/derive.rs:83:16
   |
83 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "derive")))]
   |                ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/derive.rs:95:16
   |
95 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
   |                ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/derive.rs:231:16
    |
231 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
 --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/op.rs:6:16
  |
6 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
  |                ^^^^^^^
  |
  = help: consider using a Cargo feature instead
  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
           [lints.rust]
           unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
  = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/op.rs:72:16
   |
72 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
   |                ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/op.rs:130:16
    |
130 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/op.rs:165:16
    |
165 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/op.rs:188:16
    |
188 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/op.rs:224:16
    |
224 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
 --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/stmt.rs:7:16
  |
7 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
  |                ^^^^^^^
  |
  = help: consider using a Cargo feature instead
  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
           [lints.rust]
           unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
  = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/stmt.rs:19:16
   |
19 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
   |                ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/stmt.rs:39:16
   |
39 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
   |                ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/stmt.rs:136:16
    |
136 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/stmt.rs:147:16
    |
147 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/stmt.rs:109:20
    |
109 |         #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                    ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/stmt.rs:312:16
    |
312 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/stmt.rs:321:16
    |
321 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/stmt.rs:336:16
    |
336 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/ty.rs:16:16
   |
16 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
   |                ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_no_non_exhaustive`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/ty.rs:17:20
   |
17 |     #[cfg_attr(not(syn_no_non_exhaustive), non_exhaustive)]
   |                    ^^^^^^^^^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_no_non_exhaustive)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_no_non_exhaustive)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/macros.rs:155:20
    |
155 |           #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                      ^^^^^^^
    |
   ::: /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/ty.rs:5:1
    |
5   | / ast_enum_of_structs! {
6   | |     /// The possible types that a Rust value could have.
7   | |     ///
8   | |     /// *This type is available only if Syn is built with the `"derive"` or `"full"`
...   |
88  | |     }
89  | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `generate_to_tokens` which comes from the expansion of the macro `ast_enum_of_structs` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/ty.rs:96:16
   |
96 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
   |                ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/ty.rs:110:16
    |
110 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/ty.rs:128:16
    |
128 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/ty.rs:141:16
    |
141 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/ty.rs:153:16
    |
153 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/ty.rs:164:16
    |
164 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/ty.rs:175:16
    |
175 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/ty.rs:186:16
    |
186 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/ty.rs:199:16
    |
199 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/ty.rs:211:16
    |
211 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/ty.rs:225:16
    |
225 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/ty.rs:239:16
    |
239 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/ty.rs:252:16
    |
252 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/ty.rs:264:16
    |
264 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/ty.rs:276:16
    |
276 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/ty.rs:288:16
    |
288 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/ty.rs:311:16
    |
311 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/ty.rs:323:16
    |
323 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_no_non_exhaustive`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/ty.rs:85:15
   |
85 |         #[cfg(syn_no_non_exhaustive)]
   |               ^^^^^^^^^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_no_non_exhaustive)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_no_non_exhaustive)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/ty.rs:342:16
    |
342 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/ty.rs:656:16
    |
656 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/ty.rs:667:16
    |
667 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/ty.rs:680:16
    |
680 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/ty.rs:703:16
    |
703 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/ty.rs:716:16
    |
716 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/ty.rs:777:16
    |
777 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/ty.rs:786:16
    |
786 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/ty.rs:795:16
    |
795 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/ty.rs:828:16
    |
828 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/ty.rs:837:16
    |
837 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/ty.rs:887:16
    |
887 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/ty.rs:895:16
    |
895 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/ty.rs:949:16
    |
949 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/ty.rs:992:16
    |
992 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/ty.rs:1003:16
     |
1003 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/ty.rs:1024:16
     |
1024 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/ty.rs:1098:16
     |
1098 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/ty.rs:1108:16
     |
1108 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/ty.rs:357:20
    |
357 |         #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                    ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/ty.rs:869:20
    |
869 |         #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                    ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/ty.rs:904:20
    |
904 |         #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                    ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/ty.rs:958:20
    |
958 |         #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                    ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/ty.rs:1128:16
     |
1128 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/ty.rs:1137:16
     |
1137 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/ty.rs:1148:16
     |
1148 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/ty.rs:1162:16
     |
1162 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/ty.rs:1172:16
     |
1172 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/ty.rs:1193:16
     |
1193 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/ty.rs:1200:16
     |
1200 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/ty.rs:1209:16
     |
1209 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/ty.rs:1216:16
     |
1216 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/ty.rs:1224:16
     |
1224 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/ty.rs:1232:16
     |
1232 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/ty.rs:1241:16
     |
1241 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/ty.rs:1250:16
     |
1250 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/ty.rs:1257:16
     |
1257 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/ty.rs:1264:16
     |
1264 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/ty.rs:1277:16
     |
1277 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/ty.rs:1289:16
     |
1289 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/ty.rs:1297:16
     |
1297 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/pat.rs:16:16
   |
16 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
   |                ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_no_non_exhaustive`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/pat.rs:17:20
   |
17 |     #[cfg_attr(not(syn_no_non_exhaustive), non_exhaustive)]
   |                    ^^^^^^^^^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_no_non_exhaustive)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_no_non_exhaustive)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/macros.rs:155:20
    |
155 |           #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                      ^^^^^^^
    |
   ::: /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/pat.rs:5:1
    |
5   | / ast_enum_of_structs! {
6   | |     /// A pattern in a local binding, function signature, match expression, or
7   | |     /// various other places.
8   | |     ///
...   |
97  | |     }
98  | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `generate_to_tokens` which comes from the expansion of the macro `ast_enum_of_structs` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/pat.rs:104:16
    |
104 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/pat.rs:119:16
    |
119 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/pat.rs:136:16
    |
136 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/pat.rs:147:16
    |
147 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/pat.rs:158:16
    |
158 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/pat.rs:176:16
    |
176 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/pat.rs:188:16
    |
188 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/pat.rs:201:16
    |
201 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/pat.rs:214:16
    |
214 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/pat.rs:225:16
    |
225 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/pat.rs:237:16
    |
237 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/pat.rs:251:16
    |
251 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/pat.rs:263:16
    |
263 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/pat.rs:275:16
    |
275 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/pat.rs:288:16
    |
288 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/pat.rs:302:16
    |
302 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_no_non_exhaustive`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/pat.rs:94:15
   |
94 |         #[cfg(syn_no_non_exhaustive)]
   |               ^^^^^^^^^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_no_non_exhaustive)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_no_non_exhaustive)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/pat.rs:318:16
    |
318 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/pat.rs:769:16
    |
769 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/pat.rs:777:16
    |
777 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/pat.rs:791:16
    |
791 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/pat.rs:807:16
    |
807 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/pat.rs:816:16
    |
816 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/pat.rs:826:16
    |
826 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/pat.rs:834:16
    |
834 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/pat.rs:844:16
    |
844 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/pat.rs:853:16
    |
853 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/pat.rs:863:16
    |
863 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/pat.rs:871:16
    |
871 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/pat.rs:879:16
    |
879 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/pat.rs:889:16
    |
889 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/pat.rs:899:16
    |
899 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/pat.rs:907:16
    |
907 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/pat.rs:916:16
    |
916 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
 --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/path.rs:9:16
  |
9 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
  |                ^^^^^^^
  |
  = help: consider using a Cargo feature instead
  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
           [lints.rust]
           unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
  = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/path.rs:35:16
   |
35 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
   |                ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/path.rs:67:16
   |
67 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
   |                ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/path.rs:105:16
    |
105 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/path.rs:130:16
    |
130 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/path.rs:144:16
    |
144 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/path.rs:157:16
    |
157 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/path.rs:171:16
    |
171 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/path.rs:201:16
    |
201 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/path.rs:218:16
    |
218 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/path.rs:225:16
    |
225 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/path.rs:358:16
    |
358 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/path.rs:385:16
    |
385 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/path.rs:397:16
    |
397 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/path.rs:430:16
    |
430 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/path.rs:442:16
    |
442 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/path.rs:505:20
    |
505 |         #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                    ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/path.rs:569:20
    |
569 |         #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                    ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/path.rs:591:20
    |
591 |         #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                    ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/path.rs:693:16
    |
693 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/path.rs:701:16
    |
701 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/path.rs:709:16
    |
709 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/path.rs:724:16
    |
724 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/path.rs:752:16
    |
752 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/path.rs:793:16
    |
793 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/path.rs:802:16
    |
802 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/path.rs:811:16
    |
811 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/punctuated.rs:371:12
    |
371 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/punctuated.rs:1012:12
     |
1012 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_no_const_vec_new`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/punctuated.rs:54:15
   |
54 |     #[cfg(not(syn_no_const_vec_new))]
   |               ^^^^^^^^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_no_const_vec_new)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_no_const_vec_new)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_no_const_vec_new`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/punctuated.rs:63:11
   |
63 |     #[cfg(syn_no_const_vec_new)]
   |           ^^^^^^^^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_no_const_vec_new)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_no_const_vec_new)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/punctuated.rs:267:16
    |
267 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/punctuated.rs:288:16
    |
288 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/punctuated.rs:325:16
    |
325 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/punctuated.rs:346:16
    |
346 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/punctuated.rs:1060:16
     |
1060 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/punctuated.rs:1071:16
     |
1071 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/parse_quote.rs:68:12
   |
68 | #[cfg_attr(doc_cfg, doc(cfg(all(feature = "parsing", feature = "printing"))))]
   |            ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/parse_quote.rs:100:12
    |
100 | #[cfg_attr(doc_cfg, doc(cfg(all(feature = "parsing", feature = "printing"))))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/parse_macro_input.rs:107:12
    |
107 | #[cfg_attr(doc_cfg, doc(cfg(all(feature = "parsing", feature = "proc-macro"))))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/lib.rs:676:16
    |
676 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "visit-mut")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_no_non_exhaustive`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/visit_mut.rs:1217:15
     |
1217 |         #[cfg(syn_no_non_exhaustive)]
     |               ^^^^^^^^^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_no_non_exhaustive)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_no_non_exhaustive)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_no_non_exhaustive`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/visit_mut.rs:1906:15
     |
1906 |         #[cfg(syn_no_non_exhaustive)]
     |               ^^^^^^^^^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_no_non_exhaustive)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_no_non_exhaustive)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_no_non_exhaustive`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/visit_mut.rs:2071:15
     |
2071 |         #[cfg(syn_no_non_exhaustive)]
     |               ^^^^^^^^^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_no_non_exhaustive)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_no_non_exhaustive)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_no_non_exhaustive`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/visit_mut.rs:2207:15
     |
2207 |         #[cfg(syn_no_non_exhaustive)]
     |               ^^^^^^^^^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_no_non_exhaustive)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_no_non_exhaustive)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_no_non_exhaustive`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/visit_mut.rs:2807:15
     |
2807 |         #[cfg(syn_no_non_exhaustive)]
     |               ^^^^^^^^^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_no_non_exhaustive)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_no_non_exhaustive)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_no_non_exhaustive`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/visit_mut.rs:3263:15
     |
3263 |         #[cfg(syn_no_non_exhaustive)]
     |               ^^^^^^^^^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_no_non_exhaustive)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_no_non_exhaustive)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_no_non_exhaustive`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/visit_mut.rs:3392:15
     |
3392 |         #[cfg(syn_no_non_exhaustive)]
     |               ^^^^^^^^^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_no_non_exhaustive)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_no_non_exhaustive)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
 --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:7:12
  |
7 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
  |            ^^^^^^^
  |
  = help: consider using a Cargo feature instead
  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
           [lints.rust]
           unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
  = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:17:12
   |
17 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
   |            ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:29:12
   |
29 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
   |            ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:43:12
   |
43 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
   |            ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:46:12
   |
46 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
   |            ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:53:12
   |
53 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
   |            ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:66:12
   |
66 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
   |            ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:77:12
   |
77 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
   |            ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:80:12
   |
80 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
   |            ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:87:12
   |
87 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
   |            ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:98:12
   |
98 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
   |            ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:108:12
    |
108 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:120:12
    |
120 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:135:12
    |
135 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:146:12
    |
146 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:157:12
    |
157 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:168:12
    |
168 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:179:12
    |
179 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:189:12
    |
189 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: `ahash` (lib) generated 44 warnings
warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:202:12
    |
202 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:282:12
    |
282 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:293:12
    |
293 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:305:12
    |
305 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:317:12
    |
317 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

     Running `CARGO=/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/bin/cargo CARGO_CRATE_NAME=spirv_std_types CARGO_MANIFEST_DIR=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-types-0.9.0 CARGO_MANIFEST_PATH=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-types-0.9.0/Cargo.toml CARGO_PKG_AUTHORS='Embark <opensource@embark-studios.com>' CARGO_PKG_DESCRIPTION='SPIR-V types shared between spirv-std and spirv-std-macros' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=spirv-std-types CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/EmbarkStudios/rust-gpu' CARGO_PKG_RUST_VERSION='' CARGO_PKG_VERSION=0.9.0 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=9 CARGO_PKG_VERSION_PATCH=0 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/jfredett/code/rust-gpu-ex/target/debug/deps:/nix/store/ggqfrwgzpr3v3dkvh4cnmhymnvf6cqja-gcc-14-20241116-lib/lib' rustc --crate-name spirv_std_types --edition=2021 /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-types-0.9.0/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no -C debuginfo=2 --check-cfg 'cfg(docsrs)' --check-cfg 'cfg(feature, values())' -C metadata=c3dbae2ccd76fd8c -C extra-filename=-c3dbae2ccd76fd8c --out-dir /home/jfredett/code/rust-gpu-ex/target/debug/deps -L dependency=/home/jfredett/code/rust-gpu-ex/target/debug/deps --cap-lints warn`
warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:329:12
    |
329 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:341:12
    |
341 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:353:12
    |
353 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:364:12
    |
364 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:375:12
    |
375 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:387:12
    |
387 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:399:12
    |
399 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:411:12
    |
411 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:428:12
    |
428 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:439:12
    |
439 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:451:12
    |
451 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:466:12
    |
466 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:477:12
    |
477 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:490:12
    |
490 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:502:12
    |
502 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:515:12
    |
515 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:525:12
    |
525 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:537:12
    |
537 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:547:12
    |
547 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:560:12
    |
560 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:575:12
    |
575 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:586:12
    |
586 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:597:12
    |
597 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:609:12
    |
609 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:622:12
    |
622 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:635:12
    |
635 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:646:12
    |
646 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:660:12
    |
660 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:671:12
    |
671 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:682:12
    |
682 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:693:12
    |
693 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:705:12
    |
705 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:716:12
    |
716 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:727:12
    |
727 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:740:12
    |
740 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:751:12
    |
751 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:764:12
    |
764 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:776:12
    |
776 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:788:12
    |
788 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:799:12
    |
799 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:809:12
    |
809 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:819:12
    |
819 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:830:12
    |
830 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:840:12
    |
840 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:855:12
    |
855 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:867:12
    |
867 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:878:12
    |
878 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:894:12
    |
894 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:907:12
    |
907 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:920:12
    |
920 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:930:12
    |
930 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:941:12
    |
941 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:953:12
    |
953 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:968:12
    |
968 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:986:12
    |
986 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:997:12
    |
997 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:1010:12
     |
1010 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:1027:12
     |
1027 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:1037:12
     |
1037 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:1064:12
     |
1064 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:1081:12
     |
1081 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:1096:12
     |
1096 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:1111:12
     |
1111 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:1123:12
     |
1123 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:1135:12
     |
1135 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:1152:12
     |
1152 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:1164:12
     |
1164 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:1177:12
     |
1177 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:1191:12
     |
1191 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:1209:12
     |
1209 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:1224:12
     |
1224 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:1243:12
     |
1243 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:1259:12
     |
1259 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:1275:12
     |
1275 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:1289:12
     |
1289 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:1303:12
     |
1303 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:1313:12
     |
1313 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:1324:12
     |
1324 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:1339:12
     |
1339 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:1349:12
     |
1349 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:1362:12
     |
1362 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:1374:12
     |
1374 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:1385:12
     |
1385 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:1395:12
     |
1395 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:1406:12
     |
1406 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:1417:12
     |
1417 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:1428:12
     |
1428 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:1440:12
     |
1440 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:1450:12
     |
1450 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:1461:12
     |
1461 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:1487:12
     |
1487 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:1498:12
     |
1498 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:1511:12
     |
1511 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:1521:12
     |
1521 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:1531:12
     |
1531 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:1542:12
     |
1542 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:1553:12
     |
1553 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:1565:12
     |
1565 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:1577:12
     |
1577 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:1587:12
     |
1587 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:1598:12
     |
1598 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:1611:12
     |
1611 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:1622:12
     |
1622 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:1633:12
     |
1633 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:1645:12
     |
1645 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:1655:12
     |
1655 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:1665:12
     |
1665 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:1678:12
     |
1678 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:1688:12
     |
1688 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:1699:12
     |
1699 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:1710:12
     |
1710 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:1722:12
     |
1722 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:1735:12
     |
1735 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:1738:12
     |
1738 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:1745:12
     |
1745 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:1757:12
     |
1757 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:1767:12
     |
1767 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:1786:12
     |
1786 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:1798:12
     |
1798 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:1810:12
     |
1810 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:1813:12
     |
1813 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:1820:12
     |
1820 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:1835:12
     |
1835 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:1850:12
     |
1850 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:1861:12
     |
1861 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:1873:12
     |
1873 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:1889:12
     |
1889 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:1914:12
     |
1914 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:1926:12
     |
1926 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:1942:12
     |
1942 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:1952:12
     |
1952 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:1962:12
     |
1962 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:1971:12
     |
1971 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:1978:12
     |
1978 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:1987:12
     |
1987 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:2001:12
     |
2001 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:2011:12
     |
2011 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:2021:12
     |
2021 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:2031:12
     |
2031 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:2043:12
     |
2043 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:2055:12
     |
2055 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:2065:12
     |
2065 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:2075:12
     |
2075 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:2085:12
     |
2085 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:2088:12
     |
2088 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:2095:12
     |
2095 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:2104:12
     |
2104 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:2114:12
     |
2114 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:2123:12
     |
2123 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:2134:12
     |
2134 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:2145:12
     |
2145 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:2158:12
     |
2158 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:2168:12
     |
2168 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: creating a shared reference to mutable static is discouraged
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rayon-core-1.12.1/src/registry.rs:167:33
    |
167 |         .or_else(|err| unsafe { THE_REGISTRY.as_ref().ok_or(err) })
    |                                 ^^^^^^^^^^^^^^^^^^^^^ shared reference to mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/static-mut-references.html>
    = note: shared references to mutable statics are dangerous; it's undefined behavior if the static is mutated or if a mutable reference is created for it while the shared reference lives
    = note: `#[warn(static_mut_refs)]` on by default

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:2180:12
     |
2180 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: creating a mutable reference to mutable static is discouraged
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rayon-core-1.12.1/src/registry.rs:194:55
    |
194 |             .map(|registry: Arc<Registry>| unsafe { &*THE_REGISTRY.get_or_insert(registry) })
    |                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ mutable reference to mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/static-mut-references.html>
    = note: mutable references to mutable statics are dangerous; it's undefined behavior if any other pointer to the static is used or if any other reference is created for the static while the mutable reference lives

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:2189:12
     |
2189 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:2198:12
     |
2198 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:2210:12
     |
2210 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:2222:12
     |
2222 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:2232:12
     |
2232 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_no_non_exhaustive`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:276:23
    |
276 |             #[cfg(any(syn_no_non_exhaustive, not(feature = "full")))]
    |                       ^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_no_non_exhaustive)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_no_non_exhaustive)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_no_non_exhaustive`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:849:19
    |
849 |             #[cfg(syn_no_non_exhaustive)]
    |                   ^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_no_non_exhaustive)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_no_non_exhaustive)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_no_non_exhaustive`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:962:19
    |
962 |             #[cfg(syn_no_non_exhaustive)]
    |                   ^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_no_non_exhaustive)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_no_non_exhaustive)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_no_non_exhaustive`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:1058:19
     |
1058 |             #[cfg(syn_no_non_exhaustive)]
     |                   ^^^^^^^^^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_no_non_exhaustive)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_no_non_exhaustive)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_no_non_exhaustive`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:1481:19
     |
1481 |             #[cfg(syn_no_non_exhaustive)]
     |                   ^^^^^^^^^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_no_non_exhaustive)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_no_non_exhaustive)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_no_non_exhaustive`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:1829:19
     |
1829 |             #[cfg(syn_no_non_exhaustive)]
     |                   ^^^^^^^^^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_no_non_exhaustive)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_no_non_exhaustive)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_no_non_exhaustive`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/gen/clone.rs:1908:19
     |
1908 |             #[cfg(syn_no_non_exhaustive)]
     |                   ^^^^^^^^^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_no_non_exhaustive)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_no_non_exhaustive)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/parse.rs:1065:12
     |
1065 | #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/parse.rs:1072:12
     |
1072 | #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/parse.rs:1083:12
     |
1083 | #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/parse.rs:1090:12
     |
1090 | #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/parse.rs:1100:12
     |
1100 | #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/parse.rs:1116:12
     |
1116 | #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/parse.rs:1126:12
     |
1126 | #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |            ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-1.0.109/src/reserved.rs:29:12
   |
29 | #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
   |            ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: `spirv-std-types` (lib) generated 2 warnings (2 duplicates)
   Compiling regex-automata v0.1.10
     Running `CARGO=/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/bin/cargo CARGO_CRATE_NAME=regex_automata CARGO_MANIFEST_DIR=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/regex-automata-0.1.10 CARGO_MANIFEST_PATH=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/regex-automata-0.1.10/Cargo.toml CARGO_PKG_AUTHORS='Andrew Gallant <jamslam@gmail.com>' CARGO_PKG_DESCRIPTION='Automata construction and matching using regular expressions.' CARGO_PKG_HOMEPAGE='https://github.com/BurntSushi/regex-automata' CARGO_PKG_LICENSE=Unlicense/MIT CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=regex-automata CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/BurntSushi/regex-automata' CARGO_PKG_RUST_VERSION='' CARGO_PKG_VERSION=0.1.10 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=1 CARGO_PKG_VERSION_PATCH=10 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/jfredett/code/rust-gpu-ex/target/debug/deps:/nix/store/ggqfrwgzpr3v3dkvh4cnmhymnvf6cqja-gcc-14-20241116-lib/lib' rustc --crate-name regex_automata --edition=2015 /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/regex-automata-0.1.10/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=3 -C embed-bitcode=no -C debug-assertions=on --cfg 'feature="default"' --cfg 'feature="regex-syntax"' --cfg 'feature="std"' --check-cfg 'cfg(docsrs)' --check-cfg 'cfg(feature, values("default", "fst", "regex-syntax", "std", "transducer"))' -C metadata=d050616c4f88909f -C extra-filename=-d050616c4f88909f --out-dir /home/jfredett/code/rust-gpu-ex/target/debug/deps -L dependency=/home/jfredett/code/rust-gpu-ex/target/debug/deps --extern regex_syntax=/home/jfredett/code/rust-gpu-ex/target/debug/deps/libregex_syntax-260bc7e701b2ef60.rmeta --cap-lints warn`
   Compiling glam v0.29.2
     Running `CARGO=/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/bin/cargo CARGO_CRATE_NAME=glam CARGO_MANIFEST_DIR=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.29.2 CARGO_MANIFEST_PATH=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.29.2/Cargo.toml CARGO_PKG_AUTHORS='Cameron Hart <cameron.hart@gmail.com>' CARGO_PKG_DESCRIPTION='A simple and fast 3D math library for games and graphics' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=glam CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/bitshifter/glam-rs' CARGO_PKG_RUST_VERSION=1.68.2 CARGO_PKG_VERSION=0.29.2 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=29 CARGO_PKG_VERSION_PATCH=2 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/jfredett/code/rust-gpu-ex/target/debug/deps:/nix/store/ggqfrwgzpr3v3dkvh4cnmhymnvf6cqja-gcc-14-20241116-lib/lib' rustc --crate-name glam --edition=2021 /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.29.2/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no -C debuginfo=2 --warn=unexpected_cfgs --check-cfg 'cfg(target_arch, values("spirv"))' --cfg 'feature="default"' --cfg 'feature="std"' --check-cfg 'cfg(docsrs)' --check-cfg 'cfg(feature, values("approx", "bytecheck", "bytemuck", "core-simd", "cuda", "debug-glam-assert", "default", "fast-math", "glam-assert", "libm", "mint", "rand", "rkyv", "scalar-math", "serde", "std"))' -C metadata=06b7fa1243a0c7ae -C extra-filename=-06b7fa1243a0c7ae --out-dir /home/jfredett/code/rust-gpu-ex/target/debug/deps -L dependency=/home/jfredett/code/rust-gpu-ex/target/debug/deps --cap-lints warn`
   Compiling rayon v1.10.0
     Running `CARGO=/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/bin/cargo CARGO_CRATE_NAME=rayon CARGO_MANIFEST_DIR=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rayon-1.10.0 CARGO_MANIFEST_PATH=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rayon-1.10.0/Cargo.toml CARGO_PKG_AUTHORS='Niko Matsakis <niko@alum.mit.edu>:Josh Stone <cuviper@gmail.com>' CARGO_PKG_DESCRIPTION='Simple work-stealing parallelism for Rust' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=rayon CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/rayon-rs/rayon' CARGO_PKG_RUST_VERSION=1.63 CARGO_PKG_VERSION=1.10.0 CARGO_PKG_VERSION_MAJOR=1 CARGO_PKG_VERSION_MINOR=10 CARGO_PKG_VERSION_PATCH=0 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/jfredett/code/rust-gpu-ex/target/debug/deps:/nix/store/ggqfrwgzpr3v3dkvh4cnmhymnvf6cqja-gcc-14-20241116-lib/lib' rustc --crate-name rayon --edition=2021 /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rayon-1.10.0/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no -C debuginfo=2 --check-cfg 'cfg(docsrs)' --check-cfg 'cfg(feature, values("web_spin_lock"))' -C metadata=1c52ff9068700f63 -C extra-filename=-1c52ff9068700f63 --out-dir /home/jfredett/code/rust-gpu-ex/target/debug/deps -L dependency=/home/jfredett/code/rust-gpu-ex/target/debug/deps --extern either=/home/jfredett/code/rust-gpu-ex/target/debug/deps/libeither-18f06598a4be80b6.rmeta --extern rayon_core=/home/jfredett/code/rust-gpu-ex/target/debug/deps/librayon_core-44857fd3f67532a4.rmeta --cap-lints warn`
warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/lib.rs:252:13
    |
252 | #![cfg_attr(target_arch = "spirv", feature(repr_simd))]
    |             ^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: `#[warn(unexpected_cfgs)]` on by default

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/lib.rs:274:7
    |
274 | #[cfg(target_arch = "spirv")]
    |       ^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
 --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/deref.rs:2:12
  |
2 | #[cfg_attr(target_arch = "spirv", repr(simd))]
  |            ^^^^^^^^^^^^^^^^^^^^^
  |
  = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
 --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/deref.rs:3:16
  |
3 | #[cfg_attr(not(target_arch = "spirv"), repr(C))]
  |                ^^^^^^^^^^^^^^^^^^^^^
  |
  = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/deref.rs:10:12
   |
10 | #[cfg_attr(target_arch = "spirv", repr(simd))]
   |            ^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/deref.rs:11:16
   |
11 | #[cfg_attr(not(target_arch = "spirv"), repr(C))]
   |                ^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/deref.rs:19:12
   |
19 | #[cfg_attr(target_arch = "spirv", repr(simd))]
   |            ^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/deref.rs:20:16
   |
20 | #[cfg_attr(not(target_arch = "spirv"), repr(C))]
   |                ^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/deref.rs:29:16
   |
29 | #[cfg_attr(not(target_arch = "spirv"), repr(C))]
   |                ^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/deref.rs:36:16
   |
36 | #[cfg_attr(not(target_arch = "spirv"), repr(C))]
   |                ^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/deref.rs:44:16
   |
44 | #[cfg_attr(not(target_arch = "spirv"), repr(C))]
   |                ^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
 --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/bool/bvec2.rs:3:11
  |
3 | #[cfg(not(target_arch = "spirv"))]
  |           ^^^^^^^^^^^^^^^^^^^^^
  |
  = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/bool/bvec2.rs:164:11
    |
164 | #[cfg(not(target_arch = "spirv"))]
    |           ^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/bool/bvec2.rs:172:11
    |
172 | #[cfg(not(target_arch = "spirv"))]
    |           ^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
 --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/bool/bvec3.rs:3:11
  |
3 | #[cfg(not(target_arch = "spirv"))]
  |           ^^^^^^^^^^^^^^^^^^^^^
  |
  = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/bool/bvec3.rs:175:11
    |
175 | #[cfg(not(target_arch = "spirv"))]
    |           ^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/bool/bvec3.rs:190:11
    |
190 | #[cfg(not(target_arch = "spirv"))]
    |           ^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
 --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/bool/bvec4.rs:3:11
  |
3 | #[cfg(not(target_arch = "spirv"))]
  |           ^^^^^^^^^^^^^^^^^^^^^
  |
  = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/bool/bvec4.rs:183:11
    |
183 | #[cfg(not(target_arch = "spirv"))]
    |           ^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/bool/bvec4.rs:199:11
    |
199 | #[cfg(not(target_arch = "spirv"))]
    |           ^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
 --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/bool/sse2/bvec3a.rs:3:11
  |
3 | #[cfg(not(target_arch = "spirv"))]
  |           ^^^^^^^^^^^^^^^^^^^^^
  |
  = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/bool/sse2/bvec3a.rs:196:11
    |
196 | #[cfg(not(target_arch = "spirv"))]
    |           ^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/bool/sse2/bvec3a.rs:211:11
    |
211 | #[cfg(not(target_arch = "spirv"))]
    |           ^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
 --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/bool/sse2/bvec4a.rs:3:11
  |
3 | #[cfg(not(target_arch = "spirv"))]
  |           ^^^^^^^^^^^^^^^^^^^^^
  |
  = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/bool/sse2/bvec4a.rs:208:11
    |
208 | #[cfg(not(target_arch = "spirv"))]
    |           ^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/bool/sse2/bvec4a.rs:224:11
    |
224 | #[cfg(not(target_arch = "spirv"))]
    |           ^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/f32.rs:70:11
   |
70 | #[cfg(not(target_arch = "spirv"))]
   |           ^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/f32/affine2.rs:327:11
    |
327 | #[cfg(not(target_arch = "spirv"))]
    |           ^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/f32/affine2.rs:337:11
    |
337 | #[cfg(not(target_arch = "spirv"))]
    |           ^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/f32/affine3a.rs:460:11
    |
460 | #[cfg(not(target_arch = "spirv"))]
    |           ^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/f32/affine3a.rs:470:11
    |
470 | #[cfg(not(target_arch = "spirv"))]
    |           ^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
 --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/f32/mat3.rs:4:11
  |
4 | #[cfg(not(target_arch = "spirv"))]
  |           ^^^^^^^^^^^^^^^^^^^^^
  |
  = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/f32/mat3.rs:701:11
    |
701 | #[cfg(not(target_arch = "spirv"))]
    |           ^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/f32/mat3.rs:709:11
    |
709 | #[cfg(not(target_arch = "spirv"))]
    |           ^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/f32/mat3.rs:717:11
    |
717 | #[cfg(not(target_arch = "spirv"))]
    |           ^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/f32/mat3.rs:728:11
    |
728 | #[cfg(not(target_arch = "spirv"))]
    |           ^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
 --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/f32/vec2.rs:5:11
  |
5 | #[cfg(not(target_arch = "spirv"))]
  |           ^^^^^^^^^^^^^^^^^^^^^
  |
  = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/f32/vec2.rs:19:16
   |
19 | #[cfg_attr(not(target_arch = "spirv"), repr(C))]
   |                ^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/f32/vec2.rs:20:12
   |
20 | #[cfg_attr(target_arch = "spirv", repr(simd))]
   |            ^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/f32/vec2.rs:977:11
    |
977 | #[cfg(not(target_arch = "spirv"))]
    |           ^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/f32/vec2.rs:985:11
    |
985 | #[cfg(not(target_arch = "spirv"))]
    |           ^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/f32/vec2.rs:1067:11
     |
1067 | #[cfg(not(target_arch = "spirv"))]
     |           ^^^^^^^^^^^^^^^^^^^^^
     |
     = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/f32/vec2.rs:1074:11
     |
1074 | #[cfg(not(target_arch = "spirv"))]
     |           ^^^^^^^^^^^^^^^^^^^^^
     |
     = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
 --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/f32/vec3.rs:5:11
  |
5 | #[cfg(not(target_arch = "spirv"))]
  |           ^^^^^^^^^^^^^^^^^^^^^
  |
  = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/f32/vec3.rs:18:16
   |
18 | #[cfg_attr(not(target_arch = "spirv"), repr(C))]
   |                ^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/f32/vec3.rs:19:12
   |
19 | #[cfg_attr(target_arch = "spirv", repr(simd))]
   |            ^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/f32/vec3.rs:1069:11
     |
1069 | #[cfg(not(target_arch = "spirv"))]
     |           ^^^^^^^^^^^^^^^^^^^^^
     |
     = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/f32/vec3.rs:1077:11
     |
1077 | #[cfg(not(target_arch = "spirv"))]
     |           ^^^^^^^^^^^^^^^^^^^^^
     |
     = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/f32/vec3.rs:1162:11
     |
1162 | #[cfg(not(target_arch = "spirv"))]
     |           ^^^^^^^^^^^^^^^^^^^^^
     |
     = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/f32/vec3.rs:1169:11
     |
1169 | #[cfg(not(target_arch = "spirv"))]
     |           ^^^^^^^^^^^^^^^^^^^^^
     |
     = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
 --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/f32/sse2/mat2.rs:4:11
  |
4 | #[cfg(not(target_arch = "spirv"))]
  |           ^^^^^^^^^^^^^^^^^^^^^
  |
  = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/f32/sse2/mat2.rs:460:11
    |
460 | #[cfg(not(target_arch = "spirv"))]
    |           ^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/f32/sse2/mat2.rs:468:11
    |
468 | #[cfg(not(target_arch = "spirv"))]
    |           ^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/f32/sse2/mat2.rs:491:11
    |
491 | #[cfg(not(target_arch = "spirv"))]
    |           ^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/f32/sse2/mat2.rs:501:11
    |
501 | #[cfg(not(target_arch = "spirv"))]
    |           ^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
 --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/f32/sse2/mat3a.rs:4:11
  |
4 | #[cfg(not(target_arch = "spirv"))]
  |           ^^^^^^^^^^^^^^^^^^^^^
  |
  = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/f32/sse2/mat3a.rs:712:11
    |
712 | #[cfg(not(target_arch = "spirv"))]
    |           ^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/f32/sse2/mat3a.rs:723:11
    |
723 | #[cfg(not(target_arch = "spirv"))]
    |           ^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
 --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/f32/sse2/mat4.rs:6:11
  |
6 | #[cfg(not(target_arch = "spirv"))]
  |           ^^^^^^^^^^^^^^^^^^^^^
  |
  = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/f32/sse2/mat4.rs:1332:11
     |
1332 | #[cfg(not(target_arch = "spirv"))]
     |           ^^^^^^^^^^^^^^^^^^^^^
     |
     = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/f32/sse2/mat4.rs:1340:11
     |
1340 | #[cfg(not(target_arch = "spirv"))]
     |           ^^^^^^^^^^^^^^^^^^^^^
     |
     = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/f32/sse2/mat4.rs:1348:11
     |
1348 | #[cfg(not(target_arch = "spirv"))]
     |           ^^^^^^^^^^^^^^^^^^^^^
     |
     = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/f32/sse2/mat4.rs:1360:11
     |
1360 | #[cfg(not(target_arch = "spirv"))]
     |           ^^^^^^^^^^^^^^^^^^^^^
     |
     = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/f32/sse2/quat.rs:15:11
   |
15 | #[cfg(not(target_arch = "spirv"))]
   |           ^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/f32/sse2/quat.rs:714:11
    |
714 | #[cfg(not(target_arch = "spirv"))]
    |           ^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/f32/sse2/quat.rs:726:11
    |
726 | #[cfg(not(target_arch = "spirv"))]
    |           ^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/f32/sse2/quat.rs:847:11
    |
847 | #[cfg(not(target_arch = "spirv"))]
    |           ^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
 --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/f32/sse2/vec3a.rs:5:11
  |
5 | #[cfg(not(target_arch = "spirv"))]
  |           ^^^^^^^^^^^^^^^^^^^^^
  |
  = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/f32/sse2/vec3a.rs:1010:11
     |
1010 | #[cfg(not(target_arch = "spirv"))]
     |           ^^^^^^^^^^^^^^^^^^^^^
     |
     = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/f32/sse2/vec3a.rs:1018:11
     |
1018 | #[cfg(not(target_arch = "spirv"))]
     |           ^^^^^^^^^^^^^^^^^^^^^
     |
     = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/f32/sse2/vec3a.rs:1099:11
     |
1099 | #[cfg(not(target_arch = "spirv"))]
     |           ^^^^^^^^^^^^^^^^^^^^^
     |
     = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/f32/sse2/vec3a.rs:1106:11
     |
1106 | #[cfg(not(target_arch = "spirv"))]
     |           ^^^^^^^^^^^^^^^^^^^^^
     |
     = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
 --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/f32/sse2/vec4.rs:5:11
  |
5 | #[cfg(not(target_arch = "spirv"))]
  |           ^^^^^^^^^^^^^^^^^^^^^
  |
  = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/f32/sse2/vec4.rs:930:11
    |
930 | #[cfg(not(target_arch = "spirv"))]
    |           ^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/f32/sse2/vec4.rs:938:11
    |
938 | #[cfg(not(target_arch = "spirv"))]
    |           ^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/f32/sse2/vec4.rs:1021:11
     |
1021 | #[cfg(not(target_arch = "spirv"))]
     |           ^^^^^^^^^^^^^^^^^^^^^
     |
     = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/f32/sse2/vec4.rs:1028:11
     |
1028 | #[cfg(not(target_arch = "spirv"))]
     |           ^^^^^^^^^^^^^^^^^^^^^
     |
     = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/f32.rs:95:48
   |
95 |         #[cfg(not(any(feature = "scalar-math", target_arch = "spirv")))]
   |                                                ^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/f32.rs:127:48
    |
127 |         #[cfg(not(any(feature = "scalar-math", target_arch = "spirv")))]
    |                                                ^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/f64.rs:22:11
   |
22 | #[cfg(not(target_arch = "spirv"))]
   |           ^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/f64/daffine2.rs:317:11
    |
317 | #[cfg(not(target_arch = "spirv"))]
    |           ^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/f64/daffine2.rs:327:11
    |
327 | #[cfg(not(target_arch = "spirv"))]
    |           ^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/f64/daffine3.rs:447:11
    |
447 | #[cfg(not(target_arch = "spirv"))]
    |           ^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/f64/daffine3.rs:457:11
    |
457 | #[cfg(not(target_arch = "spirv"))]
    |           ^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
 --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/f64/dmat2.rs:4:11
  |
4 | #[cfg(not(target_arch = "spirv"))]
  |           ^^^^^^^^^^^^^^^^^^^^^
  |
  = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/f64/dmat2.rs:413:11
    |
413 | #[cfg(not(target_arch = "spirv"))]
    |           ^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/f64/dmat2.rs:421:11
    |
421 | #[cfg(not(target_arch = "spirv"))]
    |           ^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/f64/dmat2.rs:429:11
    |
429 | #[cfg(not(target_arch = "spirv"))]
    |           ^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/f64/dmat2.rs:439:11
    |
439 | #[cfg(not(target_arch = "spirv"))]
    |           ^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
 --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/f64/dmat3.rs:4:11
  |
4 | #[cfg(not(target_arch = "spirv"))]
  |           ^^^^^^^^^^^^^^^^^^^^^
  |
  = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/f64/dmat3.rs:680:11
    |
680 | #[cfg(not(target_arch = "spirv"))]
    |           ^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/f64/dmat3.rs:688:11
    |
688 | #[cfg(not(target_arch = "spirv"))]
    |           ^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/f64/dmat3.rs:696:11
    |
696 | #[cfg(not(target_arch = "spirv"))]
    |           ^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/f64/dmat3.rs:707:11
    |
707 | #[cfg(not(target_arch = "spirv"))]
    |           ^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
 --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/f64/dmat4.rs:4:11
  |
4 | #[cfg(not(target_arch = "spirv"))]
  |           ^^^^^^^^^^^^^^^^^^^^^
  |
  = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/f64/dmat4.rs:1202:11
     |
1202 | #[cfg(not(target_arch = "spirv"))]
     |           ^^^^^^^^^^^^^^^^^^^^^
     |
     = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/f64/dmat4.rs:1210:11
     |
1210 | #[cfg(not(target_arch = "spirv"))]
     |           ^^^^^^^^^^^^^^^^^^^^^
     |
     = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/f64/dmat4.rs:1218:11
     |
1218 | #[cfg(not(target_arch = "spirv"))]
     |           ^^^^^^^^^^^^^^^^^^^^^
     |
     = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/f64/dmat4.rs:1230:11
     |
1230 | #[cfg(not(target_arch = "spirv"))]
     |           ^^^^^^^^^^^^^^^^^^^^^
     |
     = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
 --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/f64/dquat.rs:9:11
  |
9 | #[cfg(not(target_arch = "spirv"))]
  |           ^^^^^^^^^^^^^^^^^^^^^
  |
  = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/f64/dquat.rs:29:16
   |
29 | #[cfg_attr(not(target_arch = "spirv"), repr(C))]
   |                ^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/f64/dquat.rs:30:12
   |
30 | #[cfg_attr(target_arch = "spirv", repr(simd))]
   |            ^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/f64/dquat.rs:647:11
    |
647 | #[cfg(not(target_arch = "spirv"))]
    |           ^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/f64/dquat.rs:659:11
    |
659 | #[cfg(not(target_arch = "spirv"))]
    |           ^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/f64/dquat.rs:780:11
    |
780 | #[cfg(not(target_arch = "spirv"))]
    |           ^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
 --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/f64/dvec2.rs:5:11
  |
5 | #[cfg(not(target_arch = "spirv"))]
  |           ^^^^^^^^^^^^^^^^^^^^^
  |
  = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/f64/dvec2.rs:19:16
   |
19 | #[cfg_attr(not(target_arch = "spirv"), repr(C))]
   |                ^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/f64/dvec2.rs:20:12
   |
20 | #[cfg_attr(target_arch = "spirv", repr(simd))]
   |            ^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/f64/dvec2.rs:977:11
    |
977 | #[cfg(not(target_arch = "spirv"))]
    |           ^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/f64/dvec2.rs:985:11
    |
985 | #[cfg(not(target_arch = "spirv"))]
    |           ^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/f64/dvec2.rs:1067:11
     |
1067 | #[cfg(not(target_arch = "spirv"))]
     |           ^^^^^^^^^^^^^^^^^^^^^
     |
     = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/f64/dvec2.rs:1074:11
     |
1074 | #[cfg(not(target_arch = "spirv"))]
     |           ^^^^^^^^^^^^^^^^^^^^^
     |
     = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
 --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/f64/dvec3.rs:5:11
  |
5 | #[cfg(not(target_arch = "spirv"))]
  |           ^^^^^^^^^^^^^^^^^^^^^
  |
  = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/f64/dvec3.rs:18:16
   |
18 | #[cfg_attr(not(target_arch = "spirv"), repr(C))]
   |                ^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/f64/dvec3.rs:19:12
   |
19 | #[cfg_attr(target_arch = "spirv", repr(simd))]
   |            ^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/f64/dvec3.rs:1075:11
     |
1075 | #[cfg(not(target_arch = "spirv"))]
     |           ^^^^^^^^^^^^^^^^^^^^^
     |
     = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/f64/dvec3.rs:1083:11
     |
1083 | #[cfg(not(target_arch = "spirv"))]
     |           ^^^^^^^^^^^^^^^^^^^^^
     |
     = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/f64/dvec3.rs:1168:11
     |
1168 | #[cfg(not(target_arch = "spirv"))]
     |           ^^^^^^^^^^^^^^^^^^^^^
     |
     = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/f64/dvec3.rs:1175:11
     |
1175 | #[cfg(not(target_arch = "spirv"))]
     |           ^^^^^^^^^^^^^^^^^^^^^
     |
     = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
 --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/f64/dvec4.rs:5:11
  |
5 | #[cfg(not(target_arch = "spirv"))]
  |           ^^^^^^^^^^^^^^^^^^^^^
  |
  = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/f64/dvec4.rs:19:16
   |
19 | #[cfg_attr(not(target_arch = "spirv"), repr(C))]
   |                ^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/f64/dvec4.rs:20:12
   |
20 | #[cfg_attr(target_arch = "spirv", repr(simd))]
   |            ^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/f64/dvec4.rs:1077:11
     |
1077 | #[cfg(not(target_arch = "spirv"))]
     |           ^^^^^^^^^^^^^^^^^^^^^
     |
     = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/f64/dvec4.rs:1085:11
     |
1085 | #[cfg(not(target_arch = "spirv"))]
     |           ^^^^^^^^^^^^^^^^^^^^^
     |
     = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/f64/dvec4.rs:1173:11
     |
1173 | #[cfg(not(target_arch = "spirv"))]
     |           ^^^^^^^^^^^^^^^^^^^^^
     |
     = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/f64/dvec4.rs:1180:11
     |
1180 | #[cfg(not(target_arch = "spirv"))]
     |           ^^^^^^^^^^^^^^^^^^^^^
     |
     = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/f64.rs:58:19
   |
58 |         #[cfg(not(target_arch = "spirv"))]
   |                   ^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/f64.rs:63:15
   |
63 |         #[cfg(target_arch = "spirv")]
   |               ^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/f64.rs:69:41
   |
69 |         #[cfg(not(any(feature = "cuda", target_arch = "spirv")))]
   |                                         ^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/f64.rs:74:37
   |
74 |         #[cfg(any(feature = "cuda", target_arch = "spirv"))]
   |                                     ^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/f64.rs:80:19
   |
80 |         #[cfg(not(target_arch = "spirv"))]
   |                   ^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/f64.rs:85:15
   |
85 |         #[cfg(target_arch = "spirv")]
   |               ^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/f64.rs:91:41
   |
91 |         #[cfg(not(any(feature = "cuda", target_arch = "spirv")))]
   |                                         ^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/f64.rs:96:37
   |
96 |         #[cfg(any(feature = "cuda", target_arch = "spirv"))]
   |                                     ^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
 --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/i32.rs:9:11
  |
9 | #[cfg(not(target_arch = "spirv"))]
  |           ^^^^^^^^^^^^^^^^^^^^^
  |
  = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
 --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/i32/ivec2.rs:5:11
  |
5 | #[cfg(not(target_arch = "spirv"))]
  |           ^^^^^^^^^^^^^^^^^^^^^
  |
  = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/i32/ivec2.rs:17:16
   |
17 | #[cfg_attr(not(target_arch = "spirv"), derive(Hash))]
   |                ^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/i32/ivec2.rs:20:16
   |
20 | #[cfg_attr(not(target_arch = "spirv"), repr(C))]
   |                ^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/i32/ivec2.rs:21:12
   |
21 | #[cfg_attr(target_arch = "spirv", repr(simd))]
   |            ^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/i32/ivec2.rs:719:11
    |
719 | #[cfg(not(target_arch = "spirv"))]
    |           ^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/i32/ivec2.rs:727:11
    |
727 | #[cfg(not(target_arch = "spirv"))]
    |           ^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/i32/ivec2.rs:1106:11
     |
1106 | #[cfg(not(target_arch = "spirv"))]
     |           ^^^^^^^^^^^^^^^^^^^^^
     |
     = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/i32/ivec2.rs:1113:11
     |
1113 | #[cfg(not(target_arch = "spirv"))]
     |           ^^^^^^^^^^^^^^^^^^^^^
     |
     = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
 --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/i32/ivec3.rs:5:11
  |
5 | #[cfg(not(target_arch = "spirv"))]
  |           ^^^^^^^^^^^^^^^^^^^^^
  |
  = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/i32/ivec3.rs:17:16
   |
17 | #[cfg_attr(not(target_arch = "spirv"), derive(Hash))]
   |                ^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/i32/ivec3.rs:19:16
   |
19 | #[cfg_attr(not(target_arch = "spirv"), repr(C))]
   |                ^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/i32/ivec3.rs:20:12
   |
20 | #[cfg_attr(target_arch = "spirv", repr(simd))]
   |            ^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/i32/ivec3.rs:779:11
    |
779 | #[cfg(not(target_arch = "spirv"))]
    |           ^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/i32/ivec3.rs:787:11
    |
787 | #[cfg(not(target_arch = "spirv"))]
    |           ^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/i32/ivec3.rs:1196:11
     |
1196 | #[cfg(not(target_arch = "spirv"))]
     |           ^^^^^^^^^^^^^^^^^^^^^
     |
     = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/i32/ivec3.rs:1203:11
     |
1203 | #[cfg(not(target_arch = "spirv"))]
     |           ^^^^^^^^^^^^^^^^^^^^^
     |
     = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
 --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/i32/ivec4.rs:5:11
  |
5 | #[cfg(not(target_arch = "spirv"))]
  |           ^^^^^^^^^^^^^^^^^^^^^
  |
  = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/i32/ivec4.rs:17:16
   |
17 | #[cfg_attr(not(target_arch = "spirv"), derive(Hash))]
   |                ^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/i32/ivec4.rs:20:16
   |
20 | #[cfg_attr(not(target_arch = "spirv"), repr(C))]
   |                ^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/i32/ivec4.rs:21:12
   |
21 | #[cfg_attr(target_arch = "spirv", repr(simd))]
   |            ^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/i32/ivec4.rs:834:11
    |
834 | #[cfg(not(target_arch = "spirv"))]
    |           ^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/i32/ivec4.rs:842:11
    |
842 | #[cfg(not(target_arch = "spirv"))]
    |           ^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/i32/ivec4.rs:1281:11
     |
1281 | #[cfg(not(target_arch = "spirv"))]
     |           ^^^^^^^^^^^^^^^^^^^^^
     |
     = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/i32/ivec4.rs:1288:11
     |
1288 | #[cfg(not(target_arch = "spirv"))]
     |           ^^^^^^^^^^^^^^^^^^^^^
     |
     = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
 --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/u32.rs:9:11
  |
9 | #[cfg(not(target_arch = "spirv"))]
  |           ^^^^^^^^^^^^^^^^^^^^^
  |
  = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
 --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/u32/uvec2.rs:5:11
  |
5 | #[cfg(not(target_arch = "spirv"))]
  |           ^^^^^^^^^^^^^^^^^^^^^
  |
  = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/u32/uvec2.rs:17:16
   |
17 | #[cfg_attr(not(target_arch = "spirv"), derive(Hash))]
   |                ^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/u32/uvec2.rs:20:16
   |
20 | #[cfg_attr(not(target_arch = "spirv"), repr(C))]
   |                ^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/u32/uvec2.rs:21:12
   |
21 | #[cfg_attr(target_arch = "spirv", repr(simd))]
   |            ^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/u32/uvec2.rs:622:11
    |
622 | #[cfg(not(target_arch = "spirv"))]
    |           ^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/u32/uvec2.rs:630:11
    |
630 | #[cfg(not(target_arch = "spirv"))]
    |           ^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/u32/uvec2.rs:998:11
    |
998 | #[cfg(not(target_arch = "spirv"))]
    |           ^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/u32/uvec2.rs:1005:11
     |
1005 | #[cfg(not(target_arch = "spirv"))]
     |           ^^^^^^^^^^^^^^^^^^^^^
     |
     = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
 --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/u32/uvec3.rs:5:11
  |
5 | #[cfg(not(target_arch = "spirv"))]
  |           ^^^^^^^^^^^^^^^^^^^^^
  |
  = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/u32/uvec3.rs:17:16
   |
17 | #[cfg_attr(not(target_arch = "spirv"), derive(Hash))]
   |                ^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/u32/uvec3.rs:19:16
   |
19 | #[cfg_attr(not(target_arch = "spirv"), repr(C))]
   |                ^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/u32/uvec3.rs:20:12
   |
20 | #[cfg_attr(target_arch = "spirv", repr(simd))]
   |            ^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/u32/uvec3.rs:698:11
    |
698 | #[cfg(not(target_arch = "spirv"))]
    |           ^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/u32/uvec3.rs:706:11
    |
706 | #[cfg(not(target_arch = "spirv"))]
    |           ^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/u32/uvec3.rs:1103:11
     |
1103 | #[cfg(not(target_arch = "spirv"))]
     |           ^^^^^^^^^^^^^^^^^^^^^
     |
     = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/u32/uvec3.rs:1110:11
     |
1110 | #[cfg(not(target_arch = "spirv"))]
     |           ^^^^^^^^^^^^^^^^^^^^^
     |
     = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
 --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/u32/uvec4.rs:5:11
  |
5 | #[cfg(not(target_arch = "spirv"))]
  |           ^^^^^^^^^^^^^^^^^^^^^
  |
  = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/u32/uvec4.rs:17:16
   |
17 | #[cfg_attr(not(target_arch = "spirv"), derive(Hash))]
   |                ^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/u32/uvec4.rs:20:16
   |
20 | #[cfg_attr(not(target_arch = "spirv"), repr(C))]
   |                ^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/u32/uvec4.rs:21:12
   |
21 | #[cfg_attr(target_arch = "spirv", repr(simd))]
   |            ^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/u32/uvec4.rs:745:11
    |
745 | #[cfg(not(target_arch = "spirv"))]
    |           ^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/u32/uvec4.rs:753:11
    |
753 | #[cfg(not(target_arch = "spirv"))]
    |           ^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/u32/uvec4.rs:1179:11
     |
1179 | #[cfg(not(target_arch = "spirv"))]
     |           ^^^^^^^^^^^^^^^^^^^^^
     |
     = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/u32/uvec4.rs:1186:11
     |
1186 | #[cfg(not(target_arch = "spirv"))]
     |           ^^^^^^^^^^^^^^^^^^^^^
     |
     = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
 --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/i64.rs:9:11
  |
9 | #[cfg(not(target_arch = "spirv"))]
  |           ^^^^^^^^^^^^^^^^^^^^^
  |
  = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
 --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/i64/i64vec2.rs:5:11
  |
5 | #[cfg(not(target_arch = "spirv"))]
  |           ^^^^^^^^^^^^^^^^^^^^^
  |
  = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/i64/i64vec2.rs:17:16
   |
17 | #[cfg_attr(not(target_arch = "spirv"), derive(Hash))]
   |                ^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/i64/i64vec2.rs:20:16
   |
20 | #[cfg_attr(not(target_arch = "spirv"), repr(C))]
   |                ^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/i64/i64vec2.rs:21:12
   |
21 | #[cfg_attr(target_arch = "spirv", repr(simd))]
   |            ^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/i64/i64vec2.rs:719:11
    |
719 | #[cfg(not(target_arch = "spirv"))]
    |           ^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/i64/i64vec2.rs:727:11
    |
727 | #[cfg(not(target_arch = "spirv"))]
    |           ^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/i64/i64vec2.rs:1106:11
     |
1106 | #[cfg(not(target_arch = "spirv"))]
     |           ^^^^^^^^^^^^^^^^^^^^^
     |
     = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/i64/i64vec2.rs:1113:11
     |
1113 | #[cfg(not(target_arch = "spirv"))]
     |           ^^^^^^^^^^^^^^^^^^^^^
     |
     = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
 --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/i64/i64vec3.rs:5:11
  |
5 | #[cfg(not(target_arch = "spirv"))]
  |           ^^^^^^^^^^^^^^^^^^^^^
  |
  = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/i64/i64vec3.rs:17:16
   |
17 | #[cfg_attr(not(target_arch = "spirv"), derive(Hash))]
   |                ^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/i64/i64vec3.rs:19:16
   |
19 | #[cfg_attr(not(target_arch = "spirv"), repr(C))]
   |                ^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/i64/i64vec3.rs:20:12
   |
20 | #[cfg_attr(target_arch = "spirv", repr(simd))]
   |            ^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/i64/i64vec3.rs:779:11
    |
779 | #[cfg(not(target_arch = "spirv"))]
    |           ^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/i64/i64vec3.rs:787:11
    |
787 | #[cfg(not(target_arch = "spirv"))]
    |           ^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/i64/i64vec3.rs:1196:11
     |
1196 | #[cfg(not(target_arch = "spirv"))]
     |           ^^^^^^^^^^^^^^^^^^^^^
     |
     = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/i64/i64vec3.rs:1203:11
     |
1203 | #[cfg(not(target_arch = "spirv"))]
     |           ^^^^^^^^^^^^^^^^^^^^^
     |
     = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
 --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/i64/i64vec4.rs:5:11
  |
5 | #[cfg(not(target_arch = "spirv"))]
  |           ^^^^^^^^^^^^^^^^^^^^^
  |
  = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/i64/i64vec4.rs:17:16
   |
17 | #[cfg_attr(not(target_arch = "spirv"), derive(Hash))]
   |                ^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/i64/i64vec4.rs:20:16
   |
20 | #[cfg_attr(not(target_arch = "spirv"), repr(C))]
   |                ^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/i64/i64vec4.rs:21:12
   |
21 | #[cfg_attr(target_arch = "spirv", repr(simd))]
   |            ^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/i64/i64vec4.rs:834:11
    |
834 | #[cfg(not(target_arch = "spirv"))]
    |           ^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/i64/i64vec4.rs:842:11
    |
842 | #[cfg(not(target_arch = "spirv"))]
    |           ^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/i64/i64vec4.rs:1281:11
     |
1281 | #[cfg(not(target_arch = "spirv"))]
     |           ^^^^^^^^^^^^^^^^^^^^^
     |
     = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/i64/i64vec4.rs:1288:11
     |
1288 | #[cfg(not(target_arch = "spirv"))]
     |           ^^^^^^^^^^^^^^^^^^^^^
     |
     = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
 --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/u64.rs:9:11
  |
9 | #[cfg(not(target_arch = "spirv"))]
  |           ^^^^^^^^^^^^^^^^^^^^^
  |
  = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
 --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/u64/u64vec2.rs:5:11
  |
5 | #[cfg(not(target_arch = "spirv"))]
  |           ^^^^^^^^^^^^^^^^^^^^^
  |
  = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/u64/u64vec2.rs:17:16
   |
17 | #[cfg_attr(not(target_arch = "spirv"), derive(Hash))]
   |                ^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/u64/u64vec2.rs:20:16
   |
20 | #[cfg_attr(not(target_arch = "spirv"), repr(C))]
   |                ^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/u64/u64vec2.rs:21:12
   |
21 | #[cfg_attr(target_arch = "spirv", repr(simd))]
   |            ^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/u64/u64vec2.rs:622:11
    |
622 | #[cfg(not(target_arch = "spirv"))]
    |           ^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/u64/u64vec2.rs:630:11
    |
630 | #[cfg(not(target_arch = "spirv"))]
    |           ^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/u64/u64vec2.rs:998:11
    |
998 | #[cfg(not(target_arch = "spirv"))]
    |           ^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/u64/u64vec2.rs:1005:11
     |
1005 | #[cfg(not(target_arch = "spirv"))]
     |           ^^^^^^^^^^^^^^^^^^^^^
     |
     = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
 --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/u64/u64vec3.rs:5:11
  |
5 | #[cfg(not(target_arch = "spirv"))]
  |           ^^^^^^^^^^^^^^^^^^^^^
  |
  = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/u64/u64vec3.rs:17:16
   |
17 | #[cfg_attr(not(target_arch = "spirv"), derive(Hash))]
   |                ^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/u64/u64vec3.rs:19:16
   |
19 | #[cfg_attr(not(target_arch = "spirv"), repr(C))]
   |                ^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/u64/u64vec3.rs:20:12
   |
20 | #[cfg_attr(target_arch = "spirv", repr(simd))]
   |            ^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/u64/u64vec3.rs:698:11
    |
698 | #[cfg(not(target_arch = "spirv"))]
    |           ^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/u64/u64vec3.rs:706:11
    |
706 | #[cfg(not(target_arch = "spirv"))]
    |           ^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/u64/u64vec3.rs:1103:11
     |
1103 | #[cfg(not(target_arch = "spirv"))]
     |           ^^^^^^^^^^^^^^^^^^^^^
     |
     = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/u64/u64vec3.rs:1110:11
     |
1110 | #[cfg(not(target_arch = "spirv"))]
     |           ^^^^^^^^^^^^^^^^^^^^^
     |
     = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
 --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/u64/u64vec4.rs:5:11
  |
5 | #[cfg(not(target_arch = "spirv"))]
  |           ^^^^^^^^^^^^^^^^^^^^^
  |
  = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/u64/u64vec4.rs:17:16
   |
17 | #[cfg_attr(not(target_arch = "spirv"), derive(Hash))]
   |                ^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/u64/u64vec4.rs:20:16
   |
20 | #[cfg_attr(not(target_arch = "spirv"), repr(C))]
   |                ^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/u64/u64vec4.rs:21:12
   |
21 | #[cfg_attr(target_arch = "spirv", repr(simd))]
   |            ^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/u64/u64vec4.rs:745:11
    |
745 | #[cfg(not(target_arch = "spirv"))]
    |           ^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/u64/u64vec4.rs:753:11
    |
753 | #[cfg(not(target_arch = "spirv"))]
    |           ^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/u64/u64vec4.rs:1179:11
     |
1179 | #[cfg(not(target_arch = "spirv"))]
     |           ^^^^^^^^^^^^^^^^^^^^^
     |
     = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/u64/u64vec4.rs:1186:11
     |
1186 | #[cfg(not(target_arch = "spirv"))]
     |           ^^^^^^^^^^^^^^^^^^^^^
     |
     = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

     Running `CARGO=/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/bin/cargo CARGO_CRATE_NAME=object CARGO_MANIFEST_DIR=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/object-0.36.7 CARGO_MANIFEST_PATH=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/object-0.36.7/Cargo.toml CARGO_PKG_AUTHORS='' CARGO_PKG_DESCRIPTION='A unified interface for reading and writing object file formats.' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='Apache-2.0 OR MIT' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=object CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/gimli-rs/object' CARGO_PKG_RUST_VERSION=1.65 CARGO_PKG_VERSION=0.36.7 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=36 CARGO_PKG_VERSION_PATCH=7 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/jfredett/code/rust-gpu-ex/target/debug/deps:/nix/store/ggqfrwgzpr3v3dkvh4cnmhymnvf6cqja-gcc-14-20241116-lib/lib' OUT_DIR=/home/jfredett/code/rust-gpu-ex/target/debug/build/object-62325c30f80f5d4d/out rustc --crate-name object --edition=2018 /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/object-0.36.7/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=3 -C embed-bitcode=no -C debug-assertions=on --cfg 'feature="archive"' --cfg 'feature="coff"' --cfg 'feature="compression"' --cfg 'feature="elf"' --cfg 'feature="macho"' --cfg 'feature="pe"' --cfg 'feature="read"' --cfg 'feature="read_core"' --cfg 'feature="std"' --cfg 'feature="unaligned"' --cfg 'feature="wasm"' --cfg 'feature="write"' --cfg 'feature="write_core"' --cfg 'feature="write_std"' --cfg 'feature="xcoff"' --check-cfg 'cfg(docsrs)' --check-cfg 'cfg(feature, values("all", "alloc", "archive", "build", "build_core", "cargo-all", "coff", "compiler_builtins", "compression", "core", "default", "doc", "elf", "macho", "pe", "read", "read_core", "rustc-dep-of-std", "std", "unaligned", "unstable", "unstable-all", "wasm", "write", "write_core", "write_std", "xcoff"))' -C metadata=849a3b6f6e639b4d -C extra-filename=-849a3b6f6e639b4d --out-dir /home/jfredett/code/rust-gpu-ex/target/debug/deps -L dependency=/home/jfredett/code/rust-gpu-ex/target/debug/deps --extern crc32fast=/home/jfredett/code/rust-gpu-ex/target/debug/deps/libcrc32fast-268ab493df00bf36.rmeta --extern flate2=/home/jfredett/code/rust-gpu-ex/target/debug/deps/libflate2-5e7cb4fc5914e13f.rmeta --extern hashbrown=/home/jfredett/code/rust-gpu-ex/target/debug/deps/libhashbrown-ee9301b93923918e.rmeta --extern indexmap=/home/jfredett/code/rust-gpu-ex/target/debug/deps/libindexmap-08e82cab490e2ea5.rmeta --extern memchr=/home/jfredett/code/rust-gpu-ex/target/debug/deps/libmemchr-f5d0dba28048739b.rmeta --extern ruzstd=/home/jfredett/code/rust-gpu-ex/target/debug/deps/libruzstd-d22b2d3260fd2d81.rmeta --extern wasmparser=/home/jfredett/code/rust-gpu-ex/target/debug/deps/libwasmparser-55b6640fbc75c2ae.rmeta --cap-lints warn --cfg core_error --check-cfg 'cfg(core_error)'`
   Compiling regex-automata v0.4.9
     Running `CARGO=/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/bin/cargo CARGO_CRATE_NAME=regex_automata CARGO_MANIFEST_DIR=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/regex-automata-0.4.9 CARGO_MANIFEST_PATH=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/regex-automata-0.4.9/Cargo.toml CARGO_PKG_AUTHORS='The Rust Project Developers:Andrew Gallant <jamslam@gmail.com>' CARGO_PKG_DESCRIPTION='Automata construction and matching using regular expressions.' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=regex-automata CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/rust-lang/regex/tree/master/regex-automata' CARGO_PKG_RUST_VERSION=1.65 CARGO_PKG_VERSION=0.4.9 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=4 CARGO_PKG_VERSION_PATCH=9 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/jfredett/code/rust-gpu-ex/target/debug/deps:/nix/store/ggqfrwgzpr3v3dkvh4cnmhymnvf6cqja-gcc-14-20241116-lib/lib' rustc --crate-name regex_automata --edition=2021 /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/regex-automata-0.4.9/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=3 -C embed-bitcode=no -C debug-assertions=on --cfg 'feature="alloc"' --cfg 'feature="dfa-onepass"' --cfg 'feature="hybrid"' --cfg 'feature="meta"' --cfg 'feature="nfa-backtrack"' --cfg 'feature="nfa-pikevm"' --cfg 'feature="nfa-thompson"' --cfg 'feature="perf-inline"' --cfg 'feature="perf-literal"' --cfg 'feature="perf-literal-multisubstring"' --cfg 'feature="perf-literal-substring"' --cfg 'feature="std"' --cfg 'feature="syntax"' --cfg 'feature="unicode"' --cfg 'feature="unicode-age"' --cfg 'feature="unicode-bool"' --cfg 'feature="unicode-case"' --cfg 'feature="unicode-gencat"' --cfg 'feature="unicode-perl"' --cfg 'feature="unicode-script"' --cfg 'feature="unicode-segment"' --cfg 'feature="unicode-word-boundary"' --check-cfg 'cfg(docsrs)' --check-cfg 'cfg(feature, values("alloc", "default", "dfa", "dfa-build", "dfa-onepass", "dfa-search", "hybrid", "internal-instrument", "internal-instrument-pikevm", "logging", "meta", "nfa", "nfa-backtrack", "nfa-pikevm", "nfa-thompson", "perf", "perf-inline", "perf-literal", "perf-literal-multisubstring", "perf-literal-substring", "std", "syntax", "unicode", "unicode-age", "unicode-bool", "unicode-case", "unicode-gencat", "unicode-perl", "unicode-script", "unicode-segment", "unicode-word-boundary"))' -C metadata=904b08642c91daeb -C extra-filename=-904b08642c91daeb --out-dir /home/jfredett/code/rust-gpu-ex/target/debug/deps -L dependency=/home/jfredett/code/rust-gpu-ex/target/debug/deps --extern aho_corasick=/home/jfredett/code/rust-gpu-ex/target/debug/deps/libaho_corasick-4321c69f465d1567.rmeta --extern memchr=/home/jfredett/code/rust-gpu-ex/target/debug/deps/libmemchr-f5d0dba28048739b.rmeta --extern regex_syntax=/home/jfredett/code/rust-gpu-ex/target/debug/deps/libregex_syntax-9a505ebdc0aa5b9e.rmeta --cap-lints warn`
     Running `CARGO=/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/bin/cargo CARGO_CFG_FMT_DEBUG=full CARGO_CFG_OVERFLOW_CHECKS='' CARGO_CFG_PANIC=unwind CARGO_CFG_RELOCATION_MODEL=pic CARGO_CFG_TARGET_ABI='' CARGO_CFG_TARGET_ARCH=x86_64 CARGO_CFG_TARGET_ENDIAN=little CARGO_CFG_TARGET_ENV=gnu CARGO_CFG_TARGET_FAMILY=unix CARGO_CFG_TARGET_FEATURE=fxsr,sse,sse2 CARGO_CFG_TARGET_HAS_ATOMIC=16,32,64,8,ptr CARGO_CFG_TARGET_HAS_ATOMIC_EQUAL_ALIGNMENT=16,32,64,8,ptr CARGO_CFG_TARGET_HAS_ATOMIC_LOAD_STORE=16,32,64,8,ptr CARGO_CFG_TARGET_OS=linux CARGO_CFG_TARGET_POINTER_WIDTH=64 CARGO_CFG_TARGET_THREAD_LOCAL='' CARGO_CFG_TARGET_VENDOR=unknown CARGO_CFG_UB_CHECKS='' CARGO_CFG_UNIX='' CARGO_ENCODED_RUSTFLAGS='' CARGO_FEATURE_USE_COMPILED_TOOLS=1 CARGO_MANIFEST_DIR=/home/jfredett/.cargo/git/checkouts/rust-gpu-11142fd2aadc2318/6e2c84d/crates/rustc_codegen_spirv CARGO_MANIFEST_PATH=/home/jfredett/.cargo/git/checkouts/rust-gpu-11142fd2aadc2318/6e2c84d/crates/rustc_codegen_spirv/Cargo.toml CARGO_PKG_AUTHORS='rust-gpu developers:Embark <opensource@embark-studios.com>' CARGO_PKG_DESCRIPTION='SPIR-V code generator backend for rustc' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=rustc_codegen_spirv CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/rust-gpu/rust-gpu' CARGO_PKG_RUST_VERSION='' CARGO_PKG_VERSION=0.9.0 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=9 CARGO_PKG_VERSION_PATCH=0 CARGO_PKG_VERSION_PRE='' DEBUG=false HOST=x86_64-unknown-linux-gnu LD_LIBRARY_PATH='/home/jfredett/code/rust-gpu-ex/target/debug/deps:/home/jfredett/code/rust-gpu-ex/target/debug:/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/lib/rustlib/x86_64-unknown-linux-gnu/lib:/nix/store/ggqfrwgzpr3v3dkvh4cnmhymnvf6cqja-gcc-14-20241116-lib/lib' NUM_JOBS=24 OPT_LEVEL=3 OUT_DIR=/home/jfredett/code/rust-gpu-ex/target/debug/build/rustc_codegen_spirv-6ab65824147f981b/out PROFILE=debug RUSTC=rustc RUSTDOC=rustdoc TARGET=x86_64-unknown-linux-gnu /home/jfredett/code/rust-gpu-ex/target/debug/build/rustc_codegen_spirv-4e74f1f857ce0777/build-script-build`
[rustc_codegen_spirv 0.9.0] cargo:rerun-if-env-changed=RUSTGPU_SKIP_TOOLCHAIN_CHECK
[rustc_codegen_spirv 0.9.0] cargo::rustc-check-cfg=cfg(rustc_codegen_spirv_disable_pqp_cg_ssa)
warning: `rayon-core` (lib) generated 2 warnings
   Compiling num-traits v0.2.19
     Running `CARGO=/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/bin/cargo CARGO_CRATE_NAME=build_script_build CARGO_MANIFEST_DIR=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/num-traits-0.2.19 CARGO_MANIFEST_PATH=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/num-traits-0.2.19/Cargo.toml CARGO_PKG_AUTHORS='The Rust Project Developers' CARGO_PKG_DESCRIPTION='Numeric traits for generic mathematics' CARGO_PKG_HOMEPAGE='https://github.com/rust-num/num-traits' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=num-traits CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/rust-num/num-traits' CARGO_PKG_RUST_VERSION=1.60 CARGO_PKG_VERSION=0.2.19 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=2 CARGO_PKG_VERSION_PATCH=19 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/jfredett/code/rust-gpu-ex/target/debug/deps:/nix/store/ggqfrwgzpr3v3dkvh4cnmhymnvf6cqja-gcc-14-20241116-lib/lib' rustc --crate-name build_script_build --edition=2021 /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/num-traits-0.2.19/build.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type bin --emit=dep-info,link -C opt-level=3 -C embed-bitcode=no -C debug-assertions=on --cfg 'feature="libm"' --check-cfg 'cfg(docsrs)' --check-cfg 'cfg(feature, values("default", "i128", "libm", "std"))' -C metadata=b605db5fb3f294a5 -C extra-filename=-b605db5fb3f294a5 --out-dir /home/jfredett/code/rust-gpu-ex/target/debug/build/num-traits-b605db5fb3f294a5 -L dependency=/home/jfredett/code/rust-gpu-ex/target/debug/deps --extern autocfg=/home/jfredett/code/rust-gpu-ex/target/debug/deps/libautocfg-f9101e019490a951.rlib --cap-lints warn`
     Running `CARGO=/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/bin/cargo CARGO_CFG_FMT_DEBUG=full CARGO_CFG_OVERFLOW_CHECKS='' CARGO_CFG_PANIC=unwind CARGO_CFG_RELOCATION_MODEL=pic CARGO_CFG_TARGET_ABI='' CARGO_CFG_TARGET_ARCH=x86_64 CARGO_CFG_TARGET_ENDIAN=little CARGO_CFG_TARGET_ENV=gnu CARGO_CFG_TARGET_FAMILY=unix CARGO_CFG_TARGET_FEATURE=fxsr,sse,sse2 CARGO_CFG_TARGET_HAS_ATOMIC=16,32,64,8,ptr CARGO_CFG_TARGET_HAS_ATOMIC_EQUAL_ALIGNMENT=16,32,64,8,ptr CARGO_CFG_TARGET_HAS_ATOMIC_LOAD_STORE=16,32,64,8,ptr CARGO_CFG_TARGET_OS=linux CARGO_CFG_TARGET_POINTER_WIDTH=64 CARGO_CFG_TARGET_THREAD_LOCAL='' CARGO_CFG_TARGET_VENDOR=unknown CARGO_CFG_UB_CHECKS='' CARGO_CFG_UNIX='' CARGO_ENCODED_RUSTFLAGS='' CARGO_FEATURE_LIBM=1 CARGO_MANIFEST_DIR=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/num-traits-0.2.19 CARGO_MANIFEST_PATH=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/num-traits-0.2.19/Cargo.toml CARGO_PKG_AUTHORS='The Rust Project Developers' CARGO_PKG_DESCRIPTION='Numeric traits for generic mathematics' CARGO_PKG_HOMEPAGE='https://github.com/rust-num/num-traits' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=num-traits CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/rust-num/num-traits' CARGO_PKG_RUST_VERSION=1.60 CARGO_PKG_VERSION=0.2.19 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=2 CARGO_PKG_VERSION_PATCH=19 CARGO_PKG_VERSION_PRE='' DEBUG=true HOST=x86_64-unknown-linux-gnu LD_LIBRARY_PATH='/home/jfredett/code/rust-gpu-ex/target/debug/deps:/home/jfredett/code/rust-gpu-ex/target/debug:/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/lib/rustlib/x86_64-unknown-linux-gnu/lib:/nix/store/ggqfrwgzpr3v3dkvh4cnmhymnvf6cqja-gcc-14-20241116-lib/lib' NUM_JOBS=24 OPT_LEVEL=0 OUT_DIR=/home/jfredett/code/rust-gpu-ex/target/debug/build/num-traits-b9a85bb11b9e0872/out PROFILE=debug RUSTC=rustc RUSTDOC=rustdoc TARGET=x86_64-unknown-linux-gnu /home/jfredett/code/rust-gpu-ex/target/debug/build/num-traits-b605db5fb3f294a5/build-script-build`
[num-traits 0.2.19] cargo:rustc-check-cfg=cfg(has_total_cmp)
[num-traits 0.2.19] cargo:rustc-cfg=has_total_cmp
[num-traits 0.2.19] cargo:rerun-if-changed=build.rs
     Running `CARGO=/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/bin/cargo CARGO_CRATE_NAME=num_traits CARGO_MANIFEST_DIR=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/num-traits-0.2.19 CARGO_MANIFEST_PATH=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/num-traits-0.2.19/Cargo.toml CARGO_PKG_AUTHORS='The Rust Project Developers' CARGO_PKG_DESCRIPTION='Numeric traits for generic mathematics' CARGO_PKG_HOMEPAGE='https://github.com/rust-num/num-traits' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=num-traits CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/rust-num/num-traits' CARGO_PKG_RUST_VERSION=1.60 CARGO_PKG_VERSION=0.2.19 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=2 CARGO_PKG_VERSION_PATCH=19 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/jfredett/code/rust-gpu-ex/target/debug/deps:/nix/store/ggqfrwgzpr3v3dkvh4cnmhymnvf6cqja-gcc-14-20241116-lib/lib' OUT_DIR=/home/jfredett/code/rust-gpu-ex/target/debug/build/num-traits-b9a85bb11b9e0872/out rustc --crate-name num_traits --edition=2021 /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/num-traits-0.2.19/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no -C debuginfo=2 --cfg 'feature="libm"' --check-cfg 'cfg(docsrs)' --check-cfg 'cfg(feature, values("default", "i128", "libm", "std"))' -C metadata=fefc35fa2cf6114d -C extra-filename=-fefc35fa2cf6114d --out-dir /home/jfredett/code/rust-gpu-ex/target/debug/deps -L dependency=/home/jfredett/code/rust-gpu-ex/target/debug/deps --extern libm=/home/jfredett/code/rust-gpu-ex/target/debug/deps/liblibm-7b2adc15df4485fe.rmeta --cap-lints warn --cfg has_total_cmp --check-cfg 'cfg(has_total_cmp)'`
   Compiling matchers v0.1.0
     Running `CARGO=/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/bin/cargo CARGO_CRATE_NAME=matchers CARGO_MANIFEST_DIR=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/matchers-0.1.0 CARGO_MANIFEST_PATH=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/matchers-0.1.0/Cargo.toml CARGO_PKG_AUTHORS='Eliza Weisman <eliza@buoyant.io>' CARGO_PKG_DESCRIPTION='Regex matching on character and byte streams.
' CARGO_PKG_HOMEPAGE='https://github.com/hawkw/matchers' CARGO_PKG_LICENSE=MIT CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=matchers CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/hawkw/matchers' CARGO_PKG_RUST_VERSION='' CARGO_PKG_VERSION=0.1.0 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=1 CARGO_PKG_VERSION_PATCH=0 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/jfredett/code/rust-gpu-ex/target/debug/deps:/nix/store/ggqfrwgzpr3v3dkvh4cnmhymnvf6cqja-gcc-14-20241116-lib/lib' rustc --crate-name matchers --edition=2018 /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/matchers-0.1.0/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=3 -C embed-bitcode=no -C debug-assertions=on --check-cfg 'cfg(docsrs)' --check-cfg 'cfg(feature, values())' -C metadata=5eab2764d1533903 -C extra-filename=-5eab2764d1533903 --out-dir /home/jfredett/code/rust-gpu-ex/target/debug/deps -L dependency=/home/jfredett/code/rust-gpu-ex/target/debug/deps --extern regex_automata=/home/jfredett/code/rust-gpu-ex/target/debug/deps/libregex_automata-d050616c4f88909f.rmeta --cap-lints warn`
warning: methods `first`, `second`, and `third` are never used
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/glam-0.24.2/src/euler.rs:42:8
   |
39 | pub(crate) trait EulerFromQuaternion<Q: Copy>: Sized + Copy {
   |                  ------------------- methods in this trait
...
42 |     fn first(self, q: Q) -> Self::Output;
   |        ^^^^^
43 |     /// Compute then angle of the second axis (x-X-x)
44 |     fn second(self, q: Q) -> Self::Output;
   |        ^^^^^^
45 |     /// Compute then angle of the third axis (x-x-X)
46 |     fn third(self, q: Q) -> Self::Output;
   |        ^^^^^
   |
   = note: `#[warn(dead_code)]` on by default

warning: `glam` (lib) generated 235 warnings
warning: `regex-syntax` (lib) generated 2 warnings
   Compiling regex v1.11.1
     Running `CARGO=/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/bin/cargo CARGO_CRATE_NAME=regex CARGO_MANIFEST_DIR=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/regex-1.11.1 CARGO_MANIFEST_PATH=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/regex-1.11.1/Cargo.toml CARGO_PKG_AUTHORS='The Rust Project Developers:Andrew Gallant <jamslam@gmail.com>' CARGO_PKG_DESCRIPTION='An implementation of regular expressions for Rust. This implementation uses
finite automata and guarantees linear time matching on all inputs.
' CARGO_PKG_HOMEPAGE='https://github.com/rust-lang/regex' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=regex CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/rust-lang/regex' CARGO_PKG_RUST_VERSION=1.65 CARGO_PKG_VERSION=1.11.1 CARGO_PKG_VERSION_MAJOR=1 CARGO_PKG_VERSION_MINOR=11 CARGO_PKG_VERSION_PATCH=1 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/jfredett/code/rust-gpu-ex/target/debug/deps:/nix/store/ggqfrwgzpr3v3dkvh4cnmhymnvf6cqja-gcc-14-20241116-lib/lib' rustc --crate-name regex --edition=2021 /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/regex-1.11.1/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=3 -C embed-bitcode=no -C debug-assertions=on --cfg 'feature="default"' --cfg 'feature="perf"' --cfg 'feature="perf-backtrack"' --cfg 'feature="perf-cache"' --cfg 'feature="perf-dfa"' --cfg 'feature="perf-inline"' --cfg 'feature="perf-literal"' --cfg 'feature="perf-onepass"' --cfg 'feature="std"' --cfg 'feature="unicode"' --cfg 'feature="unicode-age"' --cfg 'feature="unicode-bool"' --cfg 'feature="unicode-case"' --cfg 'feature="unicode-gencat"' --cfg 'feature="unicode-perl"' --cfg 'feature="unicode-script"' --cfg 'feature="unicode-segment"' --check-cfg 'cfg(docsrs)' --check-cfg 'cfg(feature, values("default", "logging", "pattern", "perf", "perf-backtrack", "perf-cache", "perf-dfa", "perf-dfa-full", "perf-inline", "perf-literal", "perf-onepass", "std", "unicode", "unicode-age", "unicode-bool", "unicode-case", "unicode-gencat", "unicode-perl", "unicode-script", "unicode-segment", "unstable", "use_std"))' -C metadata=076c9867f73638b6 -C extra-filename=-076c9867f73638b6 --out-dir /home/jfredett/code/rust-gpu-ex/target/debug/deps -L dependency=/home/jfredett/code/rust-gpu-ex/target/debug/deps --extern aho_corasick=/home/jfredett/code/rust-gpu-ex/target/debug/deps/libaho_corasick-4321c69f465d1567.rmeta --extern memchr=/home/jfredett/code/rust-gpu-ex/target/debug/deps/libmemchr-f5d0dba28048739b.rmeta --extern regex_automata=/home/jfredett/code/rust-gpu-ex/target/debug/deps/libregex_automata-904b08642c91daeb.rmeta --extern regex_syntax=/home/jfredett/code/rust-gpu-ex/target/debug/deps/libregex_syntax-9a505ebdc0aa5b9e.rmeta --cap-lints warn`
   Compiling sanitize-filename v0.4.0
     Running `CARGO=/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/bin/cargo CARGO_CRATE_NAME=sanitize_filename CARGO_MANIFEST_DIR=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sanitize-filename-0.4.0 CARGO_MANIFEST_PATH=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sanitize-filename-0.4.0/Cargo.toml CARGO_PKG_AUTHORS='Jacob Brown <kardeiz@gmail.com>' CARGO_PKG_DESCRIPTION='A simple filename sanitizer, based on Node'\''s sanitize-filename' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE=MIT CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=sanitize-filename CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/kardeiz/sanitize-filename' CARGO_PKG_RUST_VERSION='' CARGO_PKG_VERSION=0.4.0 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=4 CARGO_PKG_VERSION_PATCH=0 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/jfredett/code/rust-gpu-ex/target/debug/deps:/nix/store/ggqfrwgzpr3v3dkvh4cnmhymnvf6cqja-gcc-14-20241116-lib/lib' rustc --crate-name sanitize_filename --edition=2015 /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sanitize-filename-0.4.0/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C opt-level=3 -C embed-bitcode=no -C debug-assertions=on --check-cfg 'cfg(docsrs)' --check-cfg 'cfg(feature, values())' -C metadata=dc872dfcbd145675 -C extra-filename=-dc872dfcbd145675 --out-dir /home/jfredett/code/rust-gpu-ex/target/debug/deps -L dependency=/home/jfredett/code/rust-gpu-ex/target/debug/deps --extern lazy_static=/home/jfredett/code/rust-gpu-ex/target/debug/deps/liblazy_static-958d282f6ccb92d3.rmeta --extern regex=/home/jfredett/code/rust-gpu-ex/target/debug/deps/libregex-076c9867f73638b6.rmeta --cap-lints warn`
   Compiling spirv-tools-sys v0.8.0
     Running `CARGO=/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/bin/cargo CARGO_CRATE_NAME=build_script_build CARGO_MANIFEST_DIR=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-tools-sys-0.8.0 CARGO_MANIFEST_PATH=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-tools-sys-0.8.0/Cargo.toml CARGO_PKG_AUTHORS='Embark <opensource@embark-studios.com>' CARGO_PKG_DESCRIPTION='Wrapper crate for SPIRV-Tools' CARGO_PKG_HOMEPAGE='https://github.com/EmbarkStudios/spirv-tools-rs' CARGO_PKG_LICENSE=Apache-2.0 CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=spirv-tools-sys CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/EmbarkStudios/spirv-tools-rs' CARGO_PKG_RUST_VERSION='' CARGO_PKG_VERSION=0.8.0 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=8 CARGO_PKG_VERSION_PATCH=0 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/jfredett/code/rust-gpu-ex/target/debug/deps:/nix/store/ggqfrwgzpr3v3dkvh4cnmhymnvf6cqja-gcc-14-20241116-lib/lib' rustc --crate-name build_script_build --edition=2021 /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-tools-sys-0.8.0/build.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type bin --emit=dep-info,link -C opt-level=3 -C embed-bitcode=no -C debug-assertions=on --cfg 'feature="use-compiled-tools"' --check-cfg 'cfg(docsrs)' --check-cfg 'cfg(feature, values("default", "use-compiled-tools", "use-installed-tools"))' -C metadata=0435f2a001b365ca -C extra-filename=-0435f2a001b365ca --out-dir /home/jfredett/code/rust-gpu-ex/target/debug/build/spirv-tools-sys-0435f2a001b365ca -L dependency=/home/jfredett/code/rust-gpu-ex/target/debug/deps --extern cc=/home/jfredett/code/rust-gpu-ex/target/debug/deps/libcc-7d785819edad5406.rlib --cap-lints warn`
     Running `CARGO=/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/bin/cargo CARGO_CFG_FMT_DEBUG=full CARGO_CFG_OVERFLOW_CHECKS='' CARGO_CFG_PANIC=unwind CARGO_CFG_RELOCATION_MODEL=pic CARGO_CFG_TARGET_ABI='' CARGO_CFG_TARGET_ARCH=x86_64 CARGO_CFG_TARGET_ENDIAN=little CARGO_CFG_TARGET_ENV=gnu CARGO_CFG_TARGET_FAMILY=unix CARGO_CFG_TARGET_FEATURE=fxsr,sse,sse2 CARGO_CFG_TARGET_HAS_ATOMIC=16,32,64,8,ptr CARGO_CFG_TARGET_HAS_ATOMIC_EQUAL_ALIGNMENT=16,32,64,8,ptr CARGO_CFG_TARGET_HAS_ATOMIC_LOAD_STORE=16,32,64,8,ptr CARGO_CFG_TARGET_OS=linux CARGO_CFG_TARGET_POINTER_WIDTH=64 CARGO_CFG_TARGET_THREAD_LOCAL='' CARGO_CFG_TARGET_VENDOR=unknown CARGO_CFG_UB_CHECKS='' CARGO_CFG_UNIX='' CARGO_ENCODED_RUSTFLAGS='' CARGO_FEATURE_USE_COMPILED_TOOLS=1 CARGO_MANIFEST_DIR=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-tools-sys-0.8.0 CARGO_MANIFEST_LINKS=spirv-tools CARGO_MANIFEST_PATH=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-tools-sys-0.8.0/Cargo.toml CARGO_PKG_AUTHORS='Embark <opensource@embark-studios.com>' CARGO_PKG_DESCRIPTION='Wrapper crate for SPIRV-Tools' CARGO_PKG_HOMEPAGE='https://github.com/EmbarkStudios/spirv-tools-rs' CARGO_PKG_LICENSE=Apache-2.0 CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=spirv-tools-sys CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/EmbarkStudios/spirv-tools-rs' CARGO_PKG_RUST_VERSION='' CARGO_PKG_VERSION=0.8.0 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=8 CARGO_PKG_VERSION_PATCH=0 CARGO_PKG_VERSION_PRE='' DEBUG=false HOST=x86_64-unknown-linux-gnu LD_LIBRARY_PATH='/home/jfredett/code/rust-gpu-ex/target/debug/deps:/home/jfredett/code/rust-gpu-ex/target/debug:/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/lib/rustlib/x86_64-unknown-linux-gnu/lib:/nix/store/ggqfrwgzpr3v3dkvh4cnmhymnvf6cqja-gcc-14-20241116-lib/lib' NUM_JOBS=24 OPT_LEVEL=3 OUT_DIR=/home/jfredett/code/rust-gpu-ex/target/debug/build/spirv-tools-sys-2ba8ab146f618903/out PROFILE=debug RUSTC=rustc RUSTDOC=rustdoc TARGET=x86_64-unknown-linux-gnu /home/jfredett/code/rust-gpu-ex/target/debug/build/spirv-tools-sys-0435f2a001b365ca/build-script-build`
[spirv-tools-sys 0.8.0] OPT_LEVEL = Some(3)
[spirv-tools-sys 0.8.0] OUT_DIR = Some(/home/jfredett/code/rust-gpu-ex/target/debug/build/spirv-tools-sys-2ba8ab146f618903/out)
[spirv-tools-sys 0.8.0] TARGET = Some(x86_64-unknown-linux-gnu)
[spirv-tools-sys 0.8.0] HOST = Some(x86_64-unknown-linux-gnu)
[spirv-tools-sys 0.8.0] cargo:rerun-if-env-changed=CC_x86_64-unknown-linux-gnu
[spirv-tools-sys 0.8.0] CC_x86_64-unknown-linux-gnu = None
[spirv-tools-sys 0.8.0] cargo:rerun-if-env-changed=CC_x86_64_unknown_linux_gnu
[spirv-tools-sys 0.8.0] CC_x86_64_unknown_linux_gnu = None
[spirv-tools-sys 0.8.0] cargo:rerun-if-env-changed=HOST_CC
[spirv-tools-sys 0.8.0] HOST_CC = None
[spirv-tools-sys 0.8.0] cargo:rerun-if-env-changed=CC
[spirv-tools-sys 0.8.0] CC = None
[spirv-tools-sys 0.8.0] cargo:rerun-if-env-changed=CC_ENABLE_DEBUG_OUTPUT
[spirv-tools-sys 0.8.0] RUSTC_WRAPPER = None
[spirv-tools-sys 0.8.0] cargo:rerun-if-env-changed=CRATE_CC_NO_DEFAULTS
[spirv-tools-sys 0.8.0] CRATE_CC_NO_DEFAULTS = None
[spirv-tools-sys 0.8.0] DEBUG = Some(false)
[spirv-tools-sys 0.8.0] cargo:rerun-if-env-changed=CFLAGS_x86_64-unknown-linux-gnu
[spirv-tools-sys 0.8.0] CFLAGS_x86_64-unknown-linux-gnu = None
[spirv-tools-sys 0.8.0] cargo:rerun-if-env-changed=CFLAGS_x86_64_unknown_linux_gnu
[spirv-tools-sys 0.8.0] CFLAGS_x86_64_unknown_linux_gnu = None
[spirv-tools-sys 0.8.0] cargo:rerun-if-env-changed=HOST_CFLAGS
[spirv-tools-sys 0.8.0] HOST_CFLAGS = None
[spirv-tools-sys 0.8.0] cargo:rerun-if-env-changed=CFLAGS
[spirv-tools-sys 0.8.0] CFLAGS = None
[spirv-tools-sys 0.8.0] CARGO_ENCODED_RUSTFLAGS = Some()
[spirv-tools-sys 0.8.0] cargo:rerun-if-env-changed=CXX_x86_64-unknown-linux-gnu
[spirv-tools-sys 0.8.0] CXX_x86_64-unknown-linux-gnu = None
[spirv-tools-sys 0.8.0] cargo:rerun-if-env-changed=CXX_x86_64_unknown_linux_gnu
[spirv-tools-sys 0.8.0] CXX_x86_64_unknown_linux_gnu = None
[spirv-tools-sys 0.8.0] cargo:rerun-if-env-changed=HOST_CXX
[spirv-tools-sys 0.8.0] HOST_CXX = None
[spirv-tools-sys 0.8.0] cargo:rerun-if-env-changed=CXX
[spirv-tools-sys 0.8.0] CXX = None
[spirv-tools-sys 0.8.0] cargo:rerun-if-env-changed=CXXFLAGS_x86_64-unknown-linux-gnu
[spirv-tools-sys 0.8.0] CXXFLAGS_x86_64-unknown-linux-gnu = None
[spirv-tools-sys 0.8.0] cargo:rerun-if-env-changed=CXXFLAGS_x86_64_unknown_linux_gnu
[spirv-tools-sys 0.8.0] CXXFLAGS_x86_64_unknown_linux_gnu = None
[spirv-tools-sys 0.8.0] cargo:rerun-if-env-changed=HOST_CXXFLAGS
[spirv-tools-sys 0.8.0] HOST_CXXFLAGS = None
[spirv-tools-sys 0.8.0] cargo:rerun-if-env-changed=CXXFLAGS
[spirv-tools-sys 0.8.0] CXXFLAGS = None
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: `syn` (lib) generated 889 warnings (90 duplicates)
   Compiling spirv-std-macros v0.9.0
     Running `CARGO=/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/bin/cargo CARGO_CRATE_NAME=spirv_std_macros CARGO_MANIFEST_DIR=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-macros-0.9.0 CARGO_MANIFEST_PATH=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-macros-0.9.0/Cargo.toml CARGO_PKG_AUTHORS='Embark <opensource@embark-studios.com>' CARGO_PKG_DESCRIPTION='Macros for spirv-std' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=spirv-std-macros CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/EmbarkStudios/rust-gpu' CARGO_PKG_RUST_VERSION='' CARGO_PKG_VERSION=0.9.0 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=9 CARGO_PKG_VERSION_PATCH=0 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/jfredett/code/rust-gpu-ex/target/debug/deps:/nix/store/ggqfrwgzpr3v3dkvh4cnmhymnvf6cqja-gcc-14-20241116-lib/lib' rustc --crate-name spirv_std_macros --edition=2021 /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-macros-0.9.0/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type proc-macro --emit=dep-info,link -C prefer-dynamic -C opt-level=3 -C embed-bitcode=no -C debug-assertions=on --check-cfg 'cfg(docsrs)' --check-cfg 'cfg(feature, values())' -C metadata=e77a3177bef87cea -C extra-filename=-e77a3177bef87cea --out-dir /home/jfredett/code/rust-gpu-ex/target/debug/deps -L dependency=/home/jfredett/code/rust-gpu-ex/target/debug/deps --extern proc_macro2=/home/jfredett/code/rust-gpu-ex/target/debug/deps/libproc_macro2-2990a941f70f10f3.rlib --extern quote=/home/jfredett/code/rust-gpu-ex/target/debug/deps/libquote-d9aa7c945a8df305.rlib --extern spirv_std_types=/home/jfredett/code/rust-gpu-ex/target/debug/deps/libspirv_std_types-8663783bcf3a59a0.rlib --extern syn=/home/jfredett/code/rust-gpu-ex/target/debug/deps/libsyn-388639f3b5be02fa.rlib --extern proc_macro --cap-lints warn`
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
   Compiling serde_derive v1.0.217
     Running `CARGO=/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/bin/cargo CARGO_CRATE_NAME=serde_derive CARGO_MANIFEST_DIR=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde_derive-1.0.217 CARGO_MANIFEST_PATH=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde_derive-1.0.217/Cargo.toml CARGO_PKG_AUTHORS='Erick Tryzelaar <erick.tryzelaar@gmail.com>:David Tolnay <dtolnay@gmail.com>' CARGO_PKG_DESCRIPTION='Macros 1.1 implementation of #[derive(Serialize, Deserialize)]' CARGO_PKG_HOMEPAGE='https://serde.rs' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=serde_derive CARGO_PKG_README=crates-io.md CARGO_PKG_REPOSITORY='https://github.com/serde-rs/serde' CARGO_PKG_RUST_VERSION=1.61 CARGO_PKG_VERSION=1.0.217 CARGO_PKG_VERSION_MAJOR=1 CARGO_PKG_VERSION_MINOR=0 CARGO_PKG_VERSION_PATCH=217 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/jfredett/code/rust-gpu-ex/target/debug/deps:/nix/store/ggqfrwgzpr3v3dkvh4cnmhymnvf6cqja-gcc-14-20241116-lib/lib' rustc --crate-name serde_derive --edition=2015 /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde_derive-1.0.217/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type proc-macro --emit=dep-info,link -C prefer-dynamic -C opt-level=3 -C embed-bitcode=no -C debug-assertions=on --cfg 'feature="default"' --check-cfg 'cfg(docsrs)' --check-cfg 'cfg(feature, values("default", "deserialize_in_place"))' -C metadata=fbe5039d847a6b5d -C extra-filename=-fbe5039d847a6b5d --out-dir /home/jfredett/code/rust-gpu-ex/target/debug/deps -L dependency=/home/jfredett/code/rust-gpu-ex/target/debug/deps --extern proc_macro2=/home/jfredett/code/rust-gpu-ex/target/debug/deps/libproc_macro2-2990a941f70f10f3.rlib --extern quote=/home/jfredett/code/rust-gpu-ex/target/debug/deps/libquote-d9aa7c945a8df305.rlib --extern syn=/home/jfredett/code/rust-gpu-ex/target/debug/deps/libsyn-19fd017e5184929f.rlib --extern proc_macro --cap-lints warn`
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
   Compiling tracing-attributes v0.1.28
     Running `CARGO=/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/bin/cargo CARGO_CRATE_NAME=tracing_attributes CARGO_MANIFEST_DIR=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tracing-attributes-0.1.28 CARGO_MANIFEST_PATH=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tracing-attributes-0.1.28/Cargo.toml CARGO_PKG_AUTHORS='Tokio Contributors <team@tokio.rs>:Eliza Weisman <eliza@buoyant.io>:David Barsky <dbarsky@amazon.com>' CARGO_PKG_DESCRIPTION='Procedural macro attributes for automatically instrumenting functions.
' CARGO_PKG_HOMEPAGE='https://tokio.rs' CARGO_PKG_LICENSE=MIT CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=tracing-attributes CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/tokio-rs/tracing' CARGO_PKG_RUST_VERSION=1.63.0 CARGO_PKG_VERSION=0.1.28 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=1 CARGO_PKG_VERSION_PATCH=28 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/jfredett/code/rust-gpu-ex/target/debug/deps:/nix/store/ggqfrwgzpr3v3dkvh4cnmhymnvf6cqja-gcc-14-20241116-lib/lib' rustc --crate-name tracing_attributes --edition=2018 /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tracing-attributes-0.1.28/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type proc-macro --emit=dep-info,link -C prefer-dynamic -C opt-level=3 -C embed-bitcode=no --warn=unexpected_cfgs --check-cfg 'cfg(flaky_tests)' --check-cfg 'cfg(tracing_unstable)' -C debug-assertions=on --check-cfg 'cfg(docsrs)' --check-cfg 'cfg(feature, values("async-await"))' -C metadata=ea1beec60bb5d246 -C extra-filename=-ea1beec60bb5d246 --out-dir /home/jfredett/code/rust-gpu-ex/target/debug/deps -L dependency=/home/jfredett/code/rust-gpu-ex/target/debug/deps --extern proc_macro2=/home/jfredett/code/rust-gpu-ex/target/debug/deps/libproc_macro2-2990a941f70f10f3.rlib --extern quote=/home/jfredett/code/rust-gpu-ex/target/debug/deps/libquote-d9aa7c945a8df305.rlib --extern syn=/home/jfredett/code/rust-gpu-ex/target/debug/deps/libsyn-19fd017e5184929f.rlib --extern proc_macro --cap-lints warn`
   Compiling bytemuck_derive v1.8.1
     Running `CARGO=/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/bin/cargo CARGO_CRATE_NAME=bytemuck_derive CARGO_MANIFEST_DIR=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytemuck_derive-1.8.1 CARGO_MANIFEST_PATH=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytemuck_derive-1.8.1/Cargo.toml CARGO_PKG_AUTHORS='Lokathor <zefria@gmail.com>' CARGO_PKG_DESCRIPTION='derive proc-macros for `bytemuck`' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='Zlib OR Apache-2.0 OR MIT' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=bytemuck_derive CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/Lokathor/bytemuck' CARGO_PKG_RUST_VERSION='' CARGO_PKG_VERSION=1.8.1 CARGO_PKG_VERSION_MAJOR=1 CARGO_PKG_VERSION_MINOR=8 CARGO_PKG_VERSION_PATCH=1 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/jfredett/code/rust-gpu-ex/target/debug/deps:/nix/store/ggqfrwgzpr3v3dkvh4cnmhymnvf6cqja-gcc-14-20241116-lib/lib' rustc --crate-name bytemuck_derive --edition=2018 /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bytemuck_derive-1.8.1/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type proc-macro --emit=dep-info,link -C prefer-dynamic -C opt-level=3 -C embed-bitcode=no -C debug-assertions=on --check-cfg 'cfg(docsrs)' --check-cfg 'cfg(feature, values())' -C metadata=daa61b6e7ec3fe0b -C extra-filename=-daa61b6e7ec3fe0b --out-dir /home/jfredett/code/rust-gpu-ex/target/debug/deps -L dependency=/home/jfredett/code/rust-gpu-ex/target/debug/deps --extern proc_macro2=/home/jfredett/code/rust-gpu-ex/target/debug/deps/libproc_macro2-2990a941f70f10f3.rlib --extern quote=/home/jfredett/code/rust-gpu-ex/target/debug/deps/libquote-d9aa7c945a8df305.rlib --extern syn=/home/jfredett/code/rust-gpu-ex/target/debug/deps/libsyn-19fd017e5184929f.rlib --extern proc_macro --cap-lints warn`
   Compiling derive_more v0.99.19
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
     Running `CARGO=/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/bin/cargo CARGO_CRATE_NAME=derive_more CARGO_MANIFEST_DIR=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/derive_more-0.99.19 CARGO_MANIFEST_PATH=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/derive_more-0.99.19/Cargo.toml CARGO_PKG_AUTHORS='Jelte Fennema <github-tech@jeltef.nl>' CARGO_PKG_DESCRIPTION='Adds #[derive(x)] macros for more traits' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE=MIT CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=derive_more CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/JelteF/derive_more' CARGO_PKG_RUST_VERSION='' CARGO_PKG_VERSION=0.99.19 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=99 CARGO_PKG_VERSION_PATCH=19 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/jfredett/code/rust-gpu-ex/target/debug/deps:/nix/store/ggqfrwgzpr3v3dkvh4cnmhymnvf6cqja-gcc-14-20241116-lib/lib' rustc --crate-name derive_more --edition=2018 /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/derive_more-0.99.19/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type proc-macro --emit=dep-info,link -C prefer-dynamic -C opt-level=3 -C embed-bitcode=no -C debug-assertions=on --cfg 'feature="add"' --cfg 'feature="add_assign"' --cfg 'feature="as_mut"' --cfg 'feature="as_ref"' --cfg 'feature="constructor"' --cfg 'feature="convert_case"' --cfg 'feature="default"' --cfg 'feature="deref"' --cfg 'feature="deref_mut"' --cfg 'feature="display"' --cfg 'feature="error"' --cfg 'feature="from"' --cfg 'feature="from_str"' --cfg 'feature="index"' --cfg 'feature="index_mut"' --cfg 'feature="into"' --cfg 'feature="into_iterator"' --cfg 'feature="is_variant"' --cfg 'feature="iterator"' --cfg 'feature="mul"' --cfg 'feature="mul_assign"' --cfg 'feature="not"' --cfg 'feature="rustc_version"' --cfg 'feature="sum"' --cfg 'feature="try_into"' --cfg 'feature="unwrap"' --check-cfg 'cfg(docsrs)' --check-cfg 'cfg(feature, values("add", "add_assign", "as_mut", "as_ref", "constructor", "convert_case", "default", "deref", "deref_mut", "display", "error", "from", "from_str", "generate-parsing-rs", "index", "index_mut", "into", "into_iterator", "is_variant", "iterator", "mul", "mul_assign", "nightly", "not", "peg", "rustc_version", "sum", "testing-helpers", "track-caller", "try_into", "unwrap"))' -C metadata=fd78dc3abc020bb9 -C extra-filename=-fd78dc3abc020bb9 --out-dir /home/jfredett/code/rust-gpu-ex/target/debug/deps -L dependency=/home/jfredett/code/rust-gpu-ex/target/debug/deps --extern convert_case=/home/jfredett/code/rust-gpu-ex/target/debug/deps/libconvert_case-7a9bac0b381cd02b.rlib --extern proc_macro2=/home/jfredett/code/rust-gpu-ex/target/debug/deps/libproc_macro2-2990a941f70f10f3.rlib --extern quote=/home/jfredett/code/rust-gpu-ex/target/debug/deps/libquote-d9aa7c945a8df305.rlib --extern syn=/home/jfredett/code/rust-gpu-ex/target/debug/deps/libsyn-19fd017e5184929f.rlib --extern proc_macro --cap-lints warn`
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
   Compiling spirv-std v0.9.0
     Running `CARGO=/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/bin/cargo CARGO_CRATE_NAME=spirv_std CARGO_MANIFEST_DIR=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0 CARGO_MANIFEST_PATH=/home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/Cargo.toml CARGO_PKG_AUTHORS='Embark <opensource@embark-studios.com>' CARGO_PKG_DESCRIPTION='Standard functions and types for SPIR-V' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=spirv-std CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/EmbarkStudios/rust-gpu' CARGO_PKG_RUST_VERSION='' CARGO_PKG_VERSION=0.9.0 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=9 CARGO_PKG_VERSION_PATCH=0 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/jfredett/code/rust-gpu-ex/target/debug/deps:/nix/store/ggqfrwgzpr3v3dkvh4cnmhymnvf6cqja-gcc-14-20241116-lib/lib' rustc --crate-name spirv_std --edition=2021 /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no -C debuginfo=2 --cfg 'feature="default"' --check-cfg 'cfg(docsrs)' --check-cfg 'cfg(feature, values("default"))' -C metadata=cf63a239774bab5e -C extra-filename=-cf63a239774bab5e --out-dir /home/jfredett/code/rust-gpu-ex/target/debug/deps -L dependency=/home/jfredett/code/rust-gpu-ex/target/debug/deps --extern bitflags=/home/jfredett/code/rust-gpu-ex/target/debug/deps/libbitflags-560efdb99b117eef.rmeta --extern glam=/home/jfredett/code/rust-gpu-ex/target/debug/deps/libglam-4a054504c3840e47.rmeta --extern num_traits=/home/jfredett/code/rust-gpu-ex/target/debug/deps/libnum_traits-fefc35fa2cf6114d.rmeta --extern spirv_std_macros=/home/jfredett/code/rust-gpu-ex/target/debug/deps/libspirv_std_macros-e77a3177bef87cea.so --extern spirv_std_types=/home/jfredett/code/rust-gpu-ex/target/debug/deps/libspirv_std_types-c3dbae2ccd76fd8c.rmeta --cap-lints warn`
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: unexpected `cfg` condition value: `spirv`
 --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/lib.rs:3:5
  |
3 |     target_arch = "spirv",
  |     ^^^^^^^^^^^^^^^^^^^^^
  |
  = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
  = note: `#[warn(unexpected_cfgs)]` on by default

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/lib.rs:119:22
    |
119 | #[cfg(all(not(test), target_arch = "spirv"))]
    |                      ^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/lib.rs:125:22
    |
125 | #[cfg(all(not(test), target_arch = "spirv"))]
    |                      ^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
 --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/arch.rs:6:7
  |
6 | #[cfg(target_arch = "spirv")]
  |       ^^^^^^^^^^^^^^^^^^^^^
  |
  = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/arch.rs:13:7
   |
13 | #[cfg(target_arch = "spirv")]
   |       ^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `Int64`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/arch.rs:147:5
    |
147 |     target_feature = "Int64",
    |     ^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_feature` are: `10e60`, `2e3`, `3e3r1`, `3e3r2`, `3e3r3`, `3e7`, `7e10`, `a`, `aclass`, `adx`, `aes`, `altivec`, `alu32`, `amx-bf16`, `amx-complex`, `amx-fp16`, `amx-int8`, `amx-tile`, `atomics`, `avx`, `avx2`, `avx512bf16`, `avx512bitalg`, `avx512bw`, `avx512cd`, `avx512dq`, `avx512f`, `avx512fp16`, `avx512ifma`, `avx512vbmi`, `avx512vbmi2`, `avx512vl`, `avx512vnni`, `avx512vp2intersect`, and `avx512vpopcntdq` and 251 more
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `ShaderClockKHR`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/arch.rs:148:5
    |
148 |     target_feature = "ShaderClockKHR",
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_feature` are: `10e60`, `2e3`, `3e3r1`, `3e3r2`, `3e3r3`, `3e7`, `7e10`, `a`, `aclass`, `adx`, `aes`, `altivec`, `alu32`, `amx-bf16`, `amx-complex`, `amx-fp16`, `amx-int8`, `amx-tile`, `atomics`, `avx`, `avx2`, `avx512bf16`, `avx512bitalg`, `avx512bw`, `avx512cd`, `avx512dq`, `avx512f`, `avx512fp16`, `avx512ifma`, `avx512vbmi`, `avx512vbmi2`, `avx512vl`, `avx512vnni`, `avx512vp2intersect`, and `avx512vpopcntdq` and 251 more
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `ext:SPV_KHR_shader_clock`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/arch.rs:149:5
    |
149 |     target_feature = "ext:SPV_KHR_shader_clock"
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_feature` are: `10e60`, `2e3`, `3e3r1`, `3e3r2`, `3e3r3`, `3e7`, `7e10`, `a`, `aclass`, `adx`, `aes`, `altivec`, `alu32`, `amx-bf16`, `amx-complex`, `amx-fp16`, `amx-int8`, `amx-tile`, `atomics`, `avx`, `avx2`, `avx512bf16`, `avx512bitalg`, `avx512bw`, `avx512cd`, `avx512dq`, `avx512f`, `avx512fp16`, `avx512ifma`, `avx512vbmi`, `avx512vbmi2`, `avx512vl`, `avx512vnni`, `avx512vp2intersect`, and `avx512vpopcntdq` and 251 more
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `ShaderClockKHR`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/arch.rs:172:5
    |
172 |     target_feature = "ShaderClockKHR",
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_feature` are: `10e60`, `2e3`, `3e3r1`, `3e3r2`, `3e3r3`, `3e7`, `7e10`, `a`, `aclass`, `adx`, `aes`, `altivec`, `alu32`, `amx-bf16`, `amx-complex`, `amx-fp16`, `amx-int8`, `amx-tile`, `atomics`, `avx`, `avx2`, `avx512bf16`, `avx512bitalg`, `avx512bw`, `avx512cd`, `avx512dq`, `avx512f`, `avx512fp16`, `avx512ifma`, `avx512vbmi`, `avx512vbmi2`, `avx512vl`, `avx512vnni`, `avx512vp2intersect`, and `avx512vpopcntdq` and 251 more
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `ext:SPV_KHR_shader_clock`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/arch.rs:173:5
    |
173 |     target_feature = "ext:SPV_KHR_shader_clock"
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_feature` are: `10e60`, `2e3`, `3e3r1`, `3e3r2`, `3e3r3`, `3e7`, `7e10`, `a`, `aclass`, `adx`, `aes`, `altivec`, `alu32`, `amx-bf16`, `amx-complex`, `amx-fp16`, `amx-int8`, `amx-tile`, `atomics`, `avx`, `avx2`, `avx512bf16`, `avx512bitalg`, `avx512bw`, `avx512cd`, `avx512dq`, `avx512f`, `avx512fp16`, `avx512ifma`, `avx512vbmi`, `avx512vbmi2`, `avx512vl`, `avx512vnni`, `avx512vp2intersect`, and `avx512vpopcntdq` and 251 more
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/arch.rs:192:7
    |
192 | #[cfg(target_arch = "spirv")]
    |       ^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/arch.rs:32:1
   |
32 | #[spirv_std_macros::gpu_only]
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the attribute macro `spirv_std_macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/arch.rs:54:1
   |
54 | #[spirv_std_macros::gpu_only]
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the attribute macro `spirv_std_macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/arch.rs:79:1
   |
79 | #[spirv_std_macros::gpu_only]
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the attribute macro `spirv_std_macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/arch.rs:106:1
    |
106 | #[spirv_std_macros::gpu_only]
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the attribute macro `spirv_std_macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/arch.rs:135:1
    |
135 | #[spirv_std_macros::gpu_only]
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the attribute macro `spirv_std_macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/arch.rs:210:1
    |
210 | #[spirv_std_macros::gpu_only]
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the attribute macro `spirv_std_macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/arch.rs:216:1
    |
216 | #[spirv_std_macros::gpu_only]
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the attribute macro `spirv_std_macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/arch.rs:222:1
    |
222 | #[spirv_std_macros::gpu_only]
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the attribute macro `spirv_std_macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/arch.rs:228:1
    |
228 | #[spirv_std_macros::gpu_only]
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the attribute macro `spirv_std_macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
 --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/arch/atomics.rs:1:7
  |
1 | #[cfg(target_arch = "spirv")]
  |       ^^^^^^^^^^^^^^^^^^^^^
  |
  = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/arch/atomics.rs:13:1
   |
13 | #[spirv_std_macros::gpu_only]
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the attribute macro `spirv_std_macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/arch/atomics.rs:37:1
   |
37 | #[spirv_std_macros::gpu_only]
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the attribute macro `spirv_std_macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/arch/atomics.rs:65:1
   |
65 | #[spirv_std_macros::gpu_only]
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the attribute macro `spirv_std_macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/arch/atomics.rs:101:1
    |
101 | #[spirv_std_macros::gpu_only]
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the attribute macro `spirv_std_macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/arch/atomics.rs:145:1
    |
145 | #[spirv_std_macros::gpu_only]
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the attribute macro `spirv_std_macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/arch/atomics.rs:176:1
    |
176 | #[spirv_std_macros::gpu_only]
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the attribute macro `spirv_std_macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/arch/atomics.rs:207:1
    |
207 | #[spirv_std_macros::gpu_only]
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the attribute macro `spirv_std_macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/arch/atomics.rs:241:1
    |
241 | #[spirv_std_macros::gpu_only]
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the attribute macro `spirv_std_macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/arch/atomics.rs:276:1
    |
276 | #[spirv_std_macros::gpu_only]
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the attribute macro `spirv_std_macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/arch/atomics.rs:311:1
    |
311 | #[spirv_std_macros::gpu_only]
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the attribute macro `spirv_std_macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/arch/atomics.rs:346:1
    |
346 | #[spirv_std_macros::gpu_only]
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the attribute macro `spirv_std_macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/arch/atomics.rs:381:1
    |
381 | #[spirv_std_macros::gpu_only]
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the attribute macro `spirv_std_macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/arch/atomics.rs:415:1
    |
415 | #[spirv_std_macros::gpu_only]
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the attribute macro `spirv_std_macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/arch/atomics.rs:449:1
    |
449 | #[spirv_std_macros::gpu_only]
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the attribute macro `spirv_std_macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/arch/atomics.rs:483:1
    |
483 | #[spirv_std_macros::gpu_only]
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the attribute macro `spirv_std_macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/arch/atomics.rs:518:1
    |
518 | #[spirv_std_macros::gpu_only]
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the attribute macro `spirv_std_macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/arch/atomics.rs:553:1
    |
553 | #[spirv_std_macros::gpu_only]
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the attribute macro `spirv_std_macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/arch/atomics.rs:587:1
    |
587 | #[spirv_std_macros::gpu_only]
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the attribute macro `spirv_std_macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
 --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/arch/barrier.rs:1:7
  |
1 | #[cfg(target_arch = "spirv")]
  |       ^^^^^^^^^^^^^^^^^^^^^
  |
  = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/arch/barrier.rs:33:1
   |
33 | #[spirv_std_macros::gpu_only]
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the attribute macro `spirv_std_macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/arch/barrier.rs:68:1
   |
68 | #[spirv_std_macros::gpu_only]
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the attribute macro `spirv_std_macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/arch/barrier.rs:90:1
   |
90 | #[spirv_std_macros::gpu_only]
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the attribute macro `spirv_std_macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/arch/barrier.rs:107:1
    |
107 | #[spirv_std_macros::gpu_only]
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the attribute macro `spirv_std_macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/arch/barrier.rs:125:1
    |
125 | #[spirv_std_macros::gpu_only]
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the attribute macro `spirv_std_macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/arch/barrier.rs:143:1
    |
143 | #[spirv_std_macros::gpu_only]
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the attribute macro `spirv_std_macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/arch/barrier.rs:162:1
    |
162 | #[spirv_std_macros::gpu_only]
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the attribute macro `spirv_std_macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/arch/barrier.rs:181:1
    |
181 | #[spirv_std_macros::gpu_only]
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the attribute macro `spirv_std_macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
 --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/arch/demote_to_helper_invocation_ext.rs:1:7
  |
1 | #[cfg(target_arch = "spirv")]
  |       ^^^^^^^^^^^^^^^^^^^^^
  |
  = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/arch/demote_to_helper_invocation_ext.rs:20:1
   |
20 | #[spirv_std_macros::gpu_only]
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the attribute macro `spirv_std_macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/arch/demote_to_helper_invocation_ext.rs:33:1
   |
33 | #[spirv_std_macros::gpu_only]
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the attribute macro `spirv_std_macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
 --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/arch/derivative.rs:3:7
  |
3 | #[cfg(target_arch = "spirv")]
  |       ^^^^^^^^^^^^^^^^^^^^^
  |
  = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/arch/derivative.rs:24:1
   |
24 | #[crate::macros::gpu_only]
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the attribute macro `crate::macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/arch/derivative.rs:33:1
   |
33 | #[crate::macros::gpu_only]
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the attribute macro `crate::macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/arch/derivative.rs:45:1
   |
45 | #[crate::macros::gpu_only]
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the attribute macro `crate::macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/arch/derivative.rs:54:1
   |
54 | #[crate::macros::gpu_only]
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the attribute macro `crate::macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/arch/derivative.rs:63:1
   |
63 | #[crate::macros::gpu_only]
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the attribute macro `crate::macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/arch/derivative.rs:75:1
   |
75 | #[crate::macros::gpu_only]
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the attribute macro `crate::macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/arch/derivative.rs:83:1
   |
83 | #[crate::macros::gpu_only]
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the attribute macro `crate::macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/arch/derivative.rs:91:1
   |
91 | #[crate::macros::gpu_only]
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the attribute macro `crate::macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/arch/derivative.rs:99:1
   |
99 | #[crate::macros::gpu_only]
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the attribute macro `crate::macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
 --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/arch/primitive.rs:1:7
  |
1 | #[cfg(target_arch = "spirv")]
  |       ^^^^^^^^^^^^^^^^^^^^^
  |
  = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/arch/primitive.rs:10:1
   |
10 | #[spirv_std_macros::gpu_only]
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the attribute macro `spirv_std_macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/arch/primitive.rs:24:1
   |
24 | #[spirv_std_macros::gpu_only]
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the attribute macro `spirv_std_macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/arch/primitive.rs:43:1
   |
43 | #[spirv_std_macros::gpu_only]
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the attribute macro `spirv_std_macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/arch/primitive.rs:63:1
   |
63 | #[spirv_std_macros::gpu_only]
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the attribute macro `spirv_std_macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
 --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/arch/ray_tracing.rs:1:7
  |
1 | #[cfg(target_arch = "spirv")]
  |       ^^^^^^^^^^^^^^^^^^^^^
  |
  = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/arch/ray_tracing.rs:21:1
   |
21 | #[spirv_std_macros::gpu_only]
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the attribute macro `spirv_std_macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/arch/ray_tracing.rs:42:1
   |
42 | #[spirv_std_macros::gpu_only]
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the attribute macro `spirv_std_macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/arch/ray_tracing.rs:53:1
   |
53 | #[spirv_std_macros::gpu_only]
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the attribute macro `spirv_std_macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/arch/ray_tracing.rs:73:1
   |
73 | #[spirv_std_macros::gpu_only]
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the attribute macro `spirv_std_macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/arch.rs:251:11
    |
251 |     #[cfg(target_arch = "spirv")]
    |           ^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/arch.rs:267:15
    |
267 |     #[cfg(not(target_arch = "spirv"))]
    |               ^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/arch.rs:272:11
    |
272 |     #[cfg(target_arch = "spirv")]
    |           ^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/arch.rs:288:15
    |
288 |     #[cfg(not(target_arch = "spirv"))]
    |               ^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/arch.rs:295:11
    |
295 |     #[cfg(target_arch = "spirv")]
    |           ^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/arch.rs:309:15
    |
309 |     #[cfg(not(target_arch = "spirv"))]
    |               ^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/arch.rs:314:11
    |
314 |     #[cfg(target_arch = "spirv")]
    |           ^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/arch.rs:328:15
    |
328 |     #[cfg(not(target_arch = "spirv"))]
    |               ^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
 --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/byte_addressable_buffer.rs:5:1
  |
5 | #[spirv(buffer_load_intrinsic)]
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
  = note: this warning originates in the attribute macro `spirv` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
 --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/byte_addressable_buffer.rs:8:1
  |
8 | #[spirv_std_macros::gpu_only]
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
  = note: this warning originates in the attribute macro `spirv_std_macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/byte_addressable_buffer.rs:25:1
   |
25 | #[spirv(buffer_store_intrinsic)]
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the attribute macro `spirv` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/byte_addressable_buffer.rs:28:1
   |
28 | #[spirv_std_macros::gpu_only]
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the attribute macro `spirv_std_macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
 --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/float.rs:4:7
  |
4 | #[cfg(target_arch = "spirv")]
  |       ^^^^^^^^^^^^^^^^^^^^^
  |
  = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/float.rs:66:12
   |
66 | #[cfg_attr(target_arch = "spirv", repr(simd))]
   |            ^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/float.rs:27:1
   |
27 | #[spirv_std_macros::gpu_only]
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the attribute macro `spirv_std_macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/float.rs:46:1
   |
46 | #[spirv_std_macros::gpu_only]
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the attribute macro `spirv_std_macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/float.rs:78:1
   |
78 | #[spirv_std_macros::gpu_only]
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the attribute macro `spirv_std_macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/float.rs:85:1
   |
85 | #[spirv_std_macros::gpu_only]
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the attribute macro `spirv_std_macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/float.rs:93:1
   |
93 | #[spirv_std_macros::gpu_only]
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the attribute macro `spirv_std_macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/float.rs:113:1
    |
113 | #[spirv_std_macros::gpu_only]
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the attribute macro `spirv_std_macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/float.rs:133:1
    |
133 | #[spirv_std_macros::gpu_only]
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the attribute macro `spirv_std_macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/float.rs:153:1
    |
153 | #[spirv_std_macros::gpu_only]
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the attribute macro `spirv_std_macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/float.rs:173:1
    |
173 | #[spirv_std_macros::gpu_only]
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the attribute macro `spirv_std_macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/float.rs:194:1
    |
194 | #[spirv_std_macros::gpu_only]
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the attribute macro `spirv_std_macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/float.rs:215:1
    |
215 | #[spirv_std_macros::gpu_only]
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the attribute macro `spirv_std_macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/float.rs:236:1
    |
236 | #[spirv_std_macros::gpu_only]
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the attribute macro `spirv_std_macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
 --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/image.rs:3:7
  |
3 | #[cfg(target_arch = "spirv")]
  |       ^^^^^^^^^^^^^^^^^^^^^
  |
  = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
 --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/image.rs:5:7
  |
5 | #[cfg(target_arch = "spirv")]
  |       ^^^^^^^^^^^^^^^^^^^^^
  |
  = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/image.rs:99:1
   |
99 | #[spirv(generic_image_type)]
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the attribute macro `spirv` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/image.rs:1040:1
     |
1040 | #[spirv(sampled_image)]
     | ^^^^^^^^^^^^^^^^^^^^^^^
     |
     = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
     = note: this warning originates in the attribute macro `spirv` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/image.rs:140:5
    |
140 |     #[crate::macros::gpu_only]
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the attribute macro `crate::macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/image.rs:187:5
    |
187 |     #[crate::macros::gpu_only]
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the attribute macro `crate::macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/image.rs:221:5
    |
221 |     #[crate::macros::gpu_only]
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the attribute macro `crate::macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/image.rs:251:5
    |
251 |     #[crate::macros::gpu_only]
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the attribute macro `crate::macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/image.rs:283:5
    |
283 |     #[crate::macros::gpu_only]
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the attribute macro `crate::macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/image.rs:315:5
    |
315 |     #[crate::macros::gpu_only]
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the attribute macro `crate::macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/image.rs:350:5
    |
350 |     #[crate::macros::gpu_only]
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the attribute macro `crate::macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/image.rs:382:5
    |
382 |     #[crate::macros::gpu_only]
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the attribute macro `crate::macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/image.rs:417:5
    |
417 |     #[crate::macros::gpu_only]
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the attribute macro `crate::macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/image.rs:477:5
    |
477 |     #[crate::macros::gpu_only]
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the attribute macro `crate::macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/image.rs:505:5
    |
505 |     #[crate::macros::gpu_only]
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the attribute macro `crate::macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/image.rs:537:5
    |
537 |     #[crate::macros::gpu_only]
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the attribute macro `crate::macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/image.rs:572:5
    |
572 |     #[crate::macros::gpu_only]
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the attribute macro `crate::macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/image.rs:604:5
    |
604 |     #[crate::macros::gpu_only]
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the attribute macro `crate::macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/image.rs:639:5
    |
639 |     #[crate::macros::gpu_only]
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the attribute macro `crate::macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/image.rs:700:5
    |
700 |     #[crate::macros::gpu_only]
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the attribute macro `crate::macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/image.rs:727:5
    |
727 |     #[crate::macros::gpu_only]
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the attribute macro `crate::macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/image.rs:769:5
    |
769 |     #[crate::macros::gpu_only]
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the attribute macro `crate::macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/image.rs:796:5
    |
796 |     #[crate::macros::gpu_only]
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the attribute macro `crate::macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/image.rs:838:5
    |
838 |     #[crate::macros::gpu_only]
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the attribute macro `crate::macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/image.rs:877:5
    |
877 |     #[crate::macros::gpu_only]
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the attribute macro `crate::macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/image.rs:899:5
    |
899 |     #[crate::macros::gpu_only]
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the attribute macro `crate::macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/image.rs:934:5
    |
934 |     #[crate::macros::gpu_only]
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the attribute macro `crate::macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/image.rs:975:5
    |
975 |     #[crate::macros::gpu_only]
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the attribute macro `crate::macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/image.rs:1019:5
     |
1019 |     #[crate::macros::gpu_only]
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
     = note: this warning originates in the attribute macro `crate::macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/image.rs:1069:5
     |
1069 |     #[crate::macros::gpu_only]
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
     = note: this warning originates in the attribute macro `crate::macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/image.rs:1093:5
     |
1093 |     #[crate::macros::gpu_only]
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
     = note: this warning originates in the attribute macro `crate::macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/image.rs:1226:5
     |
1226 |     #[crate::macros::gpu_only]
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
     = note: this warning originates in the attribute macro `crate::macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/image.rs:1252:5
     |
1252 |     #[crate::macros::gpu_only]
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
     = note: this warning originates in the attribute macro `crate::macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/image.rs:1287:5
     |
1287 |     #[crate::macros::gpu_only]
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
     = note: this warning originates in the attribute macro `crate::macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/image.rs:1317:5
     |
1317 |     #[crate::macros::gpu_only]
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
     = note: this warning originates in the attribute macro `crate::macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/image.rs:1350:5
     |
1350 |     #[crate::macros::gpu_only]
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
     = note: this warning originates in the attribute macro `crate::macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
    --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/image.rs:1380:5
     |
1380 |     #[crate::macros::gpu_only]
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
     = note: this warning originates in the attribute macro `crate::macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
 --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/ray_tracing.rs:3:7
  |
3 | #[cfg(target_arch = "spirv")]
  |       ^^^^^^^^^^^^^^^^^^^^^
  |
  = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
 --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/ray_tracing.rs:8:1
  |
8 | #[spirv(acceleration_structure)]
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
  = note: this warning originates in the attribute macro `spirv` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/ray_tracing.rs:192:1
    |
192 | #[spirv(ray_query)]
    | ^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the attribute macro `spirv` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/ray_tracing.rs:22:5
   |
22 |     #[spirv_std_macros::gpu_only]
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the attribute macro `spirv_std_macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/ray_tracing.rs:41:5
   |
41 |     #[spirv_std_macros::gpu_only]
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the attribute macro `spirv_std_macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/ray_tracing.rs:58:5
   |
58 |     #[spirv_std_macros::gpu_only]
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the attribute macro `spirv_std_macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/ray_tracing.rs:240:5
    |
240 |     #[spirv_std_macros::gpu_only]
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the attribute macro `spirv_std_macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/ray_tracing.rs:281:5
    |
281 |     #[spirv_std_macros::gpu_only]
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the attribute macro `spirv_std_macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/ray_tracing.rs:302:5
    |
302 |     #[spirv_std_macros::gpu_only]
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the attribute macro `spirv_std_macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/ray_tracing.rs:316:5
    |
316 |     #[spirv_std_macros::gpu_only]
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the attribute macro `spirv_std_macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/ray_tracing.rs:326:5
    |
326 |     #[spirv_std_macros::gpu_only]
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the attribute macro `spirv_std_macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/ray_tracing.rs:348:5
    |
348 |     #[spirv_std_macros::gpu_only]
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the attribute macro `spirv_std_macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/ray_tracing.rs:371:5
    |
371 |     #[spirv_std_macros::gpu_only]
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the attribute macro `spirv_std_macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/ray_tracing.rs:388:5
    |
388 |     #[spirv_std_macros::gpu_only]
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the attribute macro `spirv_std_macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/ray_tracing.rs:409:5
    |
409 |     #[spirv_std_macros::gpu_only]
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the attribute macro `spirv_std_macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/ray_tracing.rs:433:5
    |
433 |     #[spirv_std_macros::gpu_only]
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the attribute macro `spirv_std_macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/ray_tracing.rs:454:5
    |
454 |     #[spirv_std_macros::gpu_only]
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the attribute macro `spirv_std_macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/ray_tracing.rs:478:5
    |
478 |     #[spirv_std_macros::gpu_only]
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the attribute macro `spirv_std_macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/ray_tracing.rs:499:5
    |
499 |     #[spirv_std_macros::gpu_only]
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the attribute macro `spirv_std_macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/ray_tracing.rs:523:5
    |
523 |     #[spirv_std_macros::gpu_only]
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the attribute macro `spirv_std_macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/ray_tracing.rs:544:5
    |
544 |     #[spirv_std_macros::gpu_only]
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the attribute macro `spirv_std_macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/ray_tracing.rs:568:5
    |
568 |     #[spirv_std_macros::gpu_only]
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the attribute macro `spirv_std_macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/ray_tracing.rs:589:5
    |
589 |     #[spirv_std_macros::gpu_only]
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the attribute macro `spirv_std_macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/ray_tracing.rs:613:5
    |
613 |     #[spirv_std_macros::gpu_only]
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the attribute macro `spirv_std_macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/ray_tracing.rs:634:5
    |
634 |     #[spirv_std_macros::gpu_only]
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the attribute macro `spirv_std_macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/ray_tracing.rs:658:5
    |
658 |     #[spirv_std_macros::gpu_only]
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the attribute macro `spirv_std_macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/ray_tracing.rs:681:5
    |
681 |     #[spirv_std_macros::gpu_only]
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the attribute macro `spirv_std_macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/ray_tracing.rs:707:5
    |
707 |     #[spirv_std_macros::gpu_only]
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the attribute macro `spirv_std_macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/ray_tracing.rs:731:5
    |
731 |     #[spirv_std_macros::gpu_only]
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the attribute macro `spirv_std_macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/ray_tracing.rs:758:5
    |
758 |     #[spirv_std_macros::gpu_only]
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the attribute macro `spirv_std_macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/ray_tracing.rs:779:5
    |
779 |     #[spirv_std_macros::gpu_only]
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the attribute macro `spirv_std_macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/ray_tracing.rs:800:5
    |
800 |     #[spirv_std_macros::gpu_only]
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the attribute macro `spirv_std_macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/ray_tracing.rs:825:5
    |
825 |     #[spirv_std_macros::gpu_only]
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the attribute macro `spirv_std_macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/ray_tracing.rs:847:5
    |
847 |     #[spirv_std_macros::gpu_only]
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the attribute macro `spirv_std_macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/ray_tracing.rs:872:5
    |
872 |     #[spirv_std_macros::gpu_only]
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the attribute macro `spirv_std_macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/ray_tracing.rs:891:5
    |
891 |     #[spirv_std_macros::gpu_only]
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the attribute macro `spirv_std_macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/ray_tracing.rs:909:5
    |
909 |     #[spirv_std_macros::gpu_only]
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the attribute macro `spirv_std_macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/ray_tracing.rs:930:5
    |
930 |     #[spirv_std_macros::gpu_only]
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the attribute macro `spirv_std_macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
   --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/ray_tracing.rs:963:5
    |
963 |     #[spirv_std_macros::gpu_only]
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the attribute macro `spirv_std_macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
 --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/runtime_array.rs:1:7
  |
1 | #[cfg(target_arch = "spirv")]
  |       ^^^^^^^^^^^^^^^^^^^^^
  |
  = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `spirv`
 --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/runtime_array.rs:9:1
  |
9 | #[spirv(runtime_array)]
  | ^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
  = note: this warning originates in the attribute macro `spirv` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/runtime_array.rs:29:5
   |
29 |     #[spirv_std_macros::gpu_only]
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the attribute macro `spirv_std_macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
  --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/runtime_array.rs:50:5
   |
50 |     #[spirv_std_macros::gpu_only]
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the attribute macro `spirv_std_macros::gpu_only` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition value: `spirv`
 --> /home/jfredett/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spirv-std-0.9.0/src/sampler.rs:3:1
  |
3 | #[spirv(sampler)]
  | ^^^^^^^^^^^^^^^^^
  |
  = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
  = note: this warning originates in the attribute macro `spirv` (in Nightly builds, run with -Z macro-backtrace for more info)

[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: `spirv-std` (lib) generated 271 warnings (93 duplicates)
   Compiling shader-1 v0.1.0 (/home/jfredett/code/rust-gpu-ex/shader-1)
     Running `CARGO=/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/bin/cargo CARGO_CRATE_NAME=shader_1 CARGO_MANIFEST_DIR=/home/jfredett/code/rust-gpu-ex/shader-1 CARGO_MANIFEST_PATH=/home/jfredett/code/rust-gpu-ex/shader-1/Cargo.toml CARGO_PKG_AUTHORS='' CARGO_PKG_DESCRIPTION='' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=shader-1 CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='' CARGO_PKG_RUST_VERSION='' CARGO_PKG_VERSION=0.1.0 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=1 CARGO_PKG_VERSION_PATCH=0 CARGO_PKG_VERSION_PRE='' CARGO_PRIMARY_PACKAGE=1 LD_LIBRARY_PATH='/home/jfredett/code/rust-gpu-ex/target/debug/deps:/nix/store/ggqfrwgzpr3v3dkvh4cnmhymnvf6cqja-gcc-14-20241116-lib/lib' rustc --crate-name shader_1 --edition=2021 shader-1/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type dylib --crate-type lib --emit=dep-info,link -C embed-bitcode=no -C debuginfo=2 --check-cfg 'cfg(docsrs)' --check-cfg 'cfg(feature, values())' -C metadata=e2b978e1e011cc4d --out-dir /home/jfredett/code/rust-gpu-ex/target/debug/deps -C incremental=/home/jfredett/code/rust-gpu-ex/target/debug/incremental -L dependency=/home/jfredett/code/rust-gpu-ex/target/debug/deps --extern glam=/home/jfredett/code/rust-gpu-ex/target/debug/deps/libglam-06b7fa1243a0c7ae.rlib --extern rayon=/home/jfredett/code/rust-gpu-ex/target/debug/deps/librayon-1c52ff9068700f63.rlib --extern spirv_std=/home/jfredett/code/rust-gpu-ex/target/debug/deps/libspirv_std-cf63a239774bab5e.rlib`
error: unexpected `cfg` condition value: `spirv`
 --> shader-1/src/lib.rs:4:13
  |
4 | #![cfg_attr(target_arch = "spirv", no_std)]
  |             ^^^^^^^^^^^^^^^^^^^^^
  |
  = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
note: the lint level is defined here
 --> shader-1/src/lib.rs:6:9
  |
6 | #![deny(warnings)]
  |         ^^^^^^^^
  = note: `#[deny(unexpected_cfgs)]` implied by `#[deny(warnings)]`

error: unexpected `cfg` condition value: `spirv`
  --> shader-1/src/lib.rs:35:1
   |
35 | #[spirv(compute(threads(64)))]
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `target_arch` are: `aarch64`, `arm`, `arm64ec`, `avr`, `bpf`, `csky`, `hexagon`, `loongarch64`, `m68k`, `mips`, `mips32r6`, `mips64`, `mips64r6`, `msp430`, `nvptx64`, `powerpc`, `powerpc64`, `riscv32`, `riscv64`, `s390x`, `sparc`, `sparc64`, `wasm32`, `wasm64`, `x86`, `x86_64`, and `xtensa`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this error originates in the attribute macro `spirv` (in Nightly builds, run with -Z macro-backtrace for more info)

error: could not compile `shader-1` (lib) due to 2 previous errors

Caused by:
  process didn't exit successfully: `CARGO=/nix/store/bs8kmqhrwbhiialh83l5insyjr6hwsgf-rust-with-components-2024-11-22/bin/cargo CARGO_CRATE_NAME=shader_1 CARGO_MANIFEST_DIR=/home/jfredett/code/rust-gpu-ex/shader-1 CARGO_MANIFEST_PATH=/home/jfredett/code/rust-gpu-ex/shader-1/Cargo.toml CARGO_PKG_AUTHORS='' CARGO_PKG_DESCRIPTION='' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=shader-1 CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='' CARGO_PKG_RUST_VERSION='' CARGO_PKG_VERSION=0.1.0 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=1 CARGO_PKG_VERSION_PATCH=0 CARGO_PKG_VERSION_PRE='' CARGO_PRIMARY_PACKAGE=1 LD_LIBRARY_PATH='/home/jfredett/code/rust-gpu-ex/target/debug/deps:/nix/store/ggqfrwgzpr3v3dkvh4cnmhymnvf6cqja-gcc-14-20241116-lib/lib' rustc --crate-name shader_1 --edition=2021 shader-1/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type dylib --crate-type lib --emit=dep-info,link -C embed-bitcode=no -C debuginfo=2 --check-cfg 'cfg(docsrs)' --check-cfg 'cfg(feature, values())' -C metadata=e2b978e1e011cc4d --out-dir /home/jfredett/code/rust-gpu-ex/target/debug/deps -C incremental=/home/jfredett/code/rust-gpu-ex/target/debug/incremental -L dependency=/home/jfredett/code/rust-gpu-ex/target/debug/deps --extern glam=/home/jfredett/code/rust-gpu-ex/target/debug/deps/libglam-06b7fa1243a0c7ae.rlib --extern rayon=/home/jfredett/code/rust-gpu-ex/target/debug/deps/librayon-1c52ff9068700f63.rlib --extern spirv_std=/home/jfredett/code/rust-gpu-ex/target/debug/deps/libspirv_std-cf63a239774bab5e.rlib` (exit status: 1)
warning: build failed, waiting for other jobs to finish...
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] cargo:warning=Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] exit status: 0
[spirv-tools-sys 0.8.0] cargo:rerun-if-env-changed=AR_x86_64-unknown-linux-gnu
[spirv-tools-sys 0.8.0] AR_x86_64-unknown-linux-gnu = None
[spirv-tools-sys 0.8.0] cargo:rerun-if-env-changed=AR_x86_64_unknown_linux_gnu
[spirv-tools-sys 0.8.0] AR_x86_64_unknown_linux_gnu = None
[spirv-tools-sys 0.8.0] cargo:rerun-if-env-changed=HOST_AR
[spirv-tools-sys 0.8.0] HOST_AR = None
[spirv-tools-sys 0.8.0] cargo:rerun-if-env-changed=AR
[spirv-tools-sys 0.8.0] AR = None
[spirv-tools-sys 0.8.0] cargo:rerun-if-env-changed=ARFLAGS_x86_64-unknown-linux-gnu
[spirv-tools-sys 0.8.0] ARFLAGS_x86_64-unknown-linux-gnu = None
[spirv-tools-sys 0.8.0] cargo:rerun-if-env-changed=ARFLAGS_x86_64_unknown_linux_gnu
[spirv-tools-sys 0.8.0] ARFLAGS_x86_64_unknown_linux_gnu = None
[spirv-tools-sys 0.8.0] cargo:rerun-if-env-changed=HOST_ARFLAGS
[spirv-tools-sys 0.8.0] HOST_ARFLAGS = None
[spirv-tools-sys 0.8.0] cargo:rerun-if-env-changed=ARFLAGS
[spirv-tools-sys 0.8.0] ARFLAGS = None
[spirv-tools-sys 0.8.0] cargo:rustc-link-lib=static=spirv-tools
[spirv-tools-sys 0.8.0] cargo:rustc-link-search=native=/home/jfredett/code/rust-gpu-ex/target/debug/build/spirv-tools-sys-2ba8ab146f618903/out
[spirv-tools-sys 0.8.0] cargo:rerun-if-env-changed=CXXSTDLIB_x86_64-unknown-linux-gnu
[spirv-tools-sys 0.8.0] CXXSTDLIB_x86_64-unknown-linux-gnu = None
[spirv-tools-sys 0.8.0] cargo:rerun-if-env-changed=CXXSTDLIB_x86_64_unknown_linux_gnu
[spirv-tools-sys 0.8.0] CXXSTDLIB_x86_64_unknown_linux_gnu = None
[spirv-tools-sys 0.8.0] cargo:rerun-if-env-changed=HOST_CXXSTDLIB
[spirv-tools-sys 0.8.0] HOST_CXXSTDLIB = None
[spirv-tools-sys 0.8.0] cargo:rerun-if-env-changed=CXXSTDLIB
[spirv-tools-sys 0.8.0] CXXSTDLIB = None
[spirv-tools-sys 0.8.0] cargo:rustc-link-lib=stdc++
[spirv-tools-sys 0.8.0] cargo:rerun-if-changed=spirv-tools
[spirv-tools-sys 0.8.0] cargo:rerun-if-changed=spirv-headers
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
warning: spirv-tools-sys@0.8.0: Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
